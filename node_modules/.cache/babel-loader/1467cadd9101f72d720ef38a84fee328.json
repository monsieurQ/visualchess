{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/q/Documents/WebDocuments/ChessReact/chess/src/components/Moves/Moves.js\";\nimport React, { Component } from 'react';\nimport './Moves.css';\nlet columnConversion = {\n  1: 'a',\n  2: 'b',\n  3: 'c',\n  4: 'd',\n  5: 'e',\n  6: 'f',\n  7: 'g',\n  8: 'h'\n};\n\nclass Moves extends Component {\n  convertMove(move) {\n    let str = '' + move;\n    let r = Number(str.charAt(0));\n    let c = columnConversion[Number(str.charAt(1))];\n    return '' + c + r;\n  }\n\n  constructor(props) {\n    super(props);\n    let {\n      lastMove\n    } = props; // moveHistory: [[from, to], [from, to], [from, to], ...]\n    // this.newMoveBlack = this.newMoveBlack.bind(this);\n\n    this.state = {\n      render: [],\n      history: [lastMove],\n      playedMoves: 0\n    };\n  }\n\n  numberOfRows(length) {\n    return Math.ceil(length / 2);\n  }\n\n  newMoveWhite(move, move_number) {\n    let row_number = /*#__PURE__*/React.createElement('div', {\n      className: 'move_number',\n      key: `move_number${move_number}`\n    }, move_number);\n    let white = /*#__PURE__*/React.createElement('div', {\n      className: 'move_white',\n      key: `move_white${move_number}`\n    }, this.convertMove(move));\n    return [row_number, white];\n  }\n\n  newMoveBlack(move, move_number) {\n    let black = /*#__PURE__*/React.createElement('div', {\n      className: 'move_black',\n      key: `move_black${move_number}`\n    }, this.convertMove(move));\n    return black;\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    let {\n      lastMove\n    } = props;\n    let history_copy = [...state.history];\n    history_copy.push(lastMove); // this.setState(prevState=>({history:history_copy}));\n\n    return {\n      history: history_copy\n    };\n  }\n\n  render() {\n    let history = this.state.history;\n    console.log(history);\n    let render = [];\n    let move_number = 1;\n    history.forEach((element, index) => {\n      if (index % 2 === 0) {\n        render.push(this.newMoveWhite(element, move_number));\n        move_number++;\n      } else render.push(this.newMoveBlack(element, move_number));\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"moves\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"top_row\",\n        children: \" Moves \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"moves_table\",\n        children: render\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default Moves;","map":{"version":3,"sources":["/Users/q/Documents/WebDocuments/ChessReact/chess/src/components/Moves/Moves.js"],"names":["React","Component","columnConversion","Moves","convertMove","move","str","r","Number","charAt","c","constructor","props","lastMove","state","render","history","playedMoves","numberOfRows","length","Math","ceil","newMoveWhite","move_number","row_number","createElement","className","key","white","newMoveBlack","black","getDerivedStateFromProps","history_copy","push","console","log","forEach","element","index"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'; \nimport './Moves.css';\n\n\nlet columnConversion =  {1:'a', 2:'b', 3:'c', 4:'d', 5:'e', 6:'f', 7:'g', 8:'h'};\t\n\nclass Moves extends Component {\n\n\n\tconvertMove(move){\n\t\tlet str = ''+move; \n\t\tlet r = Number(str.charAt(0)); \n\t\tlet c = columnConversion[Number(str.charAt(1))];\n\t\treturn ''+c+r;\n\t}\n\n\tconstructor(props){\n\t\tsuper(props);\n\t\tlet {lastMove} = props;  // moveHistory: [[from, to], [from, to], [from, to], ...]\n\t\t// this.newMoveBlack = this.newMoveBlack.bind(this);\n\t\tthis.state = {\n\t\t\t render: [],\n\t\t\t history: [lastMove],\n\t\t\t playedMoves: 0\n\t\t}\n\t}\n\n\tnumberOfRows(length){\n\t\treturn Math.ceil(length/2);\n\t}\n\n\tnewMoveWhite(move, move_number){\n\t\tlet row_number = React.createElement('div', {className:'move_number',key:`move_number${move_number}`}, move_number);\n\t\tlet white = React.createElement('div', {className:'move_white', key: `move_white${move_number}`},this.convertMove(move));\n\t\treturn [row_number, white];\n\t}\n\tnewMoveBlack(move, move_number){\n\t\tlet black = React.createElement('div', {className:'move_black', key: `move_black${move_number}`},this.convertMove(move));\n\t\treturn black;\n\t}\n\n\n\tstatic getDerivedStateFromProps(props, state) {\n\t\tlet {lastMove} = props; \n\t\tlet history_copy = [...state.history];\n\t\thistory_copy.push(lastMove); \n\t\t// this.setState(prevState=>({history:history_copy}));\n\t\treturn {\n\t\t\thistory: history_copy\n\t\t};\n\t}\t\t\n\n\trender(){\n\t\tlet history = this.state.history;\n\t\tconsole.log(history);\n\t\tlet render = [];\n\t\tlet move_number = 1; \n\t\thistory.forEach((element,index)=>{\n\t\t\tif(index%2===0){\n\t\t\t\trender.push(this.newMoveWhite(element, move_number));\n\t\t\t\tmove_number++;\n\t\t\t}else render.push(this.newMoveBlack(element, move_number)); \n\t\t});\n\n\n\t\treturn (\n\t\t\t<div id=\"moves\"> \n\t\t\t\t<div id=\"top_row\"> Moves </div>\n\t\t\t\t<div id=\"moves_table\"> \n\t\t\t\t\t{render}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Moves; "]},"metadata":{},"sourceType":"module"}