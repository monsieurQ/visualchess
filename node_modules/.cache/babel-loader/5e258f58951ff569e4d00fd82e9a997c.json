{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/q/Documents/WebDocuments/chess/src/App.js\";\nimport './App.css';\nimport React, { Component } from 'react';\nimport Moves from './components/Moves/Moves';\nimport PopUp from './components/PopUp/PopUp';\nimport Button from './components/Button/Button'; // import Squares from './components/Squares/Squares';\n\nimport Draggable from 'react-draggable';\nimport * as ChessJS from 'chess.js';\nconst Chess = typeof ChessJS === \"function\" ? ChessJS : ChessJS.Chess;\nconst chess = new Chess();\nconst squareID = [\"a8\", \"b8\", \"c8\", \"d8\", \"e8\", \"f8\", \"g8\", \"h8\", \"a7\", \"b7\", \"c7\", \"d7\", \"e7\", \"f7\", \"g7\", \"h7\", \"a6\", \"b6\", \"c6\", \"d6\", \"e6\", \"f6\", \"g6\", \"h6\", \"a5\", \"b5\", \"c5\", \"d5\", \"e5\", \"f5\", \"g5\", \"h5\", \"a4\", \"b4\", \"c4\", \"d4\", \"e4\", \"f4\", \"g4\", \"h4\", \"a3\", \"b3\", \"c3\", \"d3\", \"e3\", \"f3\", \"g3\", \"h3\", \"a2\", \"b2\", \"c2\", \"d2\", \"e2\", \"f2\", \"g2\", \"h2\", \"a1\", \"b1\", \"c1\", \"d1\", \"e1\", \"f1\", \"g1\", \"h1\"];\nconst squares = {};\nsquareID.forEach((e, i) => {\n  squares[e] = {};\n}); // console.log(chess.board().flat().reverse());\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.colorConv = color => {\n      return color === 'w' ? 'white' : 'black';\n    };\n\n    this.closePopup = text => {\n      console.log(\"hi\", text);\n      if (!text) this.setState({\n        popUp: false\n      });else {\n        this.setState({\n          popUp: false,\n          entered_pgn: text\n        });\n        this.loadPGN(text);\n      }\n    };\n\n    this.keyDownHandler = e => {\n      switch (e.keyCode) {\n        case 39:\n          e.preventDefault();\n\n          if (this.state.selected_move + 1 <= this.state.fen_history.length - 1) {\n            this.setState(prevState => ({\n              selected_move: prevState.selected_move + 1\n            })); // this.removeClassFromAll('selected');\n            // document.getElementById('m'+this.state.selected_move+1).classList.add('selected');\n          }\n\n          break;\n\n        case 37:\n          e.preventDefault();\n\n          if (this.state.selected_move >= 1) {\n            this.setState(prevState => ({\n              selected_move: prevState.selected_move - 1\n            })); // this.removeClassFromAll('selected');\n            // document.getElementById('m'+this.state.selected_move-1).classList.add('selected');\n          }\n\n          break;\n\n        case 27:\n          e.preventDefault();\n\n          if (this.state.popUp) {\n            this.setState({\n              popUp: false\n            });\n          }\n\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.dragOverHandler = e => {\n      e.preventDefault(e);\n      requestAnimationFrame(function () {\n        e.target.classList.add('dragover');\n      });\n    };\n\n    this.dragLeaveHandler = e => {\n      e.preventDefault();\n      requestAnimationFrame(function () {\n        e.target.classList.remove('dragover');\n      });\n    };\n\n    this.handleControlClick = () => {\n      if (!this.state.control) {\n        this.showBoardControl();\n      } else {}\n    };\n\n    this.showBoardControl = () => {\n      // document.getElementById('d5').classList.add('attacked');\n      // document.getElementById('d5').style.setProperty('--separator', '50%');\n      // console.log(chess.moves({square:'e7'}));\n      console.log(chess.turn());\n      console.log(chess.defended_pieces());\n      console.log(chess.defended_pieces(chess.WHITE)); // console.time('hey');\n      // let fen = chess.fen();\n      // let turn = chess.turn(); \n      // let white_moves = this.state.white_moves;\n      // let black_moves = this.state.black_moves;\n      // let pawns = chess.board().flat().map((square, index) => {\n      //   if(square && square.type==='p') return [index, square.color];\n      // }).filter(element => element);\n      // let not_pawns = chess.moves({verbose: true}).filter(e => e.piece!=='p');\n      // if(turn==='b'){\n      //   black_moves = not_pawns.map(move => move.to);\n      //   if(!white_moves){\n      //     let fen2 = fen.replace(/\\sb\\s/g, ' w ');\n      //     chess.load(fen2); \n      //     white_moves = chess.moves({verbose: true}).filter(e=>e.piece!=='p').map(move => move.to);; \n      //     chess.load(fen); \n      //   }\n      // }else if(turn==='w'){\n      //   white_moves = not_pawns.map(move => move.to);;\n      //   if(!black_moves){\n      //     let fen2 = fen.replace(/\\sw\\s/g, ' b ');\n      //     chess.load(fen2); \n      //     black_moves = chess.moves({verbose: true}).filter(e=>e.piece!=='p').map(move => move.to);; \n      //     chess.load(fen); \n      //   }\n      // }\n      // pawns.forEach(([square, color], index) => {\n      //   if(color==='w') white_moves.push(this.diagonalPawnMoves(square, 'w'));\n      //   else black_moves.push(this.diagonalPawnMoves(square, 'b'));\n      // });\n      // white_moves = white_moves.flat();\n      // black_moves = black_moves.flat();\n      // white_moves.forEach(e=>{\n      //   if(!squares[e].w) squares[e].w = []; \n      //   if(!squares[e].b) squares[e].b = []; \n      //   squares[e].w.push(e);\n      // });\n      // black_moves.forEach(e=>{\n      //   if(!squares[e].w) squares[e].w = []; \n      //   if(!squares[e].b) squares[e].b = []; \n      //   squares[e].b.push(e);\n      // })\n      // console.log(squares);\n      // for (let [square, value] of Object.entries(squares)) {\n      //   if(value.w||value.b){ \n      //     let dom = document.getElementById(square);\n      //     dom.classList.add('attacked');\n      //     dom.style.setProperty('--separator', this.getSquareRatio(value)+'%');\n      //   }\n      // }\n      // this.setState({white_moves, black_moves});\n    };\n\n    this.handleEvalClick = () => {\n      let pgn = \"1. d4 d5 2. c4 c6 3. Nf3 Nf6 4. Nc3 e6 5. e3 Nbd7 6. Bd3 dxc4 7. Bxc4 b5 8. Bd3 Bd6 9. O-O O-O 10. Qc2 Bb7 11. a3 Rc8 12. Ng5 c5 13. Nxh7 Ng4 14. f4 cxd4 15. exd4 Bc5 16. Be2 Nde5 17. Bxg4 Bxd4+ 18. Kh1 Nxg4 19. Nxf8 f5 20. Ng6 Qf6 21. h3 Qxg6 22. Qe2 Qh5 23. Qd3 Be3 0-1\";\n      this.loadPGN(pgn);\n    };\n\n    this.pgnClick = () => {\n      this.setState({\n        popUp: true\n      });\n    };\n\n    this.dragStartHandler = (e, i) => {\n      e.dataTransfer.effectAllowed = \"all\";\n      e.dataTransfer.dropEffect = \"move\";\n      e.dataTransfer.setData(\"text/plain\", i);\n      requestAnimationFrame(function () {\n        e.target.classList.add('hide');\n      });\n      this.highlightMoves(i);\n    };\n\n    this.dragEndHandler = e => {\n      e.preventDefault();\n      requestAnimationFrame(function () {\n        e.target.classList.remove('hide');\n      });\n    };\n\n    this.dropHandler = (e, target) => {\n      e.preventDefault();\n      this.removeClassesFromAll('dragover', 'moveable');\n      let origin = e.dataTransfer.getData('text/plain');\n      this.newMove(origin, target);\n    };\n\n    this.moveClick = number => {\n      // console.log('move clicked',number);\n      // console.log(this.state.fen_history);\n      // chess.load(this.state.fen_history[number+1]);\n      // this.removeClassFromAll('selected');\n      // document.getElementById('m'+number).classList.add('selected');\n      this.setState({\n        colorToMove: chess.turn(),\n        selected_move: number + 1\n      });\n    };\n\n    this.handleClick = square => {\n      let clicked = this.state.piece_clicked;\n\n      if (clicked) {\n        if (this.newMove(clicked, square)) {\n          this.removeClassesFromAll('moveable', 'active');\n          this.setState({\n            piece_clicked: false\n          });\n        } else {// this.removeClassFromAll('active'); \n          // this.setState({piece_clicked: false })\n        }\n      }\n    };\n\n    this.squareColorConv = color => {\n      if (color === 'light') return 'w';else if (color === 'dark') return 'b';\n    };\n\n    this.handlePieceClick = square => {\n      let clicked = this.state.piece_clicked;\n\n      if (!clicked) {\n        if (this.pieceIsTurnColor(square)) {\n          document.getElementById(square).classList.add('active');\n          this.highlightMoves(square);\n          this.setState({\n            piece_clicked: square\n          });\n        }\n      } else {\n        this.removeClassesFromAll('active', 'moveable');\n\n        if (this.squaresOfSameColor(square, clicked)) {\n          // Wenn selbfarbiges, anderes piece gedrÃ¼ckt \n          document.getElementById(square).classList.add('active');\n          this.highlightMoves(square);\n          this.setState({\n            piece_clicked: square\n          });\n        } else {\n          // Capture \n          if (this.newMove(clicked, square)) {\n            this.removeClassesFromAll('active', 'moveable');\n            this.setState({\n              piece_clicked: null\n            });\n          }\n        }\n      }\n    };\n\n    this.removeClassFromAll = remove => {\n      document.querySelectorAll('.' + remove).forEach(el => el.classList.remove(remove));\n    };\n\n    this.removeClassesFromAll = (...classes) => {\n      classes.forEach(e => document.querySelectorAll('.' + e).forEach(el => el.classList.remove(e)));\n    };\n\n    this.state = {\n      colorToMove: chess.turn(),\n      selected_move: 0,\n      piece_clicked: false,\n      // board: chess.board().flat(),\n      history: [],\n      // single moves \n      fen_history: [chess.fen()],\n      // moves in fen \n      flipped: false,\n      loaded_game: null,\n      popUp: false,\n      control: false,\n      entered_pgn: '',\n      white_moves: null,\n      black_moves: null\n    };\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.keyDownHandler);\n  }\n\n  render() {\n    // let arr = this.state.flipped ? chess.board().flat().reverse() : chess.board().flat();\n    chess.load(this.state.fen_history[this.state.selected_move]);\n    let arr = chess.board().flat();\n    let squares_ids = this.state.flipped ? squareID.reverse() : squareID;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board\",\n        children: arr.map((square, i) => {\n          return square ? /*#__PURE__*/_jsxDEV(\"div\", {\n            onDragOver: this.dragOverHandler,\n            onDragLeave: this.dragLeaveHandler,\n            onDrop: e => this.dropHandler(e, squareID[i]),\n            id: squares_ids[i],\n            className: \"square\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `piece ${this.colorConv(square.color)} ${square.type}`,\n              draggable: \"true\",\n              \"data-position\": squares_ids[i],\n              onDragStart: e => this.dragStartHandler(e, squares_ids[i]),\n              onDragEnd: () => this.dragEndHandler,\n              onClick: () => this.handlePieceClick(squares_ids[i])\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 19\n            }, this)\n          }, 'square' + i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            id: squares_ids[i],\n            onDragOver: this.dragOverHandler,\n            onDragLeave: this.dragLeaveHandler,\n            onClick: () => this.handleClick(squares_ids[i]),\n            onDrop: e => this.dropHandler(e, squares_ids[i]),\n            className: \"square\"\n          }, 'square' + i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Moves, {\n        onClick: this.moveClick,\n        selected_move: this.state.selected_move,\n        moves: this.state.history,\n        colorToMove: this.state.colorToMove,\n        evalClick: this.handleEvalClick,\n        flip: this.flipClick,\n        control: this.handleControlClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button_wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          text: \"Evaluate\",\n          onClick: this.handleEvalClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          text: \"Enter PGN\",\n          onClick: this.pgnClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          text: \"Evaluate\",\n          onClick: this.handleControlClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), this.state.popUp ? /*#__PURE__*/_jsxDEV(PopUp, {\n        text: \"Enter PGN\",\n        closePopup: this.closePopup\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this);\n  }\n\n  diagonalPawnMoves(square, color) {\n    if (this.isOnFirstOrLastRank(square)) return false;\n    let moves = [];\n    let [l, r] = color === 'w' ? [-9, -7] : [7, 9];\n\n    switch (this.isOnEdge(square)) {\n      case 0:\n        moves.push(squareID[square + l], squareID[square + r]);\n        break;\n\n      case 1:\n        moves.push(squareID[square + r]);\n        break;\n\n      case 2:\n        moves.push(squareID[square + l]);\n        break;\n\n      default:\n        moves.push(squareID[square + l], squareID[square + r]);\n        break;\n    }\n\n    return moves;\n  }\n\n  isOnFirstOrLastRank(square) {\n    return square >= 0 && square <= 7 || square >= 56 && square <= 63;\n  }\n  /*\n  return 1 ... left Edge, \n         2 ... right edge \n         0 ... not on edge\n  */\n\n\n  isOnEdge(square) {\n    if ([0, 8, 16, 24, 32, 40, 48, 56].includes(square)) return 1;\n    if ([7, 15, 23, 31, 39, 47, 55, 63].includes(square)) return 2;\n    return 0;\n  }\n\n  getSquareRatio(square) {\n    let w = 0;\n    let b = 0;\n    if (square.w) w = square.w.length;\n    if (square.b) b = square.b.length;\n    let sum = w + b;\n    let whiteshare = w / sum * 100;\n    let blackshare = b / sum * 100; // this._square.style.setProperty(\"--separator\", whiteshare+'%');\n\n    return whiteshare;\n  }\n\n  loadPGN(pgn) {\n    let r = chess.load_pgn(pgn);\n\n    if (r) {\n      let history = chess.history();\n      chess.reset();\n      let fen_history = [chess.fen()];\n      history.forEach(e => {\n        chess.move(e);\n        fen_history.push(chess.fen());\n      }); // let fen_history = history.map(e => {\n      //   chess.move(e);\n      //   return chess.fen();   \n      // });\n\n      chess.load(fen_history[0]);\n      this.setState({\n        history,\n        fen_history,\n        loaded_game: pgn,\n        selected_move: 0\n      });\n    } else alert(\"error\");\n  }\n\n  getColorToMoveByMoveNumber(number) {\n    return number % 2 === 0 ? 1 : -1;\n  }\n\n  squaresOfSameColor(one, two) {\n    return chess.get(one).color === chess.get(two).color;\n  }\n\n  highlightMoves(piece) {\n    chess.moves({\n      square: piece,\n      verbose: true\n    }).forEach(move => {\n      document.getElementById(move.to).classList.add('moveable');\n    });\n  }\n\n  pieceIsTurnColor(piece) {\n    return chess.get(piece).color === chess.turn();\n  }\n\n  newMove(from, to) {\n    let res = chess.move({\n      from,\n      to\n    });\n\n    if (res) {\n      let fen_history = [...this.state.fen_history];\n      fen_history.push(chess.fen());\n      let history = [...this.state.history];\n      history.push(res.san);\n      this.setState(prevState => ({\n        selected_move: prevState.selected_move + 1,\n        history,\n        colorToMove: chess.turn(),\n        fen_history\n      }));\n      return res.san;\n    } else return false;\n  }\n\n  switchColor() {\n    return this.state.colorToMove === 1 ? -1 : 1;\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/q/Documents/WebDocuments/chess/src/App.js"],"names":["React","Component","Moves","PopUp","Button","Draggable","ChessJS","Chess","chess","squareID","squares","forEach","e","i","App","constructor","colorConv","color","closePopup","text","console","log","setState","popUp","entered_pgn","loadPGN","keyDownHandler","keyCode","preventDefault","state","selected_move","fen_history","length","prevState","dragOverHandler","requestAnimationFrame","target","classList","add","dragLeaveHandler","remove","handleControlClick","control","showBoardControl","turn","defended_pieces","WHITE","handleEvalClick","pgn","pgnClick","dragStartHandler","dataTransfer","effectAllowed","dropEffect","setData","highlightMoves","dragEndHandler","dropHandler","removeClassesFromAll","origin","getData","newMove","moveClick","number","colorToMove","handleClick","square","clicked","piece_clicked","squareColorConv","handlePieceClick","pieceIsTurnColor","document","getElementById","squaresOfSameColor","removeClassFromAll","querySelectorAll","el","classes","history","fen","flipped","loaded_game","white_moves","black_moves","componentDidMount","addEventListener","render","load","arr","board","flat","squares_ids","reverse","map","type","flipClick","diagonalPawnMoves","isOnFirstOrLastRank","moves","l","r","isOnEdge","push","includes","getSquareRatio","w","b","sum","whiteshare","blackshare","load_pgn","reset","move","alert","getColorToMoveByMoveNumber","one","two","get","piece","verbose","to","from","res","san","switchColor"],"mappings":";;AAAA,OAAO,WAAP;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,MAAP,MAAmB,4BAAnB,C,CACA;;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,OAAO,KAAKC,OAAZ,MAAyB,UAAzB;AACA,MAAMC,KAAK,GAAG,OAAOD,OAAP,KAAmB,UAAnB,GAAgCA,OAAhC,GAA0CA,OAAO,CAACC,KAAhE;AACA,MAAMC,KAAK,GAAG,IAAID,KAAJ,EAAd;AAEA,MAAME,QAAQ,GAAG,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,IAA/B,EAAqC,IAArC,EAA2C,IAA3C,EAAiD,IAAjD,EAAuD,IAAvD,EAA6D,IAA7D,EAAmE,IAAnE,EAAyE,IAAzE,EAA+E,IAA/E,EAAqF,IAArF,EAA2F,IAA3F,EAAiG,IAAjG,EAAuG,IAAvG,EAA6G,IAA7G,EAAmH,IAAnH,EAAyH,IAAzH,EAA+H,IAA/H,EAAqI,IAArI,EAA2I,IAA3I,EAAiJ,IAAjJ,EAAuJ,IAAvJ,EAA6J,IAA7J,EAAmK,IAAnK,EAAyK,IAAzK,EAA+K,IAA/K,EAAqL,IAArL,EAA2L,IAA3L,EAAiM,IAAjM,EAAuM,IAAvM,EAA6M,IAA7M,EAAmN,IAAnN,EAAyN,IAAzN,EAA+N,IAA/N,EAAqO,IAArO,EAA2O,IAA3O,EAAiP,IAAjP,EAAuP,IAAvP,EAA6P,IAA7P,EAAmQ,IAAnQ,EAAyQ,IAAzQ,EAA+Q,IAA/Q,EAAqR,IAArR,EAA2R,IAA3R,EAAiS,IAAjS,EAAuS,IAAvS,EAA6S,IAA7S,EAAmT,IAAnT,EAAyT,IAAzT,EAA+T,IAA/T,EAAqU,IAArU,EAA2U,IAA3U,EAAiV,IAAjV,EAAuV,IAAvV,EAA6V,IAA7V,EAAmW,IAAnW,EAAyW,IAAzW,EAA+W,IAA/W,EAAqX,IAArX,EAA2X,IAA3X,CAAjB;AACA,MAAMC,OAAO,GAAG,EAAhB;AACAD,QAAQ,CAACE,OAAT,CAAiB,CAACC,CAAD,EAAIC,CAAJ,KAAQ;AACvBH,EAAAA,OAAO,CAACE,CAAD,CAAP,GAAa,EAAb;AACD,CAFD,E,CAIA;;AAEA,MAAME,GAAN,SAAkBb,SAAlB,CAA4B;AAC1Bc,EAAAA,WAAW,GAAE;AACX;;AADW,SAuBbC,SAvBa,GAuBDC,KAAK,IAAI;AACnB,aAAOA,KAAK,KAAG,GAAR,GAAc,OAAd,GAAwB,OAA/B;AACD,KAzBY;;AAAA,SA4FbC,UA5Fa,GA4FCC,IAAD,IAAU;AACrBC,MAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAkBF,IAAlB;AACA,UAAG,CAACA,IAAJ,EAAU,KAAKG,QAAL,CAAc;AAACC,QAAAA,KAAK,EAAE;AAAR,OAAd,EAAV,KACI;AACF,aAAKD,QAAL,CAAc;AAACC,UAAAA,KAAK,EAAE,KAAR;AAAeC,UAAAA,WAAW,EAAEL;AAA5B,SAAd;AACA,aAAKM,OAAL,CAAaN,IAAb;AACD;AACF,KAnGY;;AAAA,SAwIbO,cAxIa,GAwIKd,CAAD,IAAK;AACpB,cAAOA,CAAC,CAACe,OAAT;AACE,aAAK,EAAL;AACEf,UAAAA,CAAC,CAACgB,cAAF;;AACA,cAAG,KAAKC,KAAL,CAAWC,aAAX,GAAyB,CAAzB,IAA4B,KAAKD,KAAL,CAAWE,WAAX,CAAuBC,MAAvB,GAA8B,CAA7D,EAA+D;AAC7D,iBAAKV,QAAL,CAAcW,SAAS,KAAG;AAACH,cAAAA,aAAa,EAAEG,SAAS,CAACH,aAAV,GAAwB;AAAxC,aAAH,CAAvB,EAD6D,CAE7D;AACA;AACD;;AACD;;AACF,aAAK,EAAL;AACElB,UAAAA,CAAC,CAACgB,cAAF;;AACA,cAAG,KAAKC,KAAL,CAAWC,aAAX,IAA0B,CAA7B,EAA+B;AAC7B,iBAAKR,QAAL,CAAcW,SAAS,KAAG;AAACH,cAAAA,aAAa,EAAEG,SAAS,CAACH,aAAV,GAAwB;AAAxC,aAAH,CAAvB,EAD6B,CAE7B;AACA;AACD;;AACD;;AACF,aAAK,EAAL;AACElB,UAAAA,CAAC,CAACgB,cAAF;;AACA,cAAG,KAAKC,KAAL,CAAWN,KAAd,EAAoB;AAClB,iBAAKD,QAAL,CAAc;AAACC,cAAAA,KAAK,EAAE;AAAR,aAAd;AACD;;AACD;;AACF;AAAS;AAvBX;AAyBD,KAlKY;;AAAA,SAoKbW,eApKa,GAoKMtB,CAAD,IAAO;AACvBA,MAAAA,CAAC,CAACgB,cAAF,CAAiBhB,CAAjB;AACAuB,MAAAA,qBAAqB,CAAC,YAAY;AAChCvB,QAAAA,CAAC,CAACwB,MAAF,CAASC,SAAT,CAAmBC,GAAnB,CAAuB,UAAvB;AACD,OAFoB,CAArB;AAGD,KAzKY;;AAAA,SA2KbC,gBA3Ka,GA2KO3B,CAAD,IAAO;AACxBA,MAAAA,CAAC,CAACgB,cAAF;AACAO,MAAAA,qBAAqB,CAAC,YAAY;AAChCvB,QAAAA,CAAC,CAACwB,MAAF,CAASC,SAAT,CAAmBG,MAAnB,CAA0B,UAA1B;AACD,OAFoB,CAArB;AAGD,KAhLY;;AAAA,SAkLbC,kBAlLa,GAkLQ,MAAM;AACzB,UAAG,CAAC,KAAKZ,KAAL,CAAWa,OAAf,EAAuB;AACrB,aAAKC,gBAAL;AACD,OAFD,MAEK,CAEJ;AACF,KAxLY;;AAAA,SA0LbA,gBA1La,GA0LM,MAAM;AACvB;AACA;AACA;AAEAvB,MAAAA,OAAO,CAACC,GAAR,CAAYb,KAAK,CAACoC,IAAN,EAAZ;AACAxB,MAAAA,OAAO,CAACC,GAAR,CAAYb,KAAK,CAACqC,eAAN,EAAZ;AACAzB,MAAAA,OAAO,CAACC,GAAR,CAAYb,KAAK,CAACqC,eAAN,CAAsBrC,KAAK,CAACsC,KAA5B,CAAZ,EAPuB,CAQvB;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,KA3PY;;AAAA,SA4QbC,eA5Qa,GA4QK,MAAM;AACtB,UAAIC,GAAG,GAAG,iRAAV;AACA,WAAKvB,OAAL,CAAauB,GAAb;AACD,KA/QY;;AAAA,SAqSbC,QArSa,GAqSF,MAAK;AACd,WAAK3B,QAAL,CAAc;AAACC,QAAAA,KAAK,EAAE;AAAR,OAAd;AACD,KAvSY;;AAAA,SA2Sb2B,gBA3Sa,GA2SM,CAACtC,CAAD,EAAIC,CAAJ,KAAU;AAC3BD,MAAAA,CAAC,CAACuC,YAAF,CAAeC,aAAf,GAA+B,KAA/B;AACAxC,MAAAA,CAAC,CAACuC,YAAF,CAAeE,UAAf,GAA4B,MAA5B;AACAzC,MAAAA,CAAC,CAACuC,YAAF,CAAeG,OAAf,CAAuB,YAAvB,EAAqCzC,CAArC;AACAsB,MAAAA,qBAAqB,CAAC,YAAY;AAChCvB,QAAAA,CAAC,CAACwB,MAAF,CAASC,SAAT,CAAmBC,GAAnB,CAAuB,MAAvB;AACD,OAFoB,CAArB;AAGA,WAAKiB,cAAL,CAAoB1C,CAApB;AACD,KAnTY;;AAAA,SAqTb2C,cArTa,GAqTK5C,CAAD,IAAM;AACrBA,MAAAA,CAAC,CAACgB,cAAF;AACAO,MAAAA,qBAAqB,CAAC,YAAY;AAC9BvB,QAAAA,CAAC,CAACwB,MAAF,CAASC,SAAT,CAAmBG,MAAnB,CAA0B,MAA1B;AACD,OAFkB,CAArB;AAGD,KA1TY;;AAAA,SA4TbiB,WA5Ta,GA4TC,CAAC7C,CAAD,EAAIwB,MAAJ,KAAe;AAC3BxB,MAAAA,CAAC,CAACgB,cAAF;AACA,WAAK8B,oBAAL,CAA0B,UAA1B,EAAsC,UAAtC;AACA,UAAIC,MAAM,GAAG/C,CAAC,CAACuC,YAAF,CAAeS,OAAf,CAAuB,YAAvB,CAAb;AACA,WAAKC,OAAL,CAAaF,MAAb,EAAqBvB,MAArB;AACD,KAjUY;;AAAA,SAuUb0B,SAvUa,GAuUAC,MAAD,IAAY;AACtB;AACA;AACA;AACA;AACA;AACA,WAAKzC,QAAL,CAAc;AAAC0C,QAAAA,WAAW,EAAExD,KAAK,CAACoC,IAAN,EAAd;AAA4Bd,QAAAA,aAAa,EAACiC,MAAM,GAAC;AAAjD,OAAd;AACD,KA9UY;;AAAA,SAgVbE,WAhVa,GAgVEC,MAAD,IAAY;AACxB,UAAIC,OAAO,GAAG,KAAKtC,KAAL,CAAWuC,aAAzB;;AACA,UAAGD,OAAH,EAAW;AACT,YAAG,KAAKN,OAAL,CAAaM,OAAb,EAAsBD,MAAtB,CAAH,EAAiC;AAC/B,eAAKR,oBAAL,CAA0B,UAA1B,EAAsC,QAAtC;AACA,eAAKpC,QAAL,CAAc;AAAC8C,YAAAA,aAAa,EAAE;AAAhB,WAAd;AACD,SAHD,MAGK,CACH;AACA;AACD;AACF;AACF,KA3VY;;AAAA,SA6VbC,eA7Va,GA6VKpD,KAAK,IAAI;AACzB,UAAGA,KAAK,KAAG,OAAX,EAAoB,OAAO,GAAP,CAApB,KACK,IAAGA,KAAK,KAAG,MAAX,EAAmB,OAAO,GAAP;AACzB,KAhWY;;AAAA,SA4WbqD,gBA5Wa,GA4WOJ,MAAD,IAAY;AAC7B,UAAIC,OAAO,GAAG,KAAKtC,KAAL,CAAWuC,aAAzB;;AACA,UAAG,CAACD,OAAJ,EAAY;AACV,YAAG,KAAKI,gBAAL,CAAsBL,MAAtB,CAAH,EAAiC;AAC/BM,UAAAA,QAAQ,CAACC,cAAT,CAAwBP,MAAxB,EAAgC7B,SAAhC,CAA0CC,GAA1C,CAA8C,QAA9C;AACA,eAAKiB,cAAL,CAAoBW,MAApB;AACA,eAAK5C,QAAL,CAAc;AAAC8C,YAAAA,aAAa,EAAEF;AAAhB,WAAd;AACD;AACF,OAND,MAMK;AACH,aAAKR,oBAAL,CAA0B,QAA1B,EAAoC,UAApC;;AACA,YAAG,KAAKgB,kBAAL,CAAwBR,MAAxB,EAAgCC,OAAhC,CAAH,EAA4C;AAAE;AAC1CK,UAAAA,QAAQ,CAACC,cAAT,CAAwBP,MAAxB,EAAgC7B,SAAhC,CAA0CC,GAA1C,CAA8C,QAA9C;AACA,eAAKiB,cAAL,CAAoBW,MAApB;AACA,eAAK5C,QAAL,CAAc;AAAC8C,YAAAA,aAAa,EAAEF;AAAhB,WAAd;AACH,SAJD,MAIK;AAAE;AACL,cAAG,KAAKL,OAAL,CAAaM,OAAb,EAAsBD,MAAtB,CAAH,EAAiC;AAC/B,iBAAKR,oBAAL,CAA0B,QAA1B,EAAoC,UAApC;AACA,iBAAKpC,QAAL,CAAc;AAAC8C,cAAAA,aAAa,EAAE;AAAhB,aAAd;AACD;AACF;AACF;AACF,KAjYY;;AAAA,SAoZbO,kBApZa,GAoZQnC,MAAM,IAAI;AAC7BgC,MAAAA,QAAQ,CAACI,gBAAT,CAA0B,MAAIpC,MAA9B,EAAsC7B,OAAtC,CAA8CkE,EAAE,IAAEA,EAAE,CAACxC,SAAH,CAAaG,MAAb,CAAoBA,MAApB,CAAlD;AACD,KAtZY;;AAAA,SAwZbkB,oBAxZa,GAwZU,CAAC,GAAGoB,OAAJ,KAAgB;AACrCA,MAAAA,OAAO,CAACnE,OAAR,CAAgBC,CAAC,IAAI4D,QAAQ,CAACI,gBAAT,CAA0B,MAAIhE,CAA9B,EAAiCD,OAAjC,CAAyCkE,EAAE,IAAEA,EAAE,CAACxC,SAAH,CAAaG,MAAb,CAAoB5B,CAApB,CAA7C,CAArB;AACD,KA1ZY;;AAEX,SAAKiB,KAAL,GAAa;AACXmC,MAAAA,WAAW,EAAExD,KAAK,CAACoC,IAAN,EADF;AAEXd,MAAAA,aAAa,EAAE,CAFJ;AAGXsC,MAAAA,aAAa,EAAE,KAHJ;AAIX;AACAW,MAAAA,OAAO,EAAE,EALE;AAKE;AACbhD,MAAAA,WAAW,EAAE,CAACvB,KAAK,CAACwE,GAAN,EAAD,CANF;AAMiB;AAC5BC,MAAAA,OAAO,EAAE,KAPE;AAQXC,MAAAA,WAAW,EAAE,IARF;AASX3D,MAAAA,KAAK,EAAE,KATI;AAUXmB,MAAAA,OAAO,EAAE,KAVE;AAWXlB,MAAAA,WAAW,EAAE,EAXF;AAYX2D,MAAAA,WAAW,EAAE,IAZF;AAaXC,MAAAA,WAAW,EAAE;AAbF,KAAb;AAeD;;AAEDC,EAAAA,iBAAiB,GAAE;AACjBb,IAAAA,QAAQ,CAACc,gBAAT,CAA0B,SAA1B,EAAqC,KAAK5D,cAA1C;AACD;;AAMD6D,EAAAA,MAAM,GAAE;AACN;AACA/E,IAAAA,KAAK,CAACgF,IAAN,CAAW,KAAK3D,KAAL,CAAWE,WAAX,CAAuB,KAAKF,KAAL,CAAWC,aAAlC,CAAX;AACA,QAAI2D,GAAG,GAAGjF,KAAK,CAACkF,KAAN,GAAcC,IAAd,EAAV;AACA,QAAIC,WAAW,GAAG,KAAK/D,KAAL,CAAWoD,OAAX,GAAqBxE,QAAQ,CAACoF,OAAT,EAArB,GAA0CpF,QAA5D;AACA,wBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA,kBAEIgF,GAAG,CAACK,GAAJ,CAAQ,CAAC5B,MAAD,EAASrD,CAAT,KAAa;AACnB,iBAAOqD,MAAM,gBAEb;AACE,YAAA,UAAU,EAAE,KAAKhC,eADnB;AAEE,YAAA,WAAW,EAAE,KAAKK,gBAFpB;AAGE,YAAA,MAAM,EAAG3B,CAAD,IAAK,KAAK6C,WAAL,CAAiB7C,CAAjB,EAAoBH,QAAQ,CAACI,CAAD,CAA5B,CAHf;AAIE,YAAA,EAAE,EAAE+E,WAAW,CAAC/E,CAAD,CAJjB;AAME,YAAA,SAAS,EAAC,QANZ;AAAA,mCAOI;AACE,cAAA,SAAS,EAAG,SAAQ,KAAKG,SAAL,CAAekD,MAAM,CAACjD,KAAtB,CAA6B,IAAGiD,MAAM,CAAC6B,IAAK,EADlE;AAEE,cAAA,SAAS,EAAC,MAFZ;AAGE,+BAAeH,WAAW,CAAC/E,CAAD,CAH5B;AAIE,cAAA,WAAW,EAAGD,CAAD,IAAK,KAAKsC,gBAAL,CAAsBtC,CAAtB,EAAyBgF,WAAW,CAAC/E,CAAD,CAApC,CAJpB;AAI8D,cAAA,SAAS,EAAE,MAAI,KAAK2C,cAJlF;AAKE,cAAA,OAAO,EAAE,MAAI,KAAKc,gBAAL,CAAsBsB,WAAW,CAAC/E,CAAD,CAAjC;AALf;AAAA;AAAA;AAAA;AAAA;AAPJ,aAKO,WAASA,CALhB;AAAA;AAAA;AAAA;AAAA,kBAFa,gBAkBb;AACE,YAAA,EAAE,EAAE+E,WAAW,CAAC/E,CAAD,CADjB;AAEE,YAAA,UAAU,EAAE,KAAKqB,eAFnB;AAGE,YAAA,WAAW,EAAE,KAAKK,gBAHpB;AAIE,YAAA,OAAO,EAAE,MAAI,KAAK0B,WAAL,CAAiB2B,WAAW,CAAC/E,CAAD,CAA5B,CAJf;AAKE,YAAA,MAAM,EAAGD,CAAD,IAAK,KAAK6C,WAAL,CAAiB7C,CAAjB,EAAoBgF,WAAW,CAAC/E,CAAD,CAA/B,CALf;AAOE,YAAA,SAAS,EAAC;AAPZ,aAMO,WAASA,CANhB;AAAA;AAAA;AAAA;AAAA,kBAlBA;AA2BH,SA5BC;AAFJ;AAAA;AAAA;AAAA;AAAA,cADF,eAkCE,QAAC,KAAD;AACE,QAAA,OAAO,EAAE,KAAKiD,SADhB;AAEE,QAAA,aAAa,EAAE,KAAKjC,KAAL,CAAWC,aAF5B;AAGE,QAAA,KAAK,EAAE,KAAKD,KAAL,CAAWkD,OAHpB;AAIE,QAAA,WAAW,EAAE,KAAKlD,KAAL,CAAWmC,WAJ1B;AAKE,QAAA,SAAS,EAAE,KAAKjB,eALlB;AAME,QAAA,IAAI,EAAE,KAAKiD,SANb;AAOE,QAAA,OAAO,EAAE,KAAKvD;AAPhB;AAAA;AAAA;AAAA;AAAA,cAlCF,eA2CE;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA,gCACE,QAAC,MAAD;AAAQ,UAAA,IAAI,EAAC,UAAb;AAAwB,UAAA,OAAO,EAAE,KAAKM;AAAtC;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,MAAD;AAAQ,UAAA,IAAI,EAAC,WAAb;AAAyB,UAAA,OAAO,EAAE,KAAKE;AAAvC;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE,QAAC,MAAD;AAAQ,UAAA,IAAI,EAAC,UAAb;AAAwB,UAAA,OAAO,EAAE,KAAKR;AAAtC;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,cA3CF,EAgDG,KAAKZ,KAAL,CAAWN,KAAX,gBACC,QAAC,KAAD;AACE,QAAA,IAAI,EAAC,WADP;AAEE,QAAA,UAAU,EAAE,KAAKL;AAFnB;AAAA;AAAA;AAAA;AAAA,cADD,GAKG,IArDN;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AA0DD;;AAWD+E,EAAAA,iBAAiB,CAAC/B,MAAD,EAASjD,KAAT,EAAe;AAC9B,QAAG,KAAKiF,mBAAL,CAAyBhC,MAAzB,CAAH,EAAqC,OAAO,KAAP;AACrC,QAAIiC,KAAK,GAAG,EAAZ;AACA,QAAI,CAACC,CAAD,EAAIC,CAAJ,IAASpF,KAAK,KAAG,GAAR,GAAc,CAAC,CAAC,CAAF,EAAK,CAAC,CAAN,CAAd,GAAyB,CAAC,CAAD,EAAI,CAAJ,CAAtC;;AACA,YAAO,KAAKqF,QAAL,CAAcpC,MAAd,CAAP;AACE,WAAK,CAAL;AACEiC,QAAAA,KAAK,CAACI,IAAN,CAAW9F,QAAQ,CAACyD,MAAM,GAACkC,CAAR,CAAnB,EAA+B3F,QAAQ,CAACyD,MAAM,GAACmC,CAAR,CAAvC;AACA;;AACF,WAAK,CAAL;AACEF,QAAAA,KAAK,CAACI,IAAN,CAAW9F,QAAQ,CAACyD,MAAM,GAACmC,CAAR,CAAnB;AACA;;AACF,WAAK,CAAL;AACEF,QAAAA,KAAK,CAACI,IAAN,CAAW9F,QAAQ,CAACyD,MAAM,GAACkC,CAAR,CAAnB;AACA;;AACF;AAASD,QAAAA,KAAK,CAACI,IAAN,CAAW9F,QAAQ,CAACyD,MAAM,GAACkC,CAAR,CAAnB,EAA+B3F,QAAQ,CAACyD,MAAM,GAACmC,CAAR,CAAvC;AACP;AAXJ;;AAaA,WAAOF,KAAP;AACD;;AAEDD,EAAAA,mBAAmB,CAAChC,MAAD,EAAQ;AACzB,WAAQA,MAAM,IAAE,CAAR,IAAWA,MAAM,IAAE,CAApB,IAAyBA,MAAM,IAAE,EAAR,IAAYA,MAAM,IAAE,EAApD;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEoC,EAAAA,QAAQ,CAACpC,MAAD,EAAQ;AACd,QAAG,CAAC,CAAD,EAAG,CAAH,EAAK,EAAL,EAAQ,EAAR,EAAW,EAAX,EAAc,EAAd,EAAiB,EAAjB,EAAoB,EAApB,EAAwBsC,QAAxB,CAAiCtC,MAAjC,CAAH,EAA6C,OAAO,CAAP;AAC7C,QAAG,CAAC,CAAD,EAAG,EAAH,EAAM,EAAN,EAAS,EAAT,EAAY,EAAZ,EAAe,EAAf,EAAkB,EAAlB,EAAqB,EAArB,EAAyBsC,QAAzB,CAAkCtC,MAAlC,CAAH,EAA8C,OAAO,CAAP;AAC9C,WAAO,CAAP;AACD;;AAuHDuC,EAAAA,cAAc,CAACvC,MAAD,EAAQ;AACpB,QAAIwC,CAAC,GAAG,CAAR;AAAW,QAAIC,CAAC,GAAG,CAAR;AAEX,QAAGzC,MAAM,CAACwC,CAAV,EAAaA,CAAC,GAAGxC,MAAM,CAACwC,CAAP,CAAS1E,MAAb;AACb,QAAGkC,MAAM,CAACyC,CAAV,EAAaA,CAAC,GAAGzC,MAAM,CAACyC,CAAP,CAAS3E,MAAb;AAEb,QAAI4E,GAAG,GAAGF,CAAC,GAAGC,CAAd;AACA,QAAIE,UAAU,GAAGH,CAAC,GAACE,GAAF,GAAM,GAAvB;AACA,QAAIE,UAAU,GAAGH,CAAC,GAACC,GAAF,GAAM,GAAvB,CARoB,CAUpB;;AACA,WAAOC,UAAP;AACD;;AAQDpF,EAAAA,OAAO,CAACuB,GAAD,EAAK;AACV,QAAIqD,CAAC,GAAG7F,KAAK,CAACuG,QAAN,CAAe/D,GAAf,CAAR;;AACA,QAAGqD,CAAH,EAAK;AACH,UAAItB,OAAO,GAAGvE,KAAK,CAACuE,OAAN,EAAd;AACAvE,MAAAA,KAAK,CAACwG,KAAN;AACA,UAAIjF,WAAW,GAAG,CAACvB,KAAK,CAACwE,GAAN,EAAD,CAAlB;AACAD,MAAAA,OAAO,CAACpE,OAAR,CAAgBC,CAAC,IAAE;AACjBJ,QAAAA,KAAK,CAACyG,IAAN,CAAWrG,CAAX;AACAmB,QAAAA,WAAW,CAACwE,IAAZ,CAAiB/F,KAAK,CAACwE,GAAN,EAAjB;AACD,OAHD,EAJG,CAQH;AACA;AACA;AACA;;AACAxE,MAAAA,KAAK,CAACgF,IAAN,CAAWzD,WAAW,CAAC,CAAD,CAAtB;AACA,WAAKT,QAAL,CAAc;AAACyD,QAAAA,OAAD;AAAUhD,QAAAA,WAAV;AAAuBmD,QAAAA,WAAW,EAAElC,GAApC;AAAyClB,QAAAA,aAAa,EAAE;AAAxD,OAAd;AAED,KAfD,MAeMoF,KAAK,CAAC,OAAD,CAAL;AACP;;AAgCDC,EAAAA,0BAA0B,CAACpD,MAAD,EAAQ;AAChC,WAAOA,MAAM,GAAC,CAAP,KAAW,CAAX,GAAe,CAAf,GAAmB,CAAC,CAA3B;AACD;;AA6BDW,EAAAA,kBAAkB,CAAC0C,GAAD,EAAMC,GAAN,EAAU;AAC1B,WAAO7G,KAAK,CAAC8G,GAAN,CAAUF,GAAV,EAAenG,KAAf,KAAuBT,KAAK,CAAC8G,GAAN,CAAUD,GAAV,EAAepG,KAA7C;AACD;;AAEDsC,EAAAA,cAAc,CAACgE,KAAD,EAAO;AACnB/G,IAAAA,KAAK,CAAC2F,KAAN,CAAY;AAACjC,MAAAA,MAAM,EAACqD,KAAR;AAAeC,MAAAA,OAAO,EAAC;AAAvB,KAAZ,EAA0C7G,OAA1C,CAAkDsG,IAAI,IAAE;AACtDzC,MAAAA,QAAQ,CAACC,cAAT,CAAwBwC,IAAI,CAACQ,EAA7B,EAAiCpF,SAAjC,CAA2CC,GAA3C,CAA+C,UAA/C;AACD,KAFD;AAGD;;AAyBDiC,EAAAA,gBAAgB,CAACgD,KAAD,EAAO;AACrB,WAAO/G,KAAK,CAAC8G,GAAN,CAAUC,KAAV,EAAiBtG,KAAjB,KAA2BT,KAAK,CAACoC,IAAN,EAAlC;AACD;;AAEDiB,EAAAA,OAAO,CAAC6D,IAAD,EAAOD,EAAP,EAAU;AACf,QAAIE,GAAG,GAAGnH,KAAK,CAACyG,IAAN,CAAW;AAACS,MAAAA,IAAD;AAAMD,MAAAA;AAAN,KAAX,CAAV;;AACA,QAAGE,GAAH,EAAO;AACL,UAAI5F,WAAW,GAAG,CAAC,GAAG,KAAKF,KAAL,CAAWE,WAAf,CAAlB;AACAA,MAAAA,WAAW,CAACwE,IAAZ,CAAiB/F,KAAK,CAACwE,GAAN,EAAjB;AACA,UAAID,OAAO,GAAG,CAAC,GAAG,KAAKlD,KAAL,CAAWkD,OAAf,CAAd;AACAA,MAAAA,OAAO,CAACwB,IAAR,CAAaoB,GAAG,CAACC,GAAjB;AACA,WAAKtG,QAAL,CAAcW,SAAS,KACpB;AAACH,QAAAA,aAAa,EAAEG,SAAS,CAACH,aAAV,GAAwB,CAAxC;AAA2CiD,QAAAA,OAA3C;AAAoDf,QAAAA,WAAW,EAACxD,KAAK,CAACoC,IAAN,EAAhE;AAA8Eb,QAAAA;AAA9E,OADoB,CAAvB;AAEA,aAAO4F,GAAG,CAACC,GAAX;AACD,KARD,MAQM,OAAO,KAAP;AACP;;AAUDC,EAAAA,WAAW,GAAE;AAAE,WAAO,KAAKhG,KAAL,CAAWmC,WAAX,KAA2B,CAA3B,GAA+B,CAAC,CAAhC,GAAoC,CAA3C;AAA+C;;AA7ZpC;;AAga5B,eAAelD,GAAf","sourcesContent":["import './App.css';\nimport React, { Component } from 'react';\nimport Moves from './components/Moves/Moves';\nimport PopUp from './components/PopUp/PopUp';\nimport Button from './components/Button/Button';\n// import Squares from './components/Squares/Squares';\nimport Draggable from 'react-draggable';\nimport * as ChessJS from 'chess.js';\nconst Chess = typeof ChessJS === \"function\" ? ChessJS : ChessJS.Chess;\nconst chess = new Chess();\n\nconst squareID = [\"a8\", \"b8\", \"c8\", \"d8\", \"e8\", \"f8\", \"g8\", \"h8\", \"a7\", \"b7\", \"c7\", \"d7\", \"e7\", \"f7\", \"g7\", \"h7\", \"a6\", \"b6\", \"c6\", \"d6\", \"e6\", \"f6\", \"g6\", \"h6\", \"a5\", \"b5\", \"c5\", \"d5\", \"e5\", \"f5\", \"g5\", \"h5\", \"a4\", \"b4\", \"c4\", \"d4\", \"e4\", \"f4\", \"g4\", \"h4\", \"a3\", \"b3\", \"c3\", \"d3\", \"e3\", \"f3\", \"g3\", \"h3\", \"a2\", \"b2\", \"c2\", \"d2\", \"e2\", \"f2\", \"g2\", \"h2\", \"a1\", \"b1\", \"c1\", \"d1\", \"e1\", \"f1\", \"g1\", \"h1\"];\nconst squares = {}; \nsquareID.forEach((e, i)=>{\n  squares[e] = {};\n});\n\n// console.log(chess.board().flat().reverse());\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      colorToMove: chess.turn(),\n      selected_move: 0,\n      piece_clicked: false,\n      // board: chess.board().flat(),\n      history: [], // single moves \n      fen_history: [chess.fen()], // moves in fen \n      flipped: false,\n      loaded_game: null,\n      popUp: false, \n      control: false,\n      entered_pgn: '',\n      white_moves: null,\n      black_moves: null\n    };  \n  }\n\n  componentDidMount(){\n    document.addEventListener(\"keydown\", this.keyDownHandler);\n  }\n\n  colorConv = color => {\n    return color==='w' ? 'white' : 'black';\n  }\n\n  render(){\n    // let arr = this.state.flipped ? chess.board().flat().reverse() : chess.board().flat();\n    chess.load(this.state.fen_history[this.state.selected_move]);\n    let arr = chess.board().flat();\n    let squares_ids = this.state.flipped ? squareID.reverse() : squareID;\n    return(\n      <div className='container'>\n        <div className='board'> \n          {\n            arr.map((square, i)=>{\n              return square \n              ? \n              <div \n                onDragOver={this.dragOverHandler} \n                onDragLeave={this.dragLeaveHandler} \n                onDrop={(e)=>this.dropHandler(e, squareID[i])} \n                id={squares_ids[i]}\n                key={'square'+i} \n                className='square'> \n                  <div \n                    className={`piece ${this.colorConv(square.color)} ${square.type}`}\n                    draggable='true'\n                    data-position={squares_ids[i]}\n                    onDragStart={(e)=>this.dragStartHandler(e, squares_ids[i])} onDragEnd={()=>this.dragEndHandler}\n                    onClick={()=>this.handlePieceClick(squares_ids[i])} \n                  />\n              </div>\n              : \n              <div \n                id={squares_ids[i]}\n                onDragOver={this.dragOverHandler} \n                onDragLeave={this.dragLeaveHandler} \n                onClick={()=>this.handleClick(squares_ids[i])} \n                onDrop={(e)=>this.dropHandler(e, squares_ids[i])} \n                key={'square'+i} \n                className='square' \n            />;\n          })\n        }\n        </div>\n        <Moves \n          onClick={this.moveClick} \n          selected_move={this.state.selected_move}\n          moves={this.state.history}\n          colorToMove={this.state.colorToMove}\n          evalClick={this.handleEvalClick}\n          flip={this.flipClick}\n          control={this.handleControlClick}\n          /> \n        <div className=\"button_wrapper\"> \n          <Button text='Evaluate' onClick={this.handleEvalClick} />\n          <Button text='Enter PGN' onClick={this.pgnClick} />\n          <Button text='Evaluate' onClick={this.handleControlClick} />\n        </div>\n        {this.state.popUp ?  \n          <PopUp  \n            text='Enter PGN'  \n            closePopup={this.closePopup}  \n          />  \n          : null  \n        }  \n      </div> \n    );\n  } \n\n  closePopup = (text) => {\n    console.log(\"hi\", text);\n    if(!text) this.setState({popUp: false});\n    else{\n      this.setState({popUp: false, entered_pgn: text}); \n      this.loadPGN(text);\n    }\n  }\n\n  diagonalPawnMoves(square, color){\n    if(this.isOnFirstOrLastRank(square)) return false; \n    let moves = [];\n    let [l, r] = color==='w' ? [-9, -7] : [7, 9];\n    switch(this.isOnEdge(square)){\n      case 0:\n        moves.push(squareID[square+l], squareID[square+r]);\n        break;\n      case 1: \n        moves.push(squareID[square+r]);\n        break;\n      case 2: \n        moves.push(squareID[square+l]);\n        break;\n      default: moves.push(squareID[square+l], squareID[square+r]);\n        break; \n    }\n    return moves;\n  }\n\n  isOnFirstOrLastRank(square){\n    return (square>=0&&square<=7)||(square>=56&&square<=63);\n  }\n\n  /*\n  return 1 ... left Edge, \n         2 ... right edge \n         0 ... not on edge\n  */\n  isOnEdge(square){\n    if([0,8,16,24,32,40,48,56].includes(square)) return 1;\n    if([7,15,23,31,39,47,55,63].includes(square)) return 2; \n    return 0; \n  }\n\n  keyDownHandler = (e)=>{\n    switch(e.keyCode){\n      case 39: \n        e.preventDefault();\n        if(this.state.selected_move+1<=this.state.fen_history.length-1){ \n          this.setState(prevState=>({selected_move: prevState.selected_move+1}));                \n          // this.removeClassFromAll('selected');\n          // document.getElementById('m'+this.state.selected_move+1).classList.add('selected');\n        }\n        break;\n      case 37: \n        e.preventDefault();\n        if(this.state.selected_move>=1){\n          this.setState(prevState=>({selected_move: prevState.selected_move-1}));\n          // this.removeClassFromAll('selected');\n          // document.getElementById('m'+this.state.selected_move-1).classList.add('selected');\n        }\n        break;\n      case 27: \n        e.preventDefault(); \n        if(this.state.popUp){\n          this.setState({popUp: false});\n        }\n        break;\n      default: break; \n    }\n  }\n\n  dragOverHandler = (e) => {\n    e.preventDefault(e);\n    requestAnimationFrame(function () {\n      e.target.classList.add('dragover');\n    });\n  }\n  \n  dragLeaveHandler = (e) => {\n    e.preventDefault(); \n    requestAnimationFrame(function () {\n      e.target.classList.remove('dragover');\n    }); \n  }\n\n  handleControlClick = () => {    \n    if(!this.state.control){\n      this.showBoardControl();\n    }else{\n\n    }\n  }\n\n  showBoardControl = () => {\n    // document.getElementById('d5').classList.add('attacked');\n    // document.getElementById('d5').style.setProperty('--separator', '50%');\n    // console.log(chess.moves({square:'e7'}));\n    \n    console.log(chess.turn());\n    console.log(chess.defended_pieces());\n    console.log(chess.defended_pieces(chess.WHITE));\n    // console.time('hey');\n    // let fen = chess.fen();\n    // let turn = chess.turn(); \n    // let white_moves = this.state.white_moves;\n    // let black_moves = this.state.black_moves;\n\n    // let pawns = chess.board().flat().map((square, index) => {\n    //   if(square && square.type==='p') return [index, square.color];\n    // }).filter(element => element);\n    // let not_pawns = chess.moves({verbose: true}).filter(e => e.piece!=='p');\n\n    // if(turn==='b'){\n    //   black_moves = not_pawns.map(move => move.to);\n    //   if(!white_moves){\n    //     let fen2 = fen.replace(/\\sb\\s/g, ' w ');\n    //     chess.load(fen2); \n    //     white_moves = chess.moves({verbose: true}).filter(e=>e.piece!=='p').map(move => move.to);; \n    //     chess.load(fen); \n    //   }\n    // }else if(turn==='w'){\n    //   white_moves = not_pawns.map(move => move.to);;\n    //   if(!black_moves){\n    //     let fen2 = fen.replace(/\\sw\\s/g, ' b ');\n    //     chess.load(fen2); \n    //     black_moves = chess.moves({verbose: true}).filter(e=>e.piece!=='p').map(move => move.to);; \n    //     chess.load(fen); \n    //   }\n    // }\n\n    // pawns.forEach(([square, color], index) => {\n    //   if(color==='w') white_moves.push(this.diagonalPawnMoves(square, 'w'));\n    //   else black_moves.push(this.diagonalPawnMoves(square, 'b'));\n    // });\n\n    // white_moves = white_moves.flat();\n    // black_moves = black_moves.flat();\n\n    // white_moves.forEach(e=>{\n    //   if(!squares[e].w) squares[e].w = []; \n    //   if(!squares[e].b) squares[e].b = []; \n    //   squares[e].w.push(e);\n    // });\n    // black_moves.forEach(e=>{\n    //   if(!squares[e].w) squares[e].w = []; \n    //   if(!squares[e].b) squares[e].b = []; \n    //   squares[e].b.push(e);\n    // })\n\n    // console.log(squares);\n    // for (let [square, value] of Object.entries(squares)) {\n    //   if(value.w||value.b){ \n    //     let dom = document.getElementById(square);\n    //     dom.classList.add('attacked');\n    //     dom.style.setProperty('--separator', this.getSquareRatio(value)+'%');\n    //   }\n    // }\n    // this.setState({white_moves, black_moves});\n  }\n\n  getSquareRatio(square){\n    let w = 0; let b = 0; \n\n    if(square.w) w = square.w.length; \n    if(square.b) b = square.b.length; \n    \n    let sum = w + b; \n    let whiteshare = w/sum*100; \n    let blackshare = b/sum*100; \n    \n    // this._square.style.setProperty(\"--separator\", whiteshare+'%');\n    return whiteshare; \n  }\n\n\n  handleEvalClick = () => {    \n    let pgn = \"1. d4 d5 2. c4 c6 3. Nf3 Nf6 4. Nc3 e6 5. e3 Nbd7 6. Bd3 dxc4 7. Bxc4 b5 8. Bd3 Bd6 9. O-O O-O 10. Qc2 Bb7 11. a3 Rc8 12. Ng5 c5 13. Nxh7 Ng4 14. f4 cxd4 15. exd4 Bc5 16. Be2 Nde5 17. Bxg4 Bxd4+ 18. Kh1 Nxg4 19. Nxf8 f5 20. Ng6 Qf6 21. h3 Qxg6 22. Qe2 Qh5 23. Qd3 Be3 0-1\";\n    this.loadPGN(pgn);\n  }\n\n  loadPGN(pgn){\n    let r = chess.load_pgn(pgn);\n    if(r){\n      let history = chess.history(); \n      chess.reset();\n      let fen_history = [chess.fen()];\n      history.forEach(e=>{\n        chess.move(e);\n        fen_history.push(chess.fen());\n      });\n      // let fen_history = history.map(e => {\n      //   chess.move(e);\n      //   return chess.fen();   \n      // });\n      chess.load(fen_history[0]);\n      this.setState({history, fen_history, loaded_game: pgn, selected_move: 0});\n\n    }else alert(\"error\");\n  }\n\n  pgnClick = () =>{\n    this.setState({popUp: true});\n  }\n\n  // @e: dragEvent\n  // @i: square of dragged piece \n  dragStartHandler = (e, i) => {\n    e.dataTransfer.effectAllowed = \"all\"\n    e.dataTransfer.dropEffect = \"move\";\n    e.dataTransfer.setData(\"text/plain\", i);\n    requestAnimationFrame(function () {\n      e.target.classList.add('hide');\n    });\n    this.highlightMoves(i);   \n  }\n\n  dragEndHandler = (e) =>{\n    e.preventDefault();\n    requestAnimationFrame(function () {\n        e.target.classList.remove('hide');\n      });\n  }\n\n  dropHandler = (e, target) => {\n    e.preventDefault();\n    this.removeClassesFromAll('dragover', 'moveable'); \n    let origin = e.dataTransfer.getData('text/plain');\n    this.newMove(origin, target);\n  }\n\n  getColorToMoveByMoveNumber(number){\n    return number%2===0 ? 1 : -1; \n  }\n\n  moveClick = (number) => {\n    // console.log('move clicked',number);\n    // console.log(this.state.fen_history);\n    // chess.load(this.state.fen_history[number+1]);\n    // this.removeClassFromAll('selected');\n    // document.getElementById('m'+number).classList.add('selected');\n    this.setState({colorToMove: chess.turn(), selected_move:number+1});\n  }\n\n  handleClick = (square) => {\n    let clicked = this.state.piece_clicked; \n    if(clicked){\n      if(this.newMove(clicked, square)){\n        this.removeClassesFromAll('moveable', 'active');\n        this.setState({piece_clicked: false});\n      }else{\n        // this.removeClassFromAll('active'); \n        // this.setState({piece_clicked: false })\n      }\n    }\n  }\n\n  squareColorConv = color => {\n    if(color==='light') return 'w'; \n    else if(color==='dark') return 'b';\n  }\n\n  squaresOfSameColor(one, two){\n    return chess.get(one).color===chess.get(two).color;\n  }\n\n  highlightMoves(piece){\n    chess.moves({square:piece, verbose:true}).forEach(move=>{\n      document.getElementById(move.to).classList.add('moveable');\n    });\n  }\n\n  handlePieceClick = (square) => {\n    let clicked = this.state.piece_clicked;\n    if(!clicked){\n      if(this.pieceIsTurnColor(square)){\n        document.getElementById(square).classList.add('active');\n        this.highlightMoves(square);\n        this.setState({piece_clicked: square});\n      }\n    }else{\n      this.removeClassesFromAll('active', 'moveable');\n      if(this.squaresOfSameColor(square, clicked)){ // Wenn selbfarbiges, anderes piece gedrÃ¼ckt \n          document.getElementById(square).classList.add('active');\n          this.highlightMoves(square);\n          this.setState({piece_clicked: square});\n      }else{ // Capture \n        if(this.newMove(clicked, square)){\n          this.removeClassesFromAll('active', 'moveable');\n          this.setState({piece_clicked: null});\n        }\n      }\n    }\n  }\n\n  pieceIsTurnColor(piece){\n    return chess.get(piece).color === chess.turn();\n  }\n\n  newMove(from, to){\n    let res = chess.move({from,to});\n    if(res){\n      let fen_history = [...this.state.fen_history]; \n      fen_history.push(chess.fen());\n      let history = [...this.state.history];\n      history.push(res.san);\n      this.setState(prevState => \n        ({selected_move: prevState.selected_move+1, history, colorToMove:chess.turn(), fen_history}));\n      return res.san; \n    }else return false; \n  }\n\n  removeClassFromAll = remove => {\n    document.querySelectorAll('.'+remove).forEach(el=>el.classList.remove(remove));\n  }\n\n  removeClassesFromAll = (...classes) => {\n    classes.forEach(e => document.querySelectorAll('.'+e).forEach(el=>el.classList.remove(e)));\n  }\n\n  switchColor(){ return this.state.colorToMove === 1 ? -1 : 1; }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}