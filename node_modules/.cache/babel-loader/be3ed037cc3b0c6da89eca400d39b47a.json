{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/q/Documents/WebDocuments/ChessReact/chess/src/App.js\";\nimport './App.css';\nimport React, { Component } from 'react';\nimport Moves from './components/Moves/Moves';\nimport Squares from './components/Squares/Squares'; // TYPES (negative values for black)\n// PAWN - 1 \n// BISHOP - 2 \n// KNIGHT - 3 \n// ROOK - 4\n// QUEEN - 5 \n// KING - 6 \n\nconst startingPosition = [-4, -3, -2, -5, -6, -2, -3, -4, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 4, 3, 2, 5, 6, 2, 3, 4];\nconst conversion = [];\nconst rev_conversion = {};\nlet r = 0;\nlet c = 0;\nArray(64).fill(null).forEach((e, i) => {\n  conversion[i] = [r, c];\n  rev_conversion[Number('' + r + c)] = i;\n  c++;\n\n  if (c > 7) {\n    r++;\n    c = 0;\n  }\n});\n/*\n00 01 02 03 04 05 06 07 \n10 11 12 13 14 15 16 17 \n20 21 22 23 24 25 26 27 \n30 31 32 33 34 35 36 37 \n40 41 42 43 44 45 46 47 \n50 51 52 53 54 55 56 57 \n60 61 62 63 64 65 66 67 \n70 71 72 73 74 75 76 77 \n*/\n// const originalRank = {1: }\n// Idee: in Array nach den Squares einbauen, ob kÃ¶nig sich bewegt hat \n//[65]=0|1 -> whiteKing moved \n//[66]=0|1 -> whiteRook short moved \n// etc. \n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.dragStartHandler = (e, i) => {\n      e.dataTransfer.effectAllowed = \"all\";\n      e.dataTransfer.dropEffect = \"move\";\n      e.dataTransfer.setData(\"text/plain\", i);\n      requestAnimationFrame(function () {\n        e.target.classList.add('hide');\n      });\n      let availableMoves = this.availableMoves(i);\n      availableMoves.forEach(el => {\n        document.getElementById('s' + el).classList.add('moveable');\n      });\n      this.setState({\n        piece_dragging: availableMoves\n      });\n    };\n\n    this.dragEndHandler = e => {\n      e.preventDefault();\n      requestAnimationFrame(function () {\n        e.target.classList.remove('hide');\n      });\n    };\n\n    this.moveClick = number => {\n      console.log('move clicked', number);\n      this.setState(prevState => ({\n        selectedMove: number\n      }));\n    };\n\n    this.handleClick = square => {\n      let clicked = this.state.piece_clicked;\n\n      if (clicked) {\n        let availableMoves = this.state.availableMoves;\n\n        if (availableMoves.includes(square)) {\n          this.removeClassFromAll('moveable');\n          this.removeClassFromAll('active');\n          this.setState({\n            piece_clicked: false,\n            availableMoves: null\n          }, this.newMove(clicked, square));\n        } else {// this.removeClassFromAll('active'); \n          // this.setState({piece_clicked: false })\n        }\n      }\n    };\n\n    this.handlePieceClick = (square, event) => {\n      let clicked = this.state.piece_clicked;\n\n      if (!clicked) {\n        if (this.getColorFromSquare(square) !== this.state.colorToMove) return;\n        let availableMoves = this.availableMoves(square);\n        event.target.parentElement.classList.add('active');\n        availableMoves.forEach(el => {\n          document.getElementById('s' + el).classList.add('moveable');\n        });\n        this.setState({\n          piece_clicked: square,\n          availableMoves: availableMoves\n        });\n      } else {\n        this.removeClassFromAll('active');\n        this.removeClassFromAll('moveable');\n\n        if (this.getColorFromSquare(square) === this.state.colorToMove) {\n          event.target.parentElement.classList.add('active');\n          let availableMoves = this.availableMoves(square);\n          availableMoves.forEach(el => {\n            document.getElementById('s' + el).classList.add('moveable');\n          });\n          this.setState({\n            piece_clicked: square\n          });\n        } else {\n          let legitmoves = this.state.availableMoves;\n\n          if (legitmoves.includes(square)) {\n            this.setState({\n              piece_clicked: false,\n              availableMoves: null\n            }, this.newMove(clicked, square));\n          }\n        }\n      }\n    };\n\n    this.dropHandler = (e, target) => {\n      e.preventDefault();\n      let origin = e.dataTransfer.getData('text/plain');\n      this.removeClassFromAll('dragover');\n      this.removeClassFromAll('moveable');\n      let legitmoves = this.state.piece_dragging;\n      if (legitmoves.includes(target)) this.setState({\n        piece_dragging: false\n      }, this.newMove(origin, target));else this.setState({\n        piece_dragging: false\n      }); // e.target.classList.remove('dragover');\n      // let target = e.target.dataset.position; \n      // let origin = e.dataTransfer.getData(\"text/plain\");\n      // this.newMove(origin, target);\n    };\n\n    this.state = {\n      currentMove: 0,\n      lastMove: null,\n      colorToMove: 1,\n      piece_clicked: false,\n      remove_classes: null,\n      selectedMove: 0,\n      positions: [startingPosition],\n      // 64-Array \n      availableMoves: null\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Squares, {\n        position: this.state.positions[this.state.selectedMove],\n        onClick: this.handleClick,\n        pClick: this.handlePieceClick,\n        dragStart: this.dragStartHandler,\n        dragEnd: this.dragEndHandler,\n        onDrop: this.dropHandler,\n        colorToMove: this.state.colorToMove\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"moves\",\n        children: /*#__PURE__*/_jsxDEV(Moves, {\n          onClick: this.moveClick,\n          lastMove: this.state.lastMove,\n          colorToMove: this.state.colorToMove\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this);\n  }\n\n  convertBack(row, column) {\n    return rev_conversion[Number('' + row + column)];\n  }\n\n  availableMoves(square) {\n    // console.time('moves');\n    let moves = [];\n    let position = this.state.positions[this.state.positions.length - 1];\n    let piece = position[square];\n    if (piece === 0) return;\n    let [row, column] = conversion[square];\n    let multiplier = piece > 0 ? 1 : -1;\n\n    switch (Math.abs(piece)) {\n      case 1:\n        {\n          // PAWN-white\n          if (piece === 1) {\n            if (row === 6 && !this.hasPiece(position[square - 16])) moves.push(square - 16); // 2 forward\n\n            if (!this.hasPiece(position[square - 8])) moves.push(square - 8); // 1 forward \n\n            if (column >= 1 && row >= 1 && this.hasOpposingPiece(piece, position[this.convertBack(row - 1, column - 1)])) moves.push(this.convertBack(row - 1, column - 1)); // up-left-capture \n\n            if (column <= 6 && row >= 1 && this.hasOpposingPiece(piece, position[this.convertBack(row - 1, column + 1)])) moves.push(this.convertBack(row - 1, column + 1)); // up-right-capture \n          } else {\n            if (row === 1 && !this.hasPiece(position[square + 16])) moves.push(square + 16); // 2 forward\n\n            if (!this.hasPiece(position[square + 8])) moves.push(square + 8); // 1 forward \n\n            if (column >= 1 && row <= 6 && this.hasOpposingPiece(piece, position[this.convertBack(row + 1, column - 1)])) moves.push(this.convertBack(row + 1, column - 1)); // down-left-capture \n\n            if (column <= 6 && row <= 6 && this.hasOpposingPiece(piece, position[this.convertBack(row + 1, column + 1)])) moves.push(this.convertBack(row + 1, column + 1)); // down-right-capture \n          }\n\n          break;\n        }\n\n      case 2:\n        {\n          //BISHOPS \n          let r = row;\n          let left = true;\n          let right = true;\n          let lc = column;\n          let rc = column;\n\n          for (r = r + 1; r <= 7; r++) {\n            // UNTEN \n            if (!left && !right) break;\n\n            if (left) {\n              lc -= 1;\n              if (lc < 0) left = false;else {\n                let current_square = this.convertBack(r, lc);\n                let current_piece = position[current_square];\n\n                if (this.hasPiece(current_piece)) {\n                  if (this.hasAlliedPiece(piece, current_piece)) left = false;else {\n                    moves.push(current_square);\n                    left = false;\n                  }\n                } else moves.push(current_square);\n              }\n            }\n\n            if (right) {\n              rc += 1;\n              if (rc > 7) right = false;else {\n                let current_square = this.convertBack(r, rc);\n                let current_piece = position[current_square];\n\n                if (this.hasPiece(current_piece)) {\n                  if (this.hasAlliedPiece(piece, current_piece)) right = false;else {\n                    moves.push(current_square);\n                    right = false;\n                  }\n                } else moves.push(current_square);\n              }\n            }\n          }\n\n          r = row;\n          left = true;\n          right = true;\n          lc = column;\n          rc = column;\n\n          for (r = r - 1; r >= 0; r--) {\n            // OBEN \n            if (!left && !right) break;\n\n            if (left) {\n              lc -= 1;\n              if (lc < 0) left = false;else {\n                let current_square = this.convertBack(r, lc);\n                let current_piece = position[current_square];\n\n                if (this.hasPiece(current_piece)) {\n                  if (this.hasAlliedPiece(piece, current_piece)) left = false;else {\n                    moves.push(current_square);\n                    left = false;\n                  }\n                } else moves.push(current_square);\n              }\n            }\n\n            if (right) {\n              rc += 1;\n              if (rc > 7) right = false;else {\n                let current_square = this.convertBack(r, rc);\n                let current_piece = position[current_square];\n\n                if (this.hasPiece(current_piece)) {\n                  if (this.hasAlliedPiece(piece, current_piece)) right = false;else {\n                    moves.push(current_square);\n                    right = false;\n                  }\n                } else moves.push(current_square);\n              }\n            }\n          }\n\n          break;\n        }\n\n      case 3:\n        {\n          //KNIGHTS \n          let current_square;\n\n          if (row + 1 <= 7) {\n            // UNTEN\n            current_square = this.convertBack(row + 1, column - 2);\n            if (column - 2 >= 0 && (!this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square]))) moves.push(current_square);\n            current_square = this.convertBack(row + 1, column + 2);\n            if (column + 2 <= 7 && (!this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square]))) moves.push(current_square);\n\n            if (row + 2 <= 7) {\n              current_square = this.convertBack(row + 2, column - 1);\n              if (column - 1 >= 0 && (!this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square]))) moves.push(current_square);\n              current_square = this.convertBack(row + 2, column + 1);\n              if (column + 1 <= 7 && (!this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square]))) moves.push(current_square);\n            }\n          }\n\n          if (row - 1 >= 0) {\n            // OBEN\n            current_square = this.convertBack(row - 1, column - 2);\n            if (column - 2 >= 0 && (!this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square]))) moves.push(current_square);\n            current_square = this.convertBack(row - 1, column + 2);\n            if (column + 2 <= 7 && (!this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square]))) moves.push(current_square);\n\n            if (row - 2 >= 0) {\n              current_square = this.convertBack(row - 2, column - 1);\n              if (column - 1 >= 0 && (!this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square]))) moves.push(current_square);\n              current_square = this.convertBack(row - 2, column + 1);\n              if (column + 1 <= 7 && (!this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square]))) moves.push(current_square);\n            }\n          }\n\n          break;\n        }\n\n      case 4:\n        {\n          //ROOKS \n          for (let r = row - 1; r >= 0; r--) {\n            //OBEN \n            let current_square = this.convertBack(r, column);\n            let current_piece = position[current_square];\n\n            if (this.hasPiece(current_piece)) {\n              if (this.hasAlliedPiece(current_piece, piece)) break;\n              moves.push(current_square);\n              break;\n            }\n\n            moves.push(current_square);\n          }\n\n          for (let r = row + 1; r <= 7; r++) {\n            //UNTEN\n            let current_square = this.convertBack(r, column);\n            let current_piece = position[current_square];\n\n            if (this.hasPiece(current_piece)) {\n              if (this.hasAlliedPiece(current_piece, piece)) break;\n              moves.push(current_square);\n              break;\n            }\n\n            moves.push(current_square);\n          }\n\n          for (let c = column + 1; c <= 7; c++) {\n            //RECHTS\n            let current_square = this.convertBack(row, c);\n            let current_piece = position[current_square];\n\n            if (this.hasPiece(current_piece)) {\n              if (this.hasAlliedPiece(current_piece, piece)) break;\n              moves.push(current_square);\n              break;\n            }\n\n            moves.push(current_square);\n          }\n\n          for (let c = column - 1; c >= 0; c--) {\n            //LINKS\n            let current_square = this.convertBack(row, c);\n            let current_piece = position[current_square];\n\n            if (this.hasPiece(current_piece)) {\n              if (this.hasAlliedPiece(current_piece, piece)) break;\n              moves.push(current_square);\n              break;\n            }\n\n            moves.push(current_square);\n          }\n\n          break;\n        }\n\n      case 5:\n        {\n          //QUEENS \n          let r = row;\n          let left = true;\n          let right = true;\n          let lc = column;\n          let rc = column;\n\n          for (r = r + 1; r <= 7; r++) {\n            // UNTEN \n            if (!left && !right) break;\n\n            if (left) {\n              lc -= 1;\n              if (lc < 0) left = false;else {\n                let current_square = this.convertBack(r, lc);\n                let current_piece = position[current_square];\n\n                if (this.hasPiece(current_piece)) {\n                  if (this.hasAlliedPiece(piece, current_piece)) left = false;else {\n                    moves.push(current_square);\n                    left = false;\n                  }\n                } else moves.push(current_square);\n              }\n            }\n\n            if (right) {\n              rc += 1;\n              if (rc > 7) right = false;else {\n                let current_square = this.convertBack(r, rc);\n                let current_piece = position[current_square];\n\n                if (this.hasPiece(current_piece)) {\n                  if (this.hasAlliedPiece(piece, current_piece)) right = false;else {\n                    moves.push(current_square);\n                    right = false;\n                  }\n                } else moves.push(current_square);\n              }\n            }\n          }\n\n          r = row;\n          left = true;\n          right = true;\n          lc = column;\n          rc = column;\n\n          for (r = r - 1; r >= 0; r--) {\n            // OBEN \n            if (!left && !right) break;\n\n            if (left) {\n              lc -= 1;\n              if (lc < 0) left = false;else {\n                let current_square = this.convertBack(r, lc);\n                let current_piece = position[current_square];\n\n                if (this.hasPiece(current_piece)) {\n                  if (this.hasAlliedPiece(piece, current_piece)) left = false;else {\n                    moves.push(current_square);\n                    left = false;\n                  }\n                } else moves.push(current_square);\n              }\n            }\n\n            if (right) {\n              rc += 1;\n              if (rc > 7) right = false;else {\n                let current_square = this.convertBack(r, rc);\n                let current_piece = position[current_square];\n\n                if (this.hasPiece(current_piece)) {\n                  if (this.hasAlliedPiece(piece, current_piece)) right = false;else {\n                    moves.push(current_square);\n                    right = false;\n                  }\n                } else moves.push(current_square);\n              }\n            }\n          }\n\n          for (r = row - 1; r >= 0; r--) {\n            //OBEN \n            let current_square = this.convertBack(r, column);\n            let current_piece = position[current_square];\n\n            if (this.hasPiece(current_piece)) {\n              if (this.hasAlliedPiece(current_piece, piece)) break;\n              moves.push(current_square);\n              break;\n            }\n\n            moves.push(current_square);\n          }\n\n          for (r = row + 1; r <= 7; r++) {\n            //UNTEN\n            let current_square = this.convertBack(r, column);\n            let current_piece = position[current_square];\n\n            if (this.hasPiece(current_piece)) {\n              if (this.hasAlliedPiece(current_piece, piece)) break;\n              moves.push(current_square);\n              break;\n            }\n\n            moves.push(current_square);\n          }\n\n          for (c = column + 1; c <= 7; c++) {\n            //RECHTS\n            let current_square = this.convertBack(row, c);\n            let current_piece = position[current_square];\n\n            if (this.hasPiece(current_piece)) {\n              if (this.hasAlliedPiece(current_piece, piece)) break;\n              moves.push(current_square);\n              break;\n            }\n\n            moves.push(current_square);\n          }\n\n          for (c = column - 1; c >= 0; c--) {\n            //LINKS\n            let current_square = this.convertBack(row, c);\n            let current_piece = position[current_square];\n\n            if (this.hasPiece(current_piece)) {\n              if (this.hasAlliedPiece(current_piece, piece)) break;\n              moves.push(current_square);\n              break;\n            }\n\n            moves.push(current_square);\n          }\n\n          break;\n        }\n\n      case 6:\n        {\n          //KING\n          let col_r = true;\n          let col_l = true;\n          let cs;\n          let cp;\n\n          if (row + 1 <= 7) {\n            cs = this.convertBack(row + 1, column); // 1 unten\n\n            cp = position[cs];\n            if (!this.hasPiece(cp) || this.hasOpposingPiece(cp, piece)) moves.push(cs);\n\n            if (column + 1 <= 7) {\n              cs = this.convertBack(row + 1, column + 1); //unten rechts \n\n              cp = position[cs];\n              if (!this.hasPiece(cp) || this.hasOpposingPiece(cp, piece)) moves.push(cs);\n            } else col_r = false;\n\n            if (column - 1 >= 0) {\n              cs = this.convertBack(row + 1, column - 1); // unten links\n\n              cp = position[cs];\n              if (!this.hasPiece(cp) || this.hasOpposingPiece(cp, piece)) moves.push(cs);\n            } else col_l = false;\n          }\n\n          if (col_r) {\n            if (column + 1 <= 7) {\n              cs = this.convertBack(row, column + 1); // 1 rechts\n\n              cp = position[cs];\n              if (!this.hasPiece(cp) || this.hasOpposingPiece(cp, piece)) moves.push(cs);\n            } else col_r = false;\n          }\n\n          if (col_l) {\n            if (column - 1 >= 0) {\n              cs = this.convertBack(row, column - 1); // 1 links\n\n              cp = position[cs];\n              if (!this.hasPiece(cp) || this.hasOpposingPiece(cp, piece)) moves.push(cs);\n            } else col_l = false;\n          }\n\n          if (row - 1 >= 0) {\n            cs = this.convertBack(row - 1, column); // 1 oben\n\n            cp = position[cs];\n            if (!this.hasPiece(cp) || this.hasOpposingPiece(cp, piece)) moves.push(cs);\n\n            if (col_r) {\n              cs = this.convertBack(row - 1, column + 1); // oben rechts\n\n              cp = position[cs];\n              if (!this.hasPiece(cp) || this.hasOpposingPiece(cp, piece)) moves.push(cs);\n            }\n\n            if (col_l) {\n              cs = this.convertBack(row - 1, column - 1); // oben links\n\n              cp = position[cs];\n              if (!this.hasPiece(cp) || this.hasOpposingPiece(cp, piece)) moves.push(cs);\n            }\n          }\n\n          break;\n        }\n    } // console.timeEnd('moves');\n\n\n    return moves;\n  }\n\n  removeClassFromAll(remove) {\n    document.querySelectorAll('.' + remove).forEach(el => el.classList.remove(remove));\n  }\n\n  switchColor() {\n    return this.state.colorToMove === 1 ? -1 : 1;\n  }\n\n  getColor(piece) {\n    return piece < 0 ? -1 : 1;\n  }\n\n  getColorFromSquare(square) {\n    return this.getColor(this.state.positions[this.state.currentMove][square]);\n  }\n\n  hasPiece(piece) {\n    return Math.abs(piece) > 0;\n  }\n\n  squareHasPiece(square) {\n    return this.hasPiece(this.state.positions[this.state.currentMove][square]);\n  }\n\n  squareHasOpposingPiece(square, square2) {\n    return this.getColorFromSquare(square) !== this.getColorFromSquare(square2);\n  }\n\n  hasOpposingPiece(piece1, piece2) {\n    return this.hasPiece(piece2) && this.getColor(piece1) !== this.getColor(piece2);\n  }\n\n  hasAlliedPiece(piece1, piece2) {\n    return this.hasPiece(piece2) && this.getColor(piece1) === this.getColor(piece2);\n  }\n\n  newMove(from, to) {\n    let positions = JSON.parse(JSON.stringify(this.state.positions));\n    let old_position = Array.from(positions[positions.length - 1]);\n    let new_position = Array.from(old_position);\n    if (this.getColor(old_position[from]) !== this.state.colorToMove) return;\n\n    if (this.hasPiece(old_position[to])) {\n      if (this.getColor(old_position[from]) === this.getColor(old_position[to])) return;\n    }\n\n    let moved_piece = old_position[from];\n    new_position[to] = new_position[from];\n    new_position[from] = 0;\n    positions.push(new_position);\n    this.setState(prevState => ({\n      positions: positions,\n      lastMove: [prevState.currentMove, moved_piece, to],\n      currentMove: prevState.currentMove + 1,\n      selectedMove: prevState.selectedMove + 1,\n      colorToMove: this.switchColor()\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/q/Documents/WebDocuments/ChessReact/chess/src/App.js"],"names":["React","Component","Moves","Squares","startingPosition","conversion","rev_conversion","r","c","Array","fill","forEach","e","i","Number","App","constructor","dragStartHandler","dataTransfer","effectAllowed","dropEffect","setData","requestAnimationFrame","target","classList","add","availableMoves","el","document","getElementById","setState","piece_dragging","dragEndHandler","preventDefault","remove","moveClick","number","console","log","prevState","selectedMove","handleClick","square","clicked","state","piece_clicked","includes","removeClassFromAll","newMove","handlePieceClick","event","getColorFromSquare","colorToMove","parentElement","legitmoves","dropHandler","origin","getData","currentMove","lastMove","remove_classes","positions","render","convertBack","row","column","moves","position","length","piece","multiplier","Math","abs","hasPiece","push","hasOpposingPiece","left","right","lc","rc","current_square","current_piece","hasAlliedPiece","col_r","col_l","cs","cp","querySelectorAll","switchColor","getColor","squareHasPiece","squareHasOpposingPiece","square2","piece1","piece2","from","to","JSON","parse","stringify","old_position","new_position","moved_piece"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, { Component } from 'react';\nimport Moves from './components/Moves/Moves';\nimport Squares from './components/Squares/Squares';\n\n\n// TYPES (negative values for black)\n// PAWN - 1 \n// BISHOP - 2 \n// KNIGHT - 3 \n// ROOK - 4\n// QUEEN - 5 \n// KING - 6 \n\nconst startingPosition = \n[\n-4, -3, -2, -5, -6, -2, -3, -4,\n-1, -1, -1, -1, -1, -1, -1, -1,\n0, 0, 0, 0, 0, 0, 0, 0,\n0, 0, 0, 0, 0, 0, 0, 0,\n0, 0, 0, 0, 0, 0, 0, 0,\n0, 0, 0, 0, 0, 0, 0, 0,\n1, 1, 1, 1, 1, 1, 1, 1,\n4, 3, 2, 5, 6, 2, 3, 4\n];\n\nconst conversion = [];\nconst rev_conversion = {}; \nlet r = 0; let c = 0; \nArray(64).fill(null).forEach((e, i)=>{\n  conversion[i] = [r, c];\n  rev_conversion[Number(''+r+c)] = i;\n  c++; \n  if(c>7){\n    r++;\n    c=0;\n  }\n});\n\n/*\n00 01 02 03 04 05 06 07 \n10 11 12 13 14 15 16 17 \n20 21 22 23 24 25 26 27 \n30 31 32 33 34 35 36 37 \n40 41 42 43 44 45 46 47 \n50 51 52 53 54 55 56 57 \n60 61 62 63 64 65 66 67 \n70 71 72 73 74 75 76 77 \n*/\n\n// const originalRank = {1: }\n\n// Idee: in Array nach den Squares einbauen, ob kÃ¶nig sich bewegt hat \n//[65]=0|1 -> whiteKing moved \n//[66]=0|1 -> whiteRook short moved \n// etc. \n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      currentMove: 0,\n      lastMove: null,\n      colorToMove: 1,\n      piece_clicked: false,\n      remove_classes: null,\n      selectedMove: 0,\n      positions: [startingPosition], // 64-Array \n      availableMoves: null\n    };  \n  }\n\n  render(){\n    return(\n      <div className='container'>\n        <Squares \n          position={this.state.positions[this.state.selectedMove]} \n          onClick={this.handleClick} pClick={this.handlePieceClick} \n          dragStart={this.dragStartHandler} dragEnd={this.dragEndHandler} onDrop={this.dropHandler}\n          colorToMove={this.state.colorToMove}\n           /> \n        <div className='moves'> \n          <Moves \n            onClick={this.moveClick} \n            lastMove={this.state.lastMove} \n            colorToMove={this.state.colorToMove} \n            /> \n        </div>\n      </div> \n    );\n  } \n\n  convertBack(row, column){\n    return rev_conversion[Number(''+row+column)]; \n  }\n\n  availableMoves(square){\n    // console.time('moves');\n    let moves = [];\n    let position = this.state.positions[this.state.positions.length-1];\n    let piece = position[square]; \n    if(piece===0) return;\n  \n    let [row, column] = conversion[square];\n    let multiplier = (piece>0) ? 1 : -1; \n    switch(Math.abs(piece)){\n\n      case 1: { // PAWN-white\n        if(piece===1){\n          if(row===6 && !this.hasPiece(position[square-16])) moves.push(square-16); // 2 forward\n          if(!this.hasPiece(position[square-8])) moves.push(square-8); // 1 forward \n          \n          if(column>=1 && row >=1 && this.hasOpposingPiece(piece, position[this.convertBack(row-1, column-1)])) moves.push(this.convertBack(row-1, column-1)); // up-left-capture \n          if(column<=6 && row >=1 && this.hasOpposingPiece(piece, position[this.convertBack(row-1, column+1)])) moves.push(this.convertBack(row-1, column+1)); // up-right-capture \n        }else{\n          if(row===1 && !this.hasPiece(position[square+16])) moves.push(square+16); // 2 forward\n          if(!this.hasPiece(position[square+8])) moves.push(square+8); // 1 forward \n          \n          if(column>=1 && row<=6 && this.hasOpposingPiece(piece, position[this.convertBack(row+1, column-1)])) moves.push(this.convertBack(row+1, column-1)); // down-left-capture \n          if(column<=6 && row<=6 && this.hasOpposingPiece(piece, position[this.convertBack(row+1, column+1)])) moves.push(this.convertBack(row+1, column+1)); // down-right-capture \n        }\n        break;\n      }case 2:{ //BISHOPS \n        let r = row; \n        let left = true; let right = true; \n        let lc = column; let rc = column; \n        for(r=r+1;r<=7;r++){ // UNTEN \n          if(!left && !right) break; \n          if(left){\n            lc-=1;\n            if(lc<0) left = false; \n            else{\n              let current_square = this.convertBack(r, lc);\n              let current_piece = position[current_square];\n              if(this.hasPiece(current_piece)){\n                if(this.hasAlliedPiece(piece, current_piece)) left = false; \n                else{\n                  moves.push(current_square); \n                  left = false; \n                }\n              }else moves.push(current_square);\n            }\n          }if(right){\n            rc+=1;\n            if(rc>7) right = false; \n            else{\n              let current_square = this.convertBack(r, rc);\n              let current_piece = position[current_square];\n              if(this.hasPiece(current_piece)){\n                if(this.hasAlliedPiece(piece, current_piece)) right = false; \n                else{\n                  moves.push(current_square); \n                  right = false; \n                }\n              }else moves.push(current_square);\n            }\n          }\n        }\n        r = row; \n        left = true; right = true; \n        lc = column; rc = column; \n        for(r=r-1;r>=0;r--){ // OBEN \n          if(!left && !right) break; \n          if(left){\n            lc-=1;\n            if(lc<0) left = false; \n            else{\n              let current_square = this.convertBack(r, lc);\n              let current_piece = position[current_square];\n              if(this.hasPiece(current_piece)){\n                if(this.hasAlliedPiece(piece, current_piece)) left = false; \n                else{\n                  moves.push(current_square); \n                  left = false; \n                }\n              }else moves.push(current_square);\n            }\n          }if(right){\n            rc+=1;\n            if(rc>7) right = false; \n            else{\n              let current_square = this.convertBack(r, rc);\n              let current_piece = position[current_square];\n              if(this.hasPiece(current_piece)){\n                if(this.hasAlliedPiece(piece, current_piece)) right = false; \n                else{\n                  moves.push(current_square); \n                  right = false; \n                }\n              }else moves.push(current_square);\n            }\n          }\n        }\n        break; \n      }case 3:{ //KNIGHTS \n        let current_square;\n        if(row+1<=7){ // UNTEN\n          current_square = this.convertBack(row+1, column-2); \n          if(column-2>=0 && ( !this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square]))) moves.push(current_square); \n          current_square = this.convertBack(row+1, column+2); \n          if(column+2<=7 && ( !this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square]))) moves.push(current_square); \n          if(row+2<=7){\n            current_square = this.convertBack(row+2, column-1); \n            if(column-1>=0 && ( !this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square]))) moves.push(current_square);\n            current_square = this.convertBack(row+2, column+1); \n            if(column+1<=7 && ( !this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square]))) moves.push(current_square); \n          }\n\n        }\n        if(row-1>=0){ // OBEN\n          current_square = this.convertBack(row-1, column-2); \n          if(column-2>=0 && ( !this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square]))) moves.push(current_square); \n          current_square = this.convertBack(row-1, column+2); \n          if(column+2<=7 && ( !this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square]))) moves.push(current_square); \n          if(row-2>=0){\n            current_square = this.convertBack(row-2, column-1); \n            if(column-1>=0 && ( !this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square]))) moves.push(current_square);\n            current_square = this.convertBack(row-2, column+1); \n            if(column+1<=7 && ( !this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square]))) moves.push(current_square); \n          }\n\n        }\n        break;\n      }case 4: { //ROOKS \n        for(let r=row-1;r>=0;r--){ //OBEN \n          let current_square = this.convertBack(r, column);\n          let current_piece = position[current_square];\n          if(this.hasPiece(current_piece)){\n            if(this.hasAlliedPiece(current_piece, piece)) break;\n            moves.push(current_square);\n            break;\n          }\n          moves.push(current_square);\n        }\n        for(let r=row+1;r<=7;r++){ //UNTEN\n          let current_square = this.convertBack(r, column);\n          let current_piece = position[current_square];\n          if(this.hasPiece(current_piece)){\n            if(this.hasAlliedPiece(current_piece, piece)) break;\n            moves.push(current_square);\n            break;\n          }\n          moves.push(current_square);\n        }\n        for(let c=column+1;c<=7;c++){ //RECHTS\n          let current_square = this.convertBack(row, c);\n          let current_piece = position[current_square];\n          if(this.hasPiece(current_piece)){\n            if(this.hasAlliedPiece(current_piece, piece)) break;\n            moves.push(current_square);\n            break;\n          }\n          moves.push(current_square);\n        }\n        for(let c=column-1;c>=0;c--){ //LINKS\n          let current_square = this.convertBack(row, c);\n          let current_piece = position[current_square];\n          if(this.hasPiece(current_piece)){\n            if(this.hasAlliedPiece(current_piece, piece)) break;\n            moves.push(current_square);\n            break;\n          }\n          moves.push(current_square);\n        }\n        break; \n      }case 5: { //QUEENS \n        let r = row; \n        let left = true; let right = true; \n        let lc = column; let rc = column; \n        for(r=r+1;r<=7;r++){ // UNTEN \n          if(!left && !right) break; \n          if(left){\n            lc-=1;\n            if(lc<0) left = false; \n            else{\n              let current_square = this.convertBack(r, lc);\n              let current_piece = position[current_square];\n              if(this.hasPiece(current_piece)){\n                if(this.hasAlliedPiece(piece, current_piece)) left = false; \n                else{\n                  moves.push(current_square); \n                  left = false; \n                } \n              }else moves.push(current_square);\n            }\n          }if(right){\n            rc+=1;\n            if(rc>7) right = false; \n            else{\n              let current_square = this.convertBack(r, rc);\n              let current_piece = position[current_square];\n              if(this.hasPiece(current_piece)){\n                if(this.hasAlliedPiece(piece, current_piece)) right = false; \n                else{\n                  moves.push(current_square); \n                  right = false; \n                }\n              }else moves.push(current_square);\n            }\n          }\n        }\n        r = row; \n        left = true; right = true; \n        lc = column; rc = column; \n        for(r=r-1;r>=0;r--){ // OBEN \n          if(!left && !right) break; \n          if(left){\n            lc-=1;\n            if(lc<0) left = false; \n            else{\n              let current_square = this.convertBack(r, lc);\n              let current_piece = position[current_square];\n              if(this.hasPiece(current_piece)){\n                if(this.hasAlliedPiece(piece, current_piece)) left = false; \n                else{\n                  moves.push(current_square); \n                  left = false; \n                }\n              }else moves.push(current_square);\n            }\n          }if(right){\n            rc+=1;\n            if(rc>7) right = false; \n            else{\n              let current_square = this.convertBack(r, rc);\n              let current_piece = position[current_square];\n              if(this.hasPiece(current_piece)){\n                if(this.hasAlliedPiece(piece, current_piece)) right = false; \n                else{\n                  moves.push(current_square); \n                  right = false; \n                }\n              }else moves.push(current_square);\n            }\n          }\n        }\n        for(r=row-1;r>=0;r--){ //OBEN \n          let current_square = this.convertBack(r, column);\n          let current_piece = position[current_square];\n          if(this.hasPiece(current_piece)){\n            if(this.hasAlliedPiece(current_piece, piece)) break;\n            moves.push(current_square);\n            break;\n          }\n          moves.push(current_square);\n        }\n        for(r=row+1;r<=7;r++){ //UNTEN\n          let current_square = this.convertBack(r, column);\n          let current_piece = position[current_square];\n          if(this.hasPiece(current_piece)){\n            if(this.hasAlliedPiece(current_piece, piece)) break;\n            moves.push(current_square);\n            break;\n          }\n          moves.push(current_square);\n        }\n        for(c=column+1;c<=7;c++){ //RECHTS\n          let current_square = this.convertBack(row, c);\n          let current_piece = position[current_square];\n          if(this.hasPiece(current_piece)){\n            if(this.hasAlliedPiece(current_piece, piece)) break;\n            moves.push(current_square);\n            break;\n          }\n          moves.push(current_square);\n        }\n        for(c=column-1;c>=0;c--){ //LINKS\n          let current_square = this.convertBack(row, c);\n          let current_piece = position[current_square];\n          if(this.hasPiece(current_piece)){\n            if(this.hasAlliedPiece(current_piece, piece)) break;\n            moves.push(current_square);\n            break;\n          }\n          moves.push(current_square);\n        }\n        break;\n      }case 6: { //KING\n        let col_r = true;\n        let col_l = true;\n        let cs; let cp; \n        if(row+1<=7){\n          cs = this.convertBack(row+1, column); // 1 unten\n          cp = position[cs]; \n          if(!this.hasPiece(cp) || this.hasOpposingPiece(cp, piece)) moves.push(cs);\n          if(column+1<=7){\n            cs = this.convertBack(row+1, column+1); //unten rechts \n            cp = position[cs];\n            if(!this.hasPiece(cp) || this.hasOpposingPiece(cp, piece)) moves.push(cs);\n          }else col_r = false; \n          if(column-1>=0){\n            cs = this.convertBack(row+1, column-1); // unten links\n            cp = position[cs];\n            if(!this.hasPiece(cp) || this.hasOpposingPiece(cp, piece)) moves.push(cs);\n          }else col_l = false;\n        }if(col_r){\n          if(column+1<=7){\n            cs = this.convertBack(row, column+1);// 1 rechts\n            cp = position[cs]; \n            if(!this.hasPiece(cp) || this.hasOpposingPiece(cp, piece)) moves.push(cs);\n          }else col_r = false; \n        }if(col_l){\n          if(column-1>=0){\n            cs = this.convertBack(row, column-1); // 1 links\n            cp = position[cs];\n            if(!this.hasPiece(cp) || this.hasOpposingPiece(cp, piece)) moves.push(cs);\n          }else col_l = false; \n        }if(row-1>=0){\n          cs = this.convertBack(row-1, column); // 1 oben\n          cp = position[cs]; \n          if(!this.hasPiece(cp) || this.hasOpposingPiece(cp, piece)) moves.push(cs);\n          if(col_r){\n            cs = this.convertBack(row-1, column+1); // oben rechts\n            cp = position[cs]; \n            if(!this.hasPiece(cp) || this.hasOpposingPiece(cp, piece)) moves.push(cs);\n          }if(col_l){\n            cs = this.convertBack(row-1, column-1); // oben links\n            cp = position[cs]; \n            if(!this.hasPiece(cp) || this.hasOpposingPiece(cp, piece)) moves.push(cs);\n          }\n        }\n        break;\n      }\n\n    } \n    // console.timeEnd('moves');\n    return moves; \n  }\n\n  dragStartHandler = (e, i) => {\n    e.dataTransfer.effectAllowed = \"all\"\n    e.dataTransfer.dropEffect = \"move\";\n    e.dataTransfer.setData(\"text/plain\", i);\n    requestAnimationFrame(function () {\n      e.target.classList.add('hide');\n    });\n    let availableMoves = this.availableMoves(i); \n    availableMoves.forEach(el => {\n      document.getElementById('s'+el).classList.add('moveable');\n    });\n    this.setState({piece_dragging: availableMoves});\n  }\n\n  dragEndHandler = (e) =>{\n    e.preventDefault();\n    requestAnimationFrame(function () {\n        e.target.classList.remove('hide');\n      });\n  }\n\n  moveClick = (number) => {\n    console.log('move clicked',number);\n    this.setState(prevState=>({\n      selectedMove: number\n    }));\n  }\n\n  handleClick = (square) => {\n    let clicked = this.state.piece_clicked; \n    if(clicked){\n      let availableMoves = this.state.availableMoves; \n      if(availableMoves.includes(square)){ \n        this.removeClassFromAll('moveable'); \n        this.removeClassFromAll('active');\n        this.setState({piece_clicked: false, availableMoves: null}, this.newMove(clicked, square));\n      }else{\n        // this.removeClassFromAll('active'); \n        // this.setState({piece_clicked: false })\n      }\n    }\n  }\n\n  handlePieceClick = (square, event) => {\n    let clicked = this.state.piece_clicked;\n    if(!clicked){\n      if(this.getColorFromSquare(square)!==this.state.colorToMove) return; \n      let availableMoves = this.availableMoves(square); \n      event.target.parentElement.classList.add('active');\n      availableMoves.forEach(el => {\n        document.getElementById('s'+el).classList.add('moveable');\n      });\n      this.setState({piece_clicked: square, availableMoves: availableMoves});\n    }else{\n      this.removeClassFromAll('active');\n      this.removeClassFromAll('moveable');\n      if(this.getColorFromSquare(square)===this.state.colorToMove){ \n          event.target.parentElement.classList.add('active');\n          let availableMoves = this.availableMoves(square); \n          availableMoves.forEach(el => {\n            document.getElementById('s'+el).classList.add('moveable');\n          });\n          this.setState({piece_clicked: square});\n      }else{\n        let legitmoves = this.state.availableMoves;\n        if(legitmoves.includes(square)){\n          this.setState({piece_clicked: false, availableMoves: null}, this.newMove(clicked, square));  \n        } \n      }\n    }\n  }\n\n  dropHandler = (e, target) => {\n    e.preventDefault();\n    let origin = e.dataTransfer.getData('text/plain');\n    this.removeClassFromAll('dragover');\n    this.removeClassFromAll('moveable');\n\n    let legitmoves = this.state.piece_dragging;\n    if(legitmoves.includes(target)) this.setState({piece_dragging: false}, this.newMove(origin, target));\n    else this.setState({piece_dragging: false});\n    // e.target.classList.remove('dragover');\n    // let target = e.target.dataset.position; \n    // let origin = e.dataTransfer.getData(\"text/plain\");\n    // this.newMove(origin, target);\n  };\n\n  removeClassFromAll(remove){\n    document.querySelectorAll('.'+remove).forEach(el=>el.classList.remove(remove));\n  }\n\n  switchColor(){ return this.state.colorToMove === 1 ? -1 : 1; }\n\n  getColor(piece){ return piece<0 ? -1 : 1; }\n\n  getColorFromSquare(square){ return this.getColor(this.state.positions[this.state.currentMove][square]); }\n\n  hasPiece(piece){ return Math.abs(piece)>0; }\n\n  squareHasPiece(square){ return this.hasPiece(this.state.positions[this.state.currentMove][square]); }\n  \n  squareHasOpposingPiece(square, square2){ return this.getColorFromSquare(square) !== this.getColorFromSquare(square2); }\n\n  hasOpposingPiece(piece1, piece2){ return (this.hasPiece(piece2) && this.getColor(piece1)!==this.getColor(piece2)); }\n  \n  hasAlliedPiece(piece1, piece2){ return (this.hasPiece(piece2) && this.getColor(piece1)===this.getColor(piece2)); }\n\n  newMove(from, to){\n    let positions = JSON.parse(JSON.stringify(this.state.positions));\n    let old_position = Array.from(positions[positions.length-1]);\n    let new_position = Array.from(old_position);\n\n    if(this.getColor(old_position[from])!==this.state.colorToMove) return; \n    if(this.hasPiece(old_position[to])){ \n      if(this.getColor(old_position[from])===this.getColor(old_position[to])) return; \n    }\n    let moved_piece = old_position[from];\n    new_position[to] = new_position[from];\n    new_position[from] = 0;\n    positions.push(new_position);\n\n    this.setState(prevState=>({\n      positions: positions,\n      lastMove: [prevState.currentMove, moved_piece, to],\n      currentMove: prevState.currentMove+1,\n      selectedMove: prevState.selectedMove+1,\n      colorToMove: this.switchColor()\n    }));\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}