{"version":3,"sources":["components/Moves/MoveButton/MoveButton.js","components/Moves/Moves.js","components/PopUp/PopUp.js","components/ToggleTextButton/ToggleTextButton.js","components/ImageButton/ImageButton.js","components/GamesList/GamesList.js","components/PGNDialog/PGNDialog.js","components/PromotionPrompt/PromotionPrompt.js","App.js","reportWebVitals.js","index.js"],"names":["MoveButton","altText","onClick","button","title","e","preventDefault","className","Moves","moves","selected_move","colorToMove","moveClicked","i","useEffect","moves_table","document","querySelector","move_offset","Math","floor","clientHeight","scrollTop","render","Object","keys","length","classes","count","buffer","push","React","createElement","key","id","san","PopUp","props","closePopup","stopPropagation","value","content","ToggleTextButton","text","initialText","useState","display","setDisplay","oldDisplay","ImageButton","state","GamesList","games","close_popup","whiteplayer","blackplayer","date","result","map","c","match","PGNDialog","loadStudy","fetch","then","res","json","setState","input","this","placeholder","onChange","setInput","target","console","log","Component","PromotionPrompt","color","from","to","square","getElementById","documentElement","style","setProperty","clientWidth","left","offsetLeft","top","offsetTop","chess","ChessJS","squareID","CONTROL_CLASS","App","keyDownHandler","keyCode","fen_history","prevState","popUp","promotion","closePromotionPrompt","dragStartHandler","dataset","position","dataTransfer","effectAllowed","dropEffect","setData","requestAnimationFrame","classList","add","highlightMoves","dragEndHandler","remove","dropHandler","removeClassesFromAll","origin","getData","newMove","dragOverHandler","dragLeaveHandler","handleControlClick","show_control","handleHideClick","show_pieces","pgnClick","moveClick","number","history","handleAutoplayClick","autoplay","handleClick","clicked","piece_clicked","handlePieceClick","squaresOfSameColor","pieceIsTurnColor","loadPGN","toggleConvert","toggle","cleanUpSquare","slice","getOtherChessColor","turn","WHITE","BLACK","colorConv","one","two","get","piece","promotionHandler","removeClassFromAll","querySelectorAll","forEach","el","hideBoardControl","showBoardControl","control_flag","undefined","in_check","get_king","verbose","move","dom","control","defended_pieces_all","entries","w","b","ratio","getRatio","fen","flipped","loaded_game","weighted","players","load","arr","Array","prototype","reverse","call","board","flat","squares_ids","square_classes","onDragOver","onDragLeave","onDrop","data-position","data-count","type","draggable","onDragStart","onDragEnd","onTouchStart","touchStartHandler","alt","href","addEventListener","nextProps","nextState","highlightSquare","err","error","min","max","ceil","random","point","end","setTimeout","url","pgn","load_result","load_pgn","headers","header","Black","BlackTitle","White","WhiteTitle","Result","Termination","new_history","reset","Number","charAt","getRowFromSquare","possible_moves","getRandomInt","promoteTo","assign","options","isOnPromotionSquare","openPromotionPrompt","highlightClass","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM"],"mappings":"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","file":"static/js/main.7f9c1195.chunk.js","sourcesContent":["import React from 'react'; \nimport './MoveButton.css';\n\nconst MoveButton = ({altText, onClick, button}) =>{\n\n\tfunction clicked(e){\n\t\te.preventDefault(); \n\t\tonClick();\n\t}\n\n\treturn ( \n\t\t<button title={altText} onClick={clicked} className={button} />\n\t);\n}\n\nexport default MoveButton;","import React, {useEffect} from 'react'; \nimport './Moves.css';\nimport MoveButton from './MoveButton/MoveButton';\n\n// let typeConversion = ['','B','N','R','Q','K'];\n// let moveConverter = [\"a8\", \"b8\", \"c8\", \"d8\", \"e8\", \"f8\", \"g8\", \"h8\", \"a7\", \"b7\", \"c7\", \"d7\", \"e7\", \"f7\", \"g7\", \"h7\", \"a6\", \"b6\", \"c6\", \"d6\", \"e6\", \"f6\", \"g6\", \"h6\", \"a5\", \"b5\", \"c5\", \"d5\", \"e5\", \"f5\", \"g5\", \"h5\", \"a4\", \"b4\", \"c4\", \"d4\", \"e4\", \"f4\", \"g4\", \"h4\", \"a3\", \"b3\", \"c3\", \"d3\", \"e3\", \"f3\", \"g3\", \"h3\", \"a2\", \"b2\", \"c2\", \"d2\", \"e2\", \"f2\", \"g2\", \"h2\", \"a1\", \"b1\", \"c1\", \"d1\", \"e1\", \"f1\", \"g1\", \"h1\"];\n// TYPES \n// PAWN - 1\n// BISHOP - 2 \n// KNIGHT - 3\n// ROOK - 4 \n// QUEEN - 5 \n// KING - 6\nconst Moves = ({moves, onClick, selected_move, colorToMove}) => {\n\t\n\t// let colorToText = (color) => {\n\t// \treturn color===1 ? 'white' : 'black'; \n\t// }\n\n\t/**\n\t * Scrolls the move-table to the appropriate position\t\n\t **/\n\tuseEffect(() => {\n\t\tif(selected_move===0) return;\n\t\tlet moves_table = document.querySelector('#moves_table'); \n\t\tlet move_offset = Math.floor((selected_move-1)/2)*20+20; \n\n\t\tif(moves_table.clientHeight+moves_table.scrollTop <= move_offset){\n\t\t\tmoves_table.scrollTop = move_offset - moves_table.clientHeight;\n\t\t}else if(moves_table.scrollTop >= move_offset){\n\t\t\tmoves_table.scrollTop = move_offset-20;\n\t\t}\n\t});\n\n\tfunction moveClicked(i){\n\t\tonClick(i);\n\t}\n\tlet render = []; \n\n\tif(moves && Object.keys(moves).length>0){\n\t\tlet classes = ['move_white','move_black']; \n\t\tlet length = Object.keys(moves).length;\n\t\tlet count = 1;\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\n\t\t\tlet buffer = []; \n\t\t\tbuffer.push(\n\t\t\t\tReact.createElement('div', {className:'move_number', key:'mr'+count}, count)\n\t\t\t\t);\n\t\t\tbuffer.push(\n\t\t\t\tReact.createElement(\n\t\t\t\t\t'div', \n\t\t\t\t\t{\n\t\t\t\t\t\tclassName:(i===selected_move-1)? classes[i%2]+' selected':classes[i%2], \n\t\t\t\t\t\tid:'m'+i, \n\t\t\t\t\t\tkey:'m'+i, \n\t\t\t\t\t\tonClick: (e)=>moveClicked(i)\n\t\t\t\t\t}, moves[i].san)\n\t\t\t\t);\n\t\t\tif(i+1<length){\n\t\t\t\ti+=1; \n\t\t\t\tbuffer.push(\n\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t'div', \n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tclassName:(i===selected_move-1)? classes[i%2]+' selected':classes[i%2], \n\t\t\t\t\t\t\tid:'m'+i, \n\t\t\t\t\t\t\tkey:'m'+i, \n\t\t\t\t\t\t\tonClick: (e) => moveClicked(i+1)\n\t\t\t\t\t\t}, moves[i].san)\n\t\t\t\t);\n\t\t\t}\n\n\t\t\trender.push(\n\t\t\t\tReact.createElement('div', {className:'move_item', key:'mi'+count}, buffer)\n\t\t\t\t);\n\t\t\tcount++; \n\t\t\t\n\t\t}\n\n\t}\n\treturn (\n\t\t<div id=\"moves\"> \n\t\t\t<div id=\"moves_container\">\n\t\t\t\t<div id=\"top_row\">\n\t\t\t\t\t<div className=\"left\">Moves</div>\n\t\t\t\t\t<div className=\"right\">\n\t\t\t\t\t\t<span className={'color '+colorToMove} /> to move\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t<div id=\"table_container\">\n\t\t\t\t\t<div className=\"move_button_container\">\n\t\t\t\t\t\t<MoveButton onClick={()=>moveClicked(0)} altText=\"Go to first Move\" button=\"first_move\" />\n\t\t\t\t\t\t<MoveButton onClick={()=>moveClicked(selected_move-1)} altText=\"Go to previous Move\" button=\"prev_move\" />\n\t\t\t\t\t\t<MoveButton onClick={()=>moveClicked(selected_move+1)} altText=\"Go to next Move\" button=\"next_move\" />\n\t\t\t\t\t\t<MoveButton onClick={()=>moveClicked(999)} altText=\"Go to last Move\" button=\"last_move\" />\n\t\t\t\t\t</div>\n\t\t\t\t\t\t<div id=\"moves_table\"> { render } </div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Moves; ","import React from 'react';  \nimport './PopUp.css';  \n\nconst PopUp  = (props) => {\n\treturn ( \n\t\t<div id=\"popup\" className='popup' onClick={()=>props.props.closePopup(false)}>  \n\t\t\t<div className='popup_inner' onClick={(e)=>e.stopPropagation()}>\n\t\t\t\t<span id=\"closepopup\" className='pointer' value=\"Close Pop-up\" onClick={()=>props.props.closePopup(false)}>X</span>  \t\t\t\n\t\t\t\t{props.props.content}\n\t\t\t\t{/*<div className=\"input\">\n\t\t\t\t\t<div className=\"input_title\"> PGN </div>\n\t\t\t\t\t<div className=\"input_box\"> \n\t\t\t\t\t\t<textarea placeholder=\"Enter PGN\" id=\"inputpgn\"></textarea> \n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"inputsubmit\">\n\t\t\t\t\t\t<span id=\"popupsubmit\" class=\"pointer\" value=\"submit\">Import</span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>  \n\n\t\t\t\t<div className=\"input\">\n\t\t\t\t\t<div className=\"input_title\"> Famous Games </div>\n\t\t\t\t\t<div className=\"collapsed\"> \n\n\t\t\t\t\t</div>\n\t\t\t\t</div>*/}\n\t\t\t</div>  \n\t\t</div>\n\t);  \n}\nexport default PopUp;","import React,{ useState } from 'react'; \nimport './ToggleTextButton.css';\n\nconst ToggleTextButton = ({text, onClick, initialText=0}) => {\n\tconst [display, setDisplay] = useState(initialText);\n\n\tfunction handleClick(){\n\t\tlet oldDisplay = display; \n\t\tsetDisplay(display===0?1:0); \n\t\tonClick(oldDisplay); \n\t}\n\n\treturn (<button onClick={handleClick} title={text[display]} className='toggleTextButton'> {text[display]} </button>);\n}\n\nexport default ToggleTextButton; ","import React from 'react'; \nimport './ImageButton.css';\n\nconst ImageButton = ({button, state, onClick, altText}) => {\n\treturn (\n\t\t<button title={altText} className={'img_button '+button+' '+state} onClick={()=>onClick()} />\n\t);\n}\nexport default ImageButton; ","import React from 'react'; \nimport './GamesList.css';\n\nconst GamesList = ({games, close_popup}) => {\n\n\tlet whiteplayer = /\\[White\\s\"?(.*?)\"?\\]/; \n\tlet blackplayer = /\\[Black\\s\"?(.*?)\"?\\]/; \n\tlet date = /\\[Date\\s\"?(.*?)\"?\\]/; \n\tlet result = /\\[Result\\s\"?(.*?)\"?\\]/;\n\n\treturn (\n\t\t<div className=\"games_container\">\n\t\t\t{ games && \t \n\t\t\t\tgames.map((i, c) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div key={c+'game'} onClick={() => close_popup(i)} className=\"game\">\n\t\t\t\t\t\t\t<div className=\"players\">\n\t\t\t\t\t\t\t\t{i.match(whiteplayer)[1] + \" vs. \" + i.match(blackplayer)[1] + \" (\"+i.match(result)[1]+\")\"} \n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"date\">{i.match(date)[1]}</div>\n\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t}) \n\t\t\t}\n\t\t</div>\n\t);\n}\nexport default GamesList;","import React, {Component} from 'react'; \nimport './PGNDialog.css';\nimport GamesList from './../GamesList/GamesList';\n\n\nclass PGNDialog extends Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tclosePopup: props.closePopup,\n\t\t\tinput: '',\n\t\t\tgames: ''\n\t\t}\n\t}\n\n\tcomponentDidMount(){\n\t\tthis.loadStudy(); \n\t}\n\n\trender(){\n\t\treturn ( \n\t\t\t<>\n\t\t\t\t<h1>PGN</h1> \n\t\t\t\t<div className=\"inputclass\">\t\t\n\t\t\t\t\t<div className=\"inputbox\"> \n\t\t\t\t\t\t<textarea \n\t\t\t\t\t\t\tplaceholder=\"Enter PGN\" \n\t\t\t\t\t\t\tonChange={(e) => this.setInput(e.target.value)} \n\t\t\t\t\t\t\tvalue={this.state.input}\n\t\t\t\t\t\t\t// value=\"https://lichess.org/game/export/6dFspuKY\" \n\t\t\t\t\t\t\tid=\"inputpgn\" /> \n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"inputsubmit\">\n\t\t\t\t\t\t<span \n\t\t\t\t\t\t\tid=\"popupsubmit\" \n\t\t\t\t\t\t\tclassName='pointer popup_button' \n\t\t\t\t\t\t\tvalue=\"submit\" \n\t\t\t\t\t\t\tonClick={()=>this.state.closePopup(this.state.input)}>\n\t\t\t\t\t\t\tImport\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<h1> Famous Games </h1> \n\t\t\t\t<GamesList games={this.state.games} closePopup={this.state.closePopup} />\n\t\t\t</>\n\t\t);\n\t}\n\n\tsetInput(input){\n\t\tthis.setState({input});\n\t}\n\tsetGames(games){\n\t\tconsole.log('setGames', games);\n\t\tthis.setState({games});\n\t}\n\n\tloadStudy = () => {\n\t\tfetch('http://localhost:3001/game?all=true')\n\t      \t.then(res => res.json())\n\t     \t.then(res => {\n\t        \tthis.setState({games: res});\n        \t});\n\t}\n\n\n}\n\nexport default PGNDialog;","import React from 'react'; \nimport './PromotionPrompt.css';\n\nconst PromotionPrompt = ({onClick, color, from, to}) => {\n  \tlet square = document.getElementById(to);\n\tdocument.documentElement.style.setProperty('--square_size', square.clientWidth+'px');\n  \tlet left = square.offsetLeft+19; //19px is the margin-left of the chessboard\n  \tlet top = color==='black' \n  \t\t? square.offsetTop-3*square.clientWidth\n  \t\t: square.offsetTop;\n\n\treturn (\n\t\t<div className='promotion_prompt' style={{left: left+'px', top: top+'px'}}>\n\t\t\t<div className={`option q promotion_piece ${color}`} onClick={()=>onClick('q', from, to)} />\n\t\t\t<div className={`option n promotion_piece ${color}`}  onClick={()=>onClick('n', from, to)} />\n\t\t\t<div className={`option r promotion_piece ${color}`}  onClick={()=>onClick('r', from, to)} />\n\t\t\t<div className={`option b promotion_piece ${color}`} onClick={()=>onClick('b', from, to)} />\n\t\t</div>\n\t);\n}\nexport default PromotionPrompt; ","import './App.css';\nimport React, { Component } from 'react';\nimport Moves from './components/Moves/Moves';\nimport PopUp from './components/PopUp/PopUp';\nimport ToggleTextButton from './components/ToggleTextButton/ToggleTextButton';\nimport ImageButton from './components/ImageButton/ImageButton';\nimport PGNDialog from './components/PGNDialog/PGNDialog';\nimport GamesList from './components/GamesList/GamesList';\nimport PromotionPrompt from './components/PromotionPrompt/PromotionPrompt';\nimport Draggable from 'react-draggable';\n\nimport * as ChessJS from 'chess.js';\nconst Chess = typeof ChessJS === \"function\" ? ChessJS : ChessJS.Chess;\nconst chess = new Chess();\n\nconst squareID = [\"a8\", \"b8\", \"c8\", \"d8\", \"e8\", \"f8\", \"g8\", \"h8\", \"a7\", \"b7\", \"c7\", \"d7\", \"e7\", \"f7\", \"g7\", \"h7\", \"a6\", \"b6\", \"c6\", \"d6\", \"e6\", \"f6\", \"g6\", \"h6\", \"a5\", \"b5\", \"c5\", \"d5\", \"e5\", \"f5\", \"g5\", \"h5\", \"a4\", \"b4\", \"c4\", \"d4\", \"e4\", \"f4\", \"g4\", \"h4\", \"a3\", \"b3\", \"c3\", \"d3\", \"e3\", \"f3\", \"g3\", \"h3\", \"a2\", \"b2\", \"c2\", \"d2\", \"e2\", \"f2\", \"g2\", \"h2\", \"a1\", \"b1\", \"c1\", \"d1\", \"e1\", \"f1\", \"g1\", \"h1\"];\nconst BOARD_ID = 'chessboard'; \nconst AUTOPLAY_SPEED = 500; \nconst SQUARE_SIZE = 100;\nconst CONTROL_CLASS = '--control'; // Variable in CSS for storing the ratio of attackers/defenders on a square \n\n\nclass App extends Component {\n\n  /*\n  ----------------------------------------------------------------------------------------------------------------------------------\n  ------------------------------------------------------------ REACT ---------------------------------------------------------------\n  ----------------------------------------------------------------------------------------------------------------------------------\n  */\n\n\n  constructor(){\n    super();\n\n    this.state = {\n      selected_move: 0,\n      piece_clicked: false,\n      fen_history: [chess.fen()], // all moves, each represented by fen \n      flipped: false,\n      history: {}, // Single moves, each with from and to-squares and in SAN format \n      loaded_game: null, //PGN of loaded game \n      popUp: false, \n      show_control: true,\n      weighted: false,\n      players: false,\n      result: '',\n      show_pieces: true,\n      promotion: {\n        from: null,\n        to: null,\n        color: null\n      },\n      autoplay: false\n    };  \n  }\n\n  /**\n   * \n   * Each render gets every piece from chess.js. Pieces are rendered as children into the squares \n   * Board control is realized through the .square-bg children\n   * List of played moves is passed to the Moves-component, which also displays game results \n   * \n   **/\n  render(){\n    chess.load(this.state.fen_history[this.state.selected_move]);\n    let colorToMove = chess.turn();\n    let arr = this.state.flipped ? Array.prototype.reverse.call(chess.board().flat()) : chess.board().flat();\n    let squares_ids = this.state.flipped ? squareID.reverse() : squareID;\n\n    let square_classes = ['light', 'dark'];\n    let c = 0; \n    let players = this.state.players;\n    return(\n      <div className='container'>\n        <h1 id=\"title\">\n          visual chess\n        </h1>\n        <div className=\"main\"> \n          <div id={BOARD_ID} className='chessboard'> \n            {\n              arr.map((square, i)=>{\n                return square \n                ? \n                <div \n                  onDragOver={this.dragOverHandler} \n                  onDragLeave={this.dragLeaveHandler} \n                  onDrop={this.dropHandler} \n                  id={squares_ids[i]}\n                  data-position={squares_ids[i]}\n                  data-count={i}\n                  key={squares_ids[i]} \n                  className={`square ${square_classes[c%2]}`}> \n                    <div className='square-bg'>\n                      <div className='control-dark' /> \n                      <div className='control-light' />\n                    </div> \n                    <div \n                      className={`piece ${this.colorConv(square.color)} ${square.type}`}\n                      draggable='true'\n                      data-position={squares_ids[i]}\n                      onDragStart={this.dragStartHandler}\n                      onDragEnd={this.dragEndHandler}\n                      onClick={this.handlePieceClick}\n                    />  \n                </div>\n                : \n                <div \n                  data-position={squares_ids[i]}\n                  id={squares_ids[i]}\n                  data-count={i}\n                  onDragOver={this.dragOverHandler} \n                  onTouchStart={this.touchStartHandler}\n                  onDragLeave={this.dragLeaveHandler} \n                  onClick={this.handleClick} \n                  onDrop={this.dropHandler} \n                  key={squares_ids[i]} \n                  className='square'> \n                    <div className='square-bg'>\n                      <div className='control-dark' /> \n                      <div className='control-light' />\n                    </div> \n                </div>         \n            })\n          }\n          </div>\n\n          {this.state.promotion.from ? \n            <PromotionPrompt \n              onClick={this.promotionHandler}\n              from={this.state.promotion.from}\n              to={this.state.promotion.to}\n              color={this.state.promotion.color}\n\n              />\n              : ''\n          }\n\n          <aside>\n            <Moves \n              onClick={this.moveClick} \n              selected_move={this.state.selected_move}\n              moves={this.state.history}\n              colorToMove={colorToMove}\n              result={this.state.result}\n              whiteplayer={this.state.whiteplayer}\n              blackplayer={this.state.blackplayer}\n              />\n\n              <div className=\"cards\">\n                { players && \n                    <div className=\"players\"> \n                      <div className=\"whiteplayer\">{players.whiteplayer ? players.whiteplayer : 'Anonymous'}</div> \n                      <div className=\"blackplayer\">{players.blackplayer ? players.blackplayer : 'Anonymous'}</div>\n                    </div>\n                }\n\n                { this.state.result && \n                    <div className=\"result\"> {this.state.result} </div> \n                } \n              </div>\n              \n              <div className=\"button_container\">\n                  <ImageButton \n                    button='pgn_button' \n                    altText='Enter PGN'\n                    onClick={this.pgnClick}\n                  />\n                  <ImageButton \n                    button='play_button' \n                    altText='Turn Autoplay on'\n                    state={this.toggleConvert(this.state.autoplay)}\n                    onClick={this.handleAutoplayClick}  \n                    />\n                  <ToggleTextButton \n                    text={['Hide Pieces', 'Show Pieces']} \n                    initialText={0}\n                    onClick={this.handleHideClick} />\n                  <ToggleTextButton \n                    text={['Hide Board Control', 'Show Board Control']} \n                    initialText={0}\n                    onClick={this.handleControlClick} />\n              </div>\n\n              {<footer> \n                <p>created using (a modified) <a alt=\"Chess.JS Github\" href=\"https://github.com/jhlywa/chess.js/blob/master/README.md\">chess.js</a></p>\n                <p>piece design from <a href=\"lichess.org\" alt=\"Lichess\">lichess.org</a></p>\n                <p>contact: <a href = \"mailto: quirschnei@gmail.com\">quirschnei@gmail.com</a></p>\n              </footer>}\n           \n          </aside>\n         \n          \n        </div>\n\n        {this.state.popUp ?  \n          <PopUp\n             props={this.state.popUp}\n          />  \n          : ''}\n\n      </div> \n    );\n  } \n  \n  componentDidMount(){\n    document.addEventListener(\"keydown\", this.keyDownHandler);\n    if(this.state.show_control) this.showBoardControl();\n  }\n\n\n  /**\n   * If show/hide pieces or show/hide Board control are triggered, no need to re-render (changes are done through DOM / CSS) \n   **/\n  shouldComponentUpdate(nextProps, nextState){\n    if(this.state.show_pieces!==nextState.show_pieces) return false;\n    if(this.state.show_control!==nextState.show_control){\n      this.showBoardControl(nextState.show_control);\n      return false; \n    }\n    return true;\n  }\n\n  /**\n   * Highlights last move and calls showBoardControl after render \n   **/\n  componentDidUpdate() {\n    if(this.state.selected_move>0){ // For highlighting the last move\n      this.removeClassFromAll('highlighted');\n      try{\n        this.highlightSquare(this.state.history[this.state.selected_move-1].to);\n      }catch(err){\n        console.error('Error:', err);\n      }\n    }\n    if(this.state.show_control) this.showBoardControl();\n  }\n\n  /*\n  ----------------------------------------------------------------------------------------------------------------------------------\n  ---------------------------------------------------- EVENT HANLDERS --------------------------------------------------------------\n  ----------------------------------------------------------------------------------------------------------------------------------\n  */\n\n\n  keyDownHandler = (e)=>{\n    switch(e.keyCode){\n      case 39: // Right arrow \n        e.preventDefault();\n        if(this.state.selected_move+1<=this.state.fen_history.length-1){ \n          this.setState(prevState=>({selected_move: prevState.selected_move+1}));                \n        }\n        break;\n      case 37: // Left arrow \n        e.preventDefault();\n        if(this.state.selected_move>=1){\n          this.setState(prevState=>({selected_move: prevState.selected_move-1}));\n        }\n        break;\n      case 27: // esc-key\n        e.preventDefault(); \n        if(this.state.popUp){\n          this.setState({popUp: false});\n        } else if(this.state.promotion){\n          this.closePromotionPrompt();\n        }\n        break;\n      default: break; \n    }\n  }\n\n  dragStartHandler = (e) => { // e: dragEvent\n    console.log('dragStart', e);\n    let square = e.target.dataset.position;\n    e.dataTransfer.effectAllowed = \"all\"\n    e.dataTransfer.dropEffect = \"move\";\n    e.dataTransfer.setData(\"text/plain\", square);\n    requestAnimationFrame(function () {\n      e.target.classList.add('hide');\n    });\n    this.highlightMoves(square);   \n  }\n\n  dragEndHandler = (e) =>{\n    e.preventDefault();\n    requestAnimationFrame(function () {\n      e.target.classList.remove('hide');\n    }); \n  }\n\n  dropHandler = (e) => {\n    e.preventDefault();\n    let target = e.target.dataset.position;\n     requestAnimationFrame(function () {\n      e.target.classList.remove('dragover');\n    });\n    this.removeClassesFromAll('dragover', 'moveable'); \n    let origin = e.dataTransfer.getData('text/plain');\n    if(this.newMove(origin, target)){\n      this.removeClassesFromAll('moveable', 'active');\n    }\n  }\n\n  dragOverHandler = (e) => {\n    e.preventDefault(e);\n    requestAnimationFrame(function () { \n      e.target.classList.add('dragover');\n    });\n  }\n  \n  dragLeaveHandler = (e) => {\n    e.preventDefault(); \n    requestAnimationFrame(function () {\n      e.target.classList.remove('dragover');\n    }); \n  }\n\n  handleControlClick = () => {  \n    this.setState(prevState=> ({show_control: !prevState.show_control}));  \n  }\n\n  handleHideClick = () => {\n    if(this.state.show_pieces){\n      document.getElementById('chessboard').classList.add('hidepieces');\n      this.setState({show_pieces: false});\n    }else{\n      document.getElementById('chessboard').classList.remove('hidepieces');\n      this.setState({show_pieces: true});\n    }\n  }\n\n  pgnClick = () =>{\n    this.setState({popUp: {content: <PGNDialog closePopup={this.closePopup} />, closePopup: this.closePopup}});\n  }\n\n  moveClick = (number) => {\n    if(number===999) number=this.state.history.length; // Last move \n    else if(number>this.state.history.length || number<0) return;  \n    this.setState({selected_move:number});\n  }\n\n  /**\n   * Calls the recursive autoplay function or updates state to stop autoplay-execution \n   **/\n  handleAutoplayClick = () => {\n    if(!this.state.autoplay){ \n      this.setState(state => ({\n        autoplay: !state.autoplay \n      }), ()=>this.autoplay(this.state.selected_move, Object.keys(this.state.history).length));\n    }else{\n      this.setState(state => ({\n        autoplay: !state.autoplay \n      }));\n    } \n  }\n\n  /**\n   * Click-Listener for squares, calls newMove function \n   **/\n  handleClick = (e) => {\n    if(this.state.promotion.from){\n      this.closePromotionPrompt(); \n      return;\n    }\n\n    let square = e.target.dataset.position;\n    let clicked = this.state.piece_clicked; \n\n    if(clicked){\n      if(this.newMove(clicked, square)){\n        this.removeClassesFromAll('moveable', 'active');\n        this.setState({piece_clicked: false});\n      }else{\n        console.log('Error in handleClick');\n      }\n    }\n  }\n\n  /**\n   * Click-Listener for pieces\n   **/\n  handlePieceClick = (e) => {\n    if(this.state.promotion.from){\n      this.closePromotionPrompt(); \n      return;\n    }\n\n    let square = e.target.dataset.position;\n    let clicked = this.state.piece_clicked;\n    if(square===clicked){\n      this.removeClassesFromAll('active', 'moveable');\n      this.setState({piece_clicked: null});\n      return; \n    }\n    if(!clicked){\n      if(this.pieceIsTurnColor(square)){\n        document.getElementById(square).classList.add('active');\n        this.highlightMoves(square);\n        this.setState({piece_clicked: square});\n      }\n    }else{\n      this.removeClassesFromAll('active', 'moveable');\n      if(this.squaresOfSameColor(square, clicked)){ // If another piece of the same color is clicked, switch to that piece being active  \n          document.getElementById(square).classList.add('active');\n          this.highlightMoves(square);\n          this.setState({piece_clicked: square});\n      }else{ // Capture \n        if(this.newMove(clicked, square)){\n          this.setState({piece_clicked: null});\n        }\n      }\n    }\n  }\n\n  closePopup = (text) => {\n    this.setState({popUp: false});\n    if(text) this.loadPGN(text);\n  }\n\n  /*\n  ----------------------------------------------------------------------------------------------------------------------------------\n  ----------------------------------------------------        UTILITY        -------------------------------------------------------\n  ----------------------------------------------------------------------------------------------------------------------------------\n  */\n\n\n  getRandomIntInclusive(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1) + min); //The maximum is inclusive and the minimum is inclusive\n  }\n\n  /**\n   * Recursive method, goes through all played moves, as long as uninterrupted by state \n   **/\n  autoplay(point, end){\n    console.log(point, end);\n    ++point;\n    if(point>end || !this.state.autoplay){\n      this.setState({autoplay:false});\n      return false;\n    } \n    this.setState({selected_move: point});\n    setTimeout(() => this.autoplay(point, end), AUTOPLAY_SPEED);\n  }\n\n  toggleConvert = (toggle) => toggle ? 'on' : 'off';  \n\n  loadPGNfromServer(url){\n    fetch(url)\n      .then(res => res.text())\n      .then(res => this.loadPGN(res));\n  }\n\n  /**\n   * Loads a proveded PGN (format to save chess-games)\n   * Passes it to chess.js and extracts titles and names of players and game result (if available) to display\n   * Loads moves into state (history and fen_history), as chess.js does not allow to browse through \n   * the move history. As such, each position in the game is saved via the corresponding FEN-string  \n   * Afterwards, chess.js is reset to the starting position \n   **/\n  loadPGN(pgn){\n    let load_result = chess.load_pgn(pgn);\n    let headers = chess.header(); \n    let players = {};\n\n    if(headers.Black){\n      let content = headers.BlackTitle ? `[${headers.BlackTitle}] ${headers.Black}` : headers.Black; \n      players.whiteplayer = content; \n    }if(headers.White){\n      let content = headers.WhiteTitle ? `[${headers.WhiteTitle}] ${headers.White}` : headers.White; \n      players.blackplayer = content;   \n    }\n\n    let result = headers.Result ? 'Result: ' + headers.Result : '';\n    if(headers.Termination) result += ` (${headers.Termination})`; \n    \n    if(load_result){\n      let history = chess.history({verbose:true});\n      let new_history = {}; \n      chess.reset();\n      let fen_history = [chess.fen()];\n      history.forEach((e, i)=>{\n        chess.move(e);\n        fen_history.push(chess.fen());\n        new_history[i] = {from: e.from, to:e.to, san:e.san};\n      });\n      chess.load(fen_history[0]);\n      this.setState({history: new_history, fen_history, loaded_game: pgn, selected_move: 0, result, players});\n\n    }else console.log(load_result);\n  }\n\n  loadFEN(fen){\n    let load_result = chess.load(fen);\n    let fen_history = [chess.fen()];\n    let history = {}; \n    this.setState({fen_history, history, selected_move: 0});\n  }\n\n  // If square is of format piece-square, remove piece (e.g. ba8 => a8) \n  cleanUpSquare = (square) => square.length>2 ? square.slice(1) : square;\n\n  getOtherChessColor = () => chess.turn() === chess.WHITE ? chess.BLACK : chess.WHITE;\n  \n  getRatio(w, b){\n    if(w===0&&b===0) return 0;  \n    let sum = w + b; \n    let whiteshare = w/sum*100; \n    return whiteshare; \n  }\n\n  colorConv = color => color==='w' ? 'white' : 'black';\n\n  squaresOfSameColor = (one, two) => chess.get(one).color===chess.get(two).color;\n\n  pieceIsTurnColor = (piece) => chess.get(piece).color === chess.turn();\n\n  getRowFromSquare(square){ return Number(square.charAt(1)); }\n\n  isOnPromotionSquare(square, color){\n    return color==='w' ? this.getRowFromSquare(square)==8 : this.getRowFromSquare(square)==1; \n  }\n\n  /*\n  ----------------------------------------------------------------------------------------------------------------------------------\n  ----------------------------------------------------     CHESS     ---------------------------------------------------------------\n  ----------------------------------------------------------------------------------------------------------------------------------\n  */\n\n\n  /**\n   * Called by the PromotionPromt-component, passes clicked option to newMove function and \n   **/\n  promotionHandler = (piece, from, to) => {\n    this.setState({promotion: {from: null, to:null, color:null}});\n    this.newMove(from, to, piece);\n  }\n\n  openPromotionPrompt(from, to, color){ this.setState({promotion: {from, to, color}}); }\n\n  closePromotionPrompt = () => { this.setState({promotion: {from: null, to:null, color:null}, piece_clicked: false}); }\n\n\n  makeRandomMove(){\n    let possible_moves = chess.moves({verbose:true});\n    let move = possible_moves[this.getRandomInt(possible_moves.length)]; \n    this.newMove(move.from, move.to)\n  }\n\n  getRandomInt(max) {\n    return Math.floor(Math.random() * max);\n  }\n\n\n  /**\n   * Method for handling new moves. Updates history (overrides if necessary) \n   * Checks for promotion (if a pawn reaches a respective square)\n   * otherwise passes move to chess.js and updates state \n   **/\n  newMove(from, to, promoteTo = false){\n    let fen_history = [...this.state.fen_history]; \n    let history = Object.assign({}, this.state.history);\n    let options = {from, to}; \n\n    if(this.state.selected_move<this.state.fen_history.length){ // Override if a previous move was selected\n      fen_history = fen_history.slice(0, this.state.selected_move+1);\n      let new_history = {}; \n      for(let [key, value] of Object.entries(history)){\n        if(key>=this.state.selected_move) break; \n        new_history[key] = value; \n      }\n        history = Object.assign({}, new_history);\n    }\n\n    if(promoteTo) options.promotion = promoteTo;\n    else{\n      if(this.isOnPromotionSquare(to, chess.turn()) && chess.get(from).type === 'p'){\n        if(this.state.promotion.from===null){ \n          this.openPromotionPrompt(from, to, this.colorConv(chess.turn()));\n          return;\n        }else{\n          options.promotion = promoteTo;\n        } \n      }\n    }\n\n    let res = chess.move(options);\n    \n    if(res){\n      fen_history.push(chess.fen());\n      history[this.state.selected_move] = {from: options.from, to: options.to, san: res.san};\n      if(chess.result()){ // If game over (for any reason)  \n        this.setState(prevState => (\n          {selected_move: prevState.selected_move+1, history, fen_history, result: chess.result()}\n        ));\n        return; \n      }\n      this.setState(prevState => (\n        {selected_move: prevState.selected_move+1, history, fen_history}\n      ));\n      return res.san; \n    }else{\n      console.log('Error making new move: '+res);\n      return false; \n    } \n  }\n\n  /*\n  ----------------------------------------------------------------------------------------------------------------------------------\n  ----------------------------------------------------         DOM            ------------------------------------------------------\n  ----------------------------------------------------------------------------------------------------------------------------------\n  */\n\n\n  highlightMoves(piece){\n    chess.moves({square:piece, verbose:true}).forEach(move=>{\n      this.highlightSquare(move.to, 'moveable'); \n    });\n  }\n\n  highlightSquare(square, highlightClass = 'highlighted'){\n    document.getElementById(square).classList.add(highlightClass);\n  }\n\n  removeClassFromAll = remove => {\n    document.querySelectorAll('.'+remove).forEach(el=>el.classList.remove(remove));\n  }\n\n  removeClassesFromAll = (...classes) => {\n    classes.forEach(e => document.querySelectorAll('.'+e).forEach(el=>el.classList.remove(e)));\n  }\n\n  hideBoardControl = () => {\n     this.removeClassFromAll('attacked');\n  }\n\n  /**\n   * Shows which squares are controlled how much by which color\n   * First removes all \n   * If a king is currently in check, only available moves (including blocks) are highlighted\n   * Otherwise calls the defended_pieces_all funtion from chess.js, which returns the number of attackers \n   * and defenders for each square. \n   * The ratio for each square is calculated and displayed by updating the respective variable in CSS for\n   * each square.  \n   **/\n  showBoardControl = (control_flag=undefined) => { \n    let show_control = (control_flag===undefined) ? this.state.show_control : control_flag;\n    this.removeClassesFromAll('attacked', 'kingcheck');\n    if(chess.in_check()){\n      let square = document.getElementById(chess.get_king());\n      square.classList.add('kingcheck');\n\n      if(!show_control) return; \n      chess.moves({verbose:true}).forEach(move=>{\n        let dom = document.getElementById(move.to);\n        dom.classList.add('attacked');\n        dom.style.setProperty(CONTROL_CLASS, '100%');\n      });\n      return;\n\n    }\n    if(!show_control) return; \n    let control = chess.defended_pieces_all(true, true, false);\n\n    for(let [square, value] of Object.entries(control)){\n      if(value.w>0||value.b>0){ \n        let dom = document.getElementById(square);\n        dom.classList.add('attacked');\n        let ratio = this.getRatio(value.w,value.b);\n        dom.style.setProperty(CONTROL_CLASS, ratio+'%');\n      }\n    } \n  }  \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  \n    <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}