{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/q/Documents/WebDocuments/ChessReact/chess/src/App.js\";\nimport './App.css';\nimport React, { Component } from 'react'; // import Board from './components/Board/Board';\n\nimport Moves from './components/Moves/Moves'; // import Square from './components/Square/Square';\n\nimport Squares from './components/Squares/Squares'; // TYPES (negative values for black)\n// PAWN - 1 \n// BISHOP - 2 \n// KNIGHT - 3 \n// ROOK - 4\n// QUEEN - 5 \n// KING - 6 \n\nconst startingPosition = [-4, -2, -3, -5, -6, -3, -2, -4, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 4, 2, 3, 5, 6, 3, 2, 4];\nconst rows = Array.from(Array(8).keys());\nconst columns = Array.from(Array(8).keys());\nconst conversion = [];\nconst rev_conversion = [];\nlet r = 0;\nlet c = 0;\nArray(64).fill(null).forEach((e, i) => {\n  conversion[i] = [r, c];\n  rev_conversion[Number('' + r + c)] = i;\n  c++;\n\n  if (c > 7) {\n    r++;\n    c = 0;\n  }\n});\n/*\n00 01 02 03 04 05 06 07 \n10 11 12 13 14 15 16 17 \n20 21 22 23 24 25 26 27 \n30 31 32 33 34 35 36 37 \n40 41 42 43 44 45 46 47 \n50 51 52 53 54 55 56 57 \n60 61 62 63 64 65 66 67 \n70 71 72 73 74 75 76 77 \n*/\n// const originalRank = {1: }\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.moveClick = number => {\n      console.log('move clicked', number);\n      this.setState(prevState => ({\n        selectedMove: number\n      }));\n    };\n\n    this.handleClick = square => {\n      let clicked = this.state.piece_clicked;\n\n      if (clicked) {\n        this.setState({\n          piece_clicked: false\n        }, this.newMove(clicked, square));\n      }\n    };\n\n    this.handlePieceClick = square => {\n      let clicked = this.state.piece_clicked;\n\n      if (!clicked) {\n        this.setState({\n          piece_clicked: square\n        });\n        console.log(this.availableMoves(square));\n      } else {\n        this.setState({\n          piece_clicked: false\n        }, this.newMove(clicked, square));\n      }\n    };\n\n    this.dropHandler = (e, target) => {\n      e.preventDefault();\n      let origin = e.dataTransfer.getData('text/plain');\n      this.newMove(origin, target); // e.target.classList.remove('dragover');\n      // let target = e.target.dataset.position; \n      // let origin = e.dataTransfer.getData(\"text/plain\");\n      // this.newMove(origin, target);\n    };\n\n    this.state = {\n      currentMove: 0,\n      lastMove: null,\n      colorToMove: 1,\n      piece_clicked: false,\n      selectedMove: 0,\n      positions: [startingPosition] // 64-Array \n\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Squares, {\n        position: this.state.positions[this.state.selectedMove],\n        onClick: this.handleClick,\n        pClick: this.handlePieceClick,\n        onDrop: this.dropHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"moves\",\n        children: [\" \", /*#__PURE__*/_jsxDEV(Moves, {\n          onClick: this.moveClick,\n          lastMove: this.state.lastMove\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 34\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this);\n  }\n\n  convertBack(row, column) {\n    return rev_conversion[Number('' + r + c)];\n  }\n\n  availableMoves(square) {\n    let moves = [];\n    let position = this.state.positions[this.state.positions.length - 1];\n    let piece = position[square];\n    if (piece === 0) return;\n    let [row, column] = conversion[square];\n    let multiplier = piece > 0 ? 1 : -1;\n\n    switch (piece) {\n      case 1:\n        // PAWN-white\n        if (row === 6 && !this.hasPiece(position[square - 16])) moves.push(square - 16); // 2 forward\n\n        if (!this.hasPiece(position[square - 8])) moves.push(square - 8); // 1 forward \n\n        if (column >= 1 && row >= 1 && this.hasOpposingPiece(this.convertBack[(row + 1, column - 1)])) moves.push(this.convertBack[(row + 1, column - 1)]);\n      // up-left-capture \n    }\n\n    return moves;\n  }\n\n  switchColor() {\n    return this.state.colorToMove === 1 ? -1 : 1;\n  }\n\n  getColor(square) {\n    return square < 0 ? -1 : 1;\n  }\n\n  hasPiece(square) {\n    return Math.abs(square) > 0;\n  }\n\n  hasOpposingPiece(square1, square2) {\n    return this.hasPiece(square2) && this.getColor(square1) !== this.getColor(square2);\n  }\n\n  newMove(from, to) {\n    let positions = JSON.parse(JSON.stringify(this.state.positions));\n    let old_position = Array.from(positions[positions.length - 1]);\n    let new_position = Array.from(old_position);\n    if (this.getColor(old_position[from]) !== this.state.colorToMove) return;\n\n    if (this.hasPiece(old_position[to])) {\n      if (this.getColor(old_position[from]) === this.getColor(old_position[to])) return;\n    }\n\n    let moved_piece = old_position[from];\n    new_position[to] = new_position[from];\n    new_position[from] = 0;\n    positions.push(new_position);\n    this.setState(prevState => ({\n      positions: positions,\n      lastMove: [prevState.currentMove, moved_piece, to],\n      currentMove: prevState.currentMove + 1,\n      selectedMove: prevState.selectedMove + 1,\n      colorToMove: this.switchColor()\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/q/Documents/WebDocuments/ChessReact/chess/src/App.js"],"names":["React","Component","Moves","Squares","startingPosition","rows","Array","from","keys","columns","conversion","rev_conversion","r","c","fill","forEach","e","i","Number","App","constructor","moveClick","number","console","log","setState","prevState","selectedMove","handleClick","square","clicked","state","piece_clicked","newMove","handlePieceClick","availableMoves","dropHandler","target","preventDefault","origin","dataTransfer","getData","currentMove","lastMove","colorToMove","positions","render","convertBack","row","column","moves","position","length","piece","multiplier","hasPiece","push","hasOpposingPiece","switchColor","getColor","Math","abs","square1","square2","to","JSON","parse","stringify","old_position","new_position","moved_piece"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, { Component } from 'react';\n// import Board from './components/Board/Board';\nimport Moves from './components/Moves/Moves';\n// import Square from './components/Square/Square';\nimport Squares from './components/Squares/Squares';\n\n\n// TYPES (negative values for black)\n// PAWN - 1 \n// BISHOP - 2 \n// KNIGHT - 3 \n// ROOK - 4\n// QUEEN - 5 \n// KING - 6 \n\nconst startingPosition = \n[\n-4, -2, -3, -5, -6, -3, -2, -4,\n-1, -1, -1, -1, -1, -1, -1, -1,\n0, 0, 0, 0, 0, 0, 0, 0,\n0, 0, 0, 0, 0, 0, 0, 0,\n0, 0, 0, 0, 0, 0, 0, 0,\n0, 0, 0, 0, 0, 0, 0, 0,\n1, 1, 1, 1, 1, 1, 1, 1,\n4, 2, 3, 5, 6, 3, 2, 4\n];\n\nconst rows = Array.from(Array(8).keys());\nconst columns = Array.from(Array(8).keys());\nconst conversion = [];\nconst rev_conversion = []; \nlet r = 0; let c = 0; \nArray(64).fill(null).forEach((e, i)=>{\n  conversion[i] = [r, c];\n  rev_conversion[Number(''+r+c)] = i;\n  c++; \n  if(c>7){\n    r++;\n    c=0;\n  }\n});\n\n/*\n00 01 02 03 04 05 06 07 \n10 11 12 13 14 15 16 17 \n20 21 22 23 24 25 26 27 \n30 31 32 33 34 35 36 37 \n40 41 42 43 44 45 46 47 \n50 51 52 53 54 55 56 57 \n60 61 62 63 64 65 66 67 \n70 71 72 73 74 75 76 77 \n*/\n\n// const originalRank = {1: }\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      currentMove: 0,\n      lastMove: null,\n      colorToMove: 1,\n      piece_clicked: false,\n      selectedMove: 0,\n      positions: [startingPosition], // 64-Array \n    };  \n  }\n\n  render(){\n    return(\n      <div className='container'>\n        <Squares position={this.state.positions[this.state.selectedMove]} onClick={this.handleClick} pClick={this.handlePieceClick} onDrop={this.dropHandler} /> \n        <div className='moves' > <Moves onClick={this.moveClick} lastMove={this.state.lastMove} /> </div>\n      </div> \n    );\n  } \n\n  convertBack(row, column){\n    return rev_conversion[Number(''+r+c)]; \n  }\n\n  availableMoves(square){\n    let moves = [];\n    let position = this.state.positions[this.state.positions.length-1];\n    let piece = position[square]; \n    if(piece===0) return;\n  \n    let [row, column] = conversion[square];\n    let multiplier = (piece>0) ? 1 : -1; \n    switch(piece){\n\n      case 1: // PAWN-white\n        if(row===6 && !this.hasPiece(position[square-16])) moves.push(square-16); // 2 forward\n        if(!this.hasPiece(position[square-8])) moves.push(square-8); // 1 forward \n        \n        if(column>=1 && row >=1 && this.hasOpposingPiece(this.convertBack[row+1, column-1])) moves.push(this.convertBack[row+1, column-1]); // up-left-capture \n        \n    }\n     \n    \n    return moves; \n  }\n\n  moveClick = (number) => {\n    console.log('move clicked',number);\n    this.setState(prevState=>({\n      selectedMove: number\n    }));\n  }\n\n  handleClick = (square) => {\n    let clicked = this.state.piece_clicked; \n    if(clicked){\n      this.setState({piece_clicked: false}, this.newMove(clicked, square));\n    }\n  }\n\n  handlePieceClick = (square) => {\n    let clicked = this.state.piece_clicked; \n    if(!clicked){\n      this.setState({piece_clicked: square})\n      console.log(this.availableMoves(square));\n    }else{\n      this.setState({piece_clicked: false}, this.newMove(clicked, square));\n    }\n  }\n\n  dropHandler = (e, target) => {\n    e.preventDefault();\n    let origin = e.dataTransfer.getData('text/plain'); \n    this.newMove(origin, target);\n    // e.target.classList.remove('dragover');\n    // let target = e.target.dataset.position; \n    // let origin = e.dataTransfer.getData(\"text/plain\");\n    // this.newMove(origin, target);\n  };\n\n  switchColor(){ return this.state.colorToMove === 1 ? -1 : 1; }\n\n  getColor(square){ return square<0 ? -1 : 1; }\n\n  hasPiece(square){ return Math.abs(square)>0; }\n\n  hasOpposingPiece(square1, square2){\n    return (this.hasPiece(square2) && this.getColor(square1)!==this.getColor(square2));\n  }\n\n  newMove(from, to){\n    let positions = JSON.parse(JSON.stringify(this.state.positions));\n    let old_position = Array.from(positions[positions.length-1]);\n    let new_position = Array.from(old_position);\n\n    if(this.getColor(old_position[from])!==this.state.colorToMove) return; \n    if(this.hasPiece(old_position[to])){ \n      if(this.getColor(old_position[from])===this.getColor(old_position[to])) return; \n    }\n    let moved_piece = old_position[from];\n    new_position[to] = new_position[from];\n    new_position[from] = 0;\n    positions.push(new_position);\n\n    this.setState(prevState=>({\n      positions: positions,\n      lastMove: [prevState.currentMove, moved_piece, to],\n      currentMove: prevState.currentMove+1,\n      selectedMove: prevState.selectedMove+1,\n      colorToMove: this.switchColor()\n    }));\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}