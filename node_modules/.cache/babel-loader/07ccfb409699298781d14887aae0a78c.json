{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/q/Documents/WebDocuments/chess/front/src/App.js\";\nimport './App.css';\nimport React, { Component } from 'react';\nimport Moves from './components/Moves/Moves';\nimport PopUp from './components/PopUp/PopUp';\nimport Button from './components/Button/Button';\nimport ImageButton from './components/ImageButton/ImageButton';\nimport PGNDialog from './components/PGNDialog/PGNDialog';\nimport GamesList from './components/GamesList/GamesList';\nimport PromotionPrompt from './components/PromotionPrompt/PromotionPrompt'; // import Squares from './components/Squares/Squares';\n\nimport Draggable from 'react-draggable';\nimport * as ChessJS from 'chess.js';\nconst Chess = typeof ChessJS === \"function\" ? ChessJS : ChessJS.Chess;\nconst chess = new Chess();\nconst squareID = [\"a8\", \"b8\", \"c8\", \"d8\", \"e8\", \"f8\", \"g8\", \"h8\", \"a7\", \"b7\", \"c7\", \"d7\", \"e7\", \"f7\", \"g7\", \"h7\", \"a6\", \"b6\", \"c6\", \"d6\", \"e6\", \"f6\", \"g6\", \"h6\", \"a5\", \"b5\", \"c5\", \"d5\", \"e5\", \"f5\", \"g5\", \"h5\", \"a4\", \"b4\", \"c4\", \"d4\", \"e4\", \"f4\", \"g4\", \"h4\", \"a3\", \"b3\", \"c3\", \"d3\", \"e3\", \"f3\", \"g3\", \"h3\", \"a2\", \"b2\", \"c2\", \"d2\", \"e2\", \"f2\", \"g2\", \"h2\", \"a1\", \"b1\", \"c1\", \"d1\", \"e1\", \"f1\", \"g1\", \"h1\"];\nconst SQUARES = {\n  a8: 0,\n  b8: 1,\n  c8: 2,\n  d8: 3,\n  e8: 4,\n  f8: 5,\n  g8: 6,\n  h8: 7,\n  a7: 16,\n  b7: 17,\n  c7: 18,\n  d7: 19,\n  e7: 20,\n  f7: 21,\n  g7: 22,\n  h7: 23,\n  a6: 32,\n  b6: 33,\n  c6: 34,\n  d6: 35,\n  e6: 36,\n  f6: 37,\n  g6: 38,\n  h6: 39,\n  a5: 48,\n  b5: 49,\n  c5: 50,\n  d5: 51,\n  e5: 52,\n  f5: 53,\n  g5: 54,\n  h5: 55,\n  a4: 64,\n  b4: 65,\n  c4: 66,\n  d4: 67,\n  e4: 68,\n  f4: 69,\n  g4: 70,\n  h4: 71,\n  a3: 80,\n  b3: 81,\n  c3: 82,\n  d3: 83,\n  e3: 84,\n  f3: 85,\n  g3: 86,\n  h3: 87,\n  a2: 96,\n  b2: 97,\n  c2: 98,\n  d2: 99,\n  e2: 100,\n  f2: 101,\n  g2: 102,\n  h2: 103,\n  a1: 112,\n  b1: 113,\n  c1: 114,\n  d1: 115,\n  e1: 116,\n  f1: 117,\n  g1: 118,\n  h1: 119\n};\n/*\nrnbqkbnr/pp2p1Pp/2p5/8/8/8/PPpP1PPP/RNBQKBNR w KQkq - 0 1\n  => PROMOTION TEST white\n\nrnbqkbnr/pp2p1Pp/2p5/8/8/8/PPpP1PPP/RNBQKBNR b KQkq - 0 1\n  => PROMOTION TEST black\n\n\n7 move game  -> R0Nz054g \n36 move game -> u2qos9uM \n60 move game -> 0amFRLRg \n*/\n\nconst BOARD_ID = 'chessboard';\nconst AUTOPLAY_SPEED = 200;\nconst SQUARE_SIZE = 100;\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.handleEvalClick = () => {// let pgn = \"1. d4 d5 2. c4 c6 3. Nf3 Nf6 4. Nc3 e6 5. e3 Nbd7 6. Bd3 dxc4 7. Bxc4 b5 8. Bd3 Bd6 9. O-O O-O 10. Qc2 Bb7 11. a3 Rc8 12. Ng5 c5 13. Nxh7 Ng4 14. f4 cxd4 15. exd4 Bc5 16. Be2 Nde5 17. Bxg4 Bxd4+ 18. Kh1 Nxg4 19. Nxf8 f5 20. Ng6 Qf6 21. h3 Qxg6 22. Qe2 Qh5 23. Qd3 Be3 0-1\";\n      // this.loadPGN(pgn);\n      // if(chess.in_check()) console.log(chess.get_kings());\n    };\n\n    this.keyDownHandler = e => {\n      switch (e.keyCode) {\n        case 39:\n          // Right arrow \n          e.preventDefault();\n\n          if (this.state.selected_move + 1 <= this.state.fen_history.length - 1) {\n            // this.setState(prevState=>({selected_move: prevState.selected_move+1}), this.showBoardControl());  \n            this.setState(prevState => ({\n              selected_move: prevState.selected_move + 1\n            })); // this.removeClassFromAll('selected');\n            // document.getElementById('m'+this.state.selected_move+1).classList.add('selected');\n          }\n\n          break;\n\n        case 37:\n          // Left arrow \n          e.preventDefault();\n\n          if (this.state.selected_move >= 1) {\n            this.setState(prevState => ({\n              selected_move: prevState.selected_move - 1\n            })); // this.setState(prevState=>({selected_move: prevState.selected_move-1}), this.showBoardControl());\n            // this.removeClassFromAll('selected');\n            // document.getElementById('m'+this.state.selected_move-1).classList.add('selected');\n          }\n\n          break;\n\n        case 27:\n          // esc \n          e.preventDefault();\n\n          if (this.state.popUp) {\n            this.setState({\n              popUp: false\n            });\n          }\n\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.dragStartHandler = e => {\n      // e: dragEvent, i: original square of dragged piece\n      let square = e.target.dataset.position;\n      e.dataTransfer.effectAllowed = \"all\";\n      e.dataTransfer.dropEffect = \"move\";\n      e.dataTransfer.setData(\"text/plain\", square);\n      requestAnimationFrame(function () {\n        e.target.classList.add('hide');\n      });\n      this.highlightMoves(square);\n    };\n\n    this.dragEndHandler = e => {\n      e.preventDefault();\n      requestAnimationFrame(function () {\n        e.target.classList.remove('hide');\n      });\n    };\n\n    this.dropHandler = e => {\n      e.preventDefault();\n      let target = e.target.dataset.position;\n      this.removeClassesFromAll('dragover', 'moveable');\n      let origin = e.dataTransfer.getData('text/plain');\n\n      if (this.newMove(origin, target)) {\n        this.removeClassesFromAll('moveable', 'active');\n      }\n    };\n\n    this.dragOverHandler = e => {\n      e.preventDefault(e);\n      requestAnimationFrame(function () {\n        e.target.classList.add('dragover');\n      });\n    };\n\n    this.dragLeaveHandler = e => {\n      e.preventDefault();\n      requestAnimationFrame(function () {\n        e.target.classList.remove('dragover');\n      });\n    };\n\n    this.handleControlClick = () => {\n      if (!this.state.showControl) {\n        this.setState({\n          showControl: true\n        });\n      } else {\n        this.setState({\n          showControl: false\n        });\n      }\n    };\n\n    this.handleGamesClick = () => {\n      fetch('http://localhost:3000/test', {\n        method: 'GET'\n      }).then(res => res.text()).then(res => {\n        this.loadGames(res, '###');\n      });\n    };\n\n    this.handleFlipClick = () => {\n      this.setState({\n        flipped: true\n      });\n    };\n\n    this.handleHideClick = () => {\n      if (this.state.showPieces) {\n        document.getElementById('chessboard').classList.add('hidepieces');\n        this.setState({\n          showPieces: false\n        });\n      } else {\n        document.getElementById('chessboard').classList.remove('hidepieces');\n        this.setState({\n          showPieces: true\n        });\n      } // console.log(chess.boardFull());\n\n    };\n\n    this.serverClickStudy = () => {\n      // this.loadPGNfromServer('https://lichess.org/study/WtwmeX4m/FzpbQLUx', {\n      //   credentials: 'same-origin',\n      //   Access-Control-Allow-Credentials\n      //   mode: 'same-origin'\n      // });\n      fetch('http://localhost:3001/game?all=true').then(res => res.json()).then(res => {\n        let closePopup = this.closePopup; // console.log(res);\n\n        this.setState({\n          popUp: {\n            content: /*#__PURE__*/_jsxDEV(GamesList, {\n              games: res,\n              closePopup: closePopup\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 336,\n              columnNumber: 22\n            }, this),\n            closePopup\n          }\n        });\n      });\n    };\n\n    this.serverClick = () => {\n      this.setState({\n        popUp: {\n          text: 'Enter URL',\n          textarea_class: 'url',\n          closePopup: this.closeAndLoad\n        }\n      });\n    };\n\n    this.pgnClick = () => {\n      this.setState({\n        popUp: {\n          content: /*#__PURE__*/_jsxDEV(PGNDialog, {\n            closePopup: this.closePopup\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 37\n          }, this),\n          closePopup: this.closePopup\n        }\n      });\n    };\n\n    this.handleFENClick = () => {\n      this.setState({\n        popUp: {\n          text: 'Enter FEN',\n          textarea_class: 'pgn',\n          closePopup: this.closePopupFEN\n        }\n      });\n    };\n\n    this.moveClick = number => {\n      // this.setState({colorToMove: chess.turn(), selected_move:number+1}, this.showBoardControl());\n      this.setState({\n        selected_move: number + 1\n      });\n    };\n\n    this.handleAutoplayClick = () => {\n      if (!this.state.autoplay) {\n        this.setState(state => ({\n          autoplay: !state.autoplay\n        }), () => this.autoplay(this.state.selected_move, this.state.history.length));\n      } else {\n        this.setState(state => ({\n          autoplay: !state.autoplay\n        }));\n      }\n    };\n\n    this.handleClick = e => {\n      let square = e.target.dataset.position;\n      let clicked = this.state.piece_clicked;\n\n      if (clicked) {\n        if (this.newMove(clicked, square)) {\n          this.removeClassesFromAll('moveable', 'active');\n          this.setState({\n            piece_clicked: false\n          }); // this.showBoardControl();\n        } else {// this.removeClassFromAll('active'); \n            // this.setState({piece_clicked: false })\n          }\n      }\n    };\n\n    this.handlePieceClick = e => {\n      let square = e.target.dataset.position;\n      let clicked = this.state.piece_clicked;\n\n      if (!clicked) {\n        if (this.pieceIsTurnColor(square)) {\n          document.getElementById(square).classList.add('active');\n          this.highlightMoves(square);\n          this.setState({\n            piece_clicked: square\n          });\n        }\n      } else {\n        this.removeClassesFromAll('active', 'moveable');\n\n        if (this.squaresOfSameColor(square, clicked)) {\n          // Wenn selbfarbiges, anderes piece gedr√ºckt \n          document.getElementById(square).classList.add('active');\n          this.highlightMoves(square);\n          this.setState({\n            piece_clicked: square\n          });\n        } else {\n          // Capture \n          if (this.newMove(clicked, square)) {\n            this.setState({\n              piece_clicked: null\n            }); // this.showBoardControl();\n          }\n        }\n      }\n    };\n\n    this.closeAndLoad = url => {\n      this.setState({\n        popUp: false\n      });\n\n      if (url) {\n        this.loadPGNfromServer('https://lichess.org/game/export/' + url);\n      }\n\n      ;\n    };\n\n    this.closePopup = text => {\n      this.setState({\n        popUp: false\n      });\n      if (text) this.loadPGN(text);\n    };\n\n    this.closePopupFEN = text => {\n      if (text) this.loadFEN(text);\n      this.setState({\n        popUp: false\n      });\n    };\n\n    this.promotionHandler = (piece, from, to) => {\n      this.setState({\n        promotion: {\n          from: null,\n          to: null,\n          color: null\n        }\n      });\n      this.newMove(from, to, piece);\n    };\n\n    this.toggleConvert = toggle => toggle ? 'on' : 'off';\n\n    this.cleanUpSquare = square => square.length > 2 ? square.slice(1) : square;\n\n    this.moveIsPawnMove = move => move.length === 3 && move.charAt(0).toLowerCase() === 'p';\n\n    this.getOtherChessColor = () => chess.turn() === chess.WHITE ? chess.BLACK : chess.WHITE;\n\n    this.getColorToMoveByMoveNumber = number => number % 2 === 0 ? 1 : -1;\n\n    this.squareColorConv = color => {\n      if (color === 'light') return 'w';else if (color === 'dark') return 'b';\n      return false;\n    };\n\n    this.colorConv = color => color === 'w' ? 'white' : 'black';\n\n    this.squaresOfSameColor = (one, two) => chess.get(one).color === chess.get(two).color;\n\n    this.pieceIsTurnColor = piece => chess.get(piece).color === chess.turn();\n\n    this.removeClassFromAll = remove => {\n      document.querySelectorAll('.' + remove).forEach(el => el.classList.remove(remove));\n    };\n\n    this.removeClassesFromAll = (...classes) => {\n      classes.forEach(e => document.querySelectorAll('.' + e).forEach(el => el.classList.remove(e)));\n    };\n\n    this.showBoardControl = () => {\n      this.removeClassesFromAll('attacked', 'kingcheck');\n\n      if (chess.in_check()) {\n        let square = document.getElementById(chess.get_king());\n        square.classList.add('kingcheck');\n        return;\n      }\n\n      let control = chess.defended_pieces_all(true, true);\n      console.log(control);\n\n      for (let [square, value] of Object.entries(control)) {\n        if (value.w > 0 || value.b > 0) {\n          let dom = document.getElementById(square);\n          dom.classList.add('attacked');\n          console.log(square + ': ' + this.getRatio(value.w, value.b) + '%');\n          if (this.state.weighted) dom.style.setProperty('--separator', this.getRatio(value.w, value.b) + '%');else dom.style.setProperty('--separator', this.getRatio(value.w, value.b) + '%');\n        }\n      }\n    };\n\n    this.moveIsPawnMove = this.moveIsPawnMove.bind(this);\n    this.state = {\n      selected_move: 0,\n      piece_clicked: false,\n      // board: chess.board().flat(),\n      history: [],\n      // single moves \n      fen_history: [chess.fen()],\n      // all moves, each represented by fen \n      flipped: false,\n      loaded_game: null,\n      //PGN of loaded game \n      popUp: false,\n      showControl: true,\n      weighted: true,\n      showGames: false,\n      result: '',\n      showPieces: true,\n      promotion: {\n        from: null,\n        to: null,\n        color: null\n      },\n      autoplay: false\n    };\n  }\n\n  render() {\n    console.log('Render'); // let arr = this.state.flipped ? chess.board().flat().reverse() : chess.board().flat();\n\n    chess.load(this.state.fen_history[this.state.selected_move]);\n    let colorToMove = chess.turn();\n    let arr = this.state.flipped ? Array.prototype.reverse.call(chess.board().flat()) : chess.board().flat();\n    let squares_ids = this.state.flipped ? squareID.reverse() : squareID;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        id: \"title\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"visual chess\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"chessboard\",\n        className: \"chessboard\",\n        children: arr.map((square, i) => {\n          return square ? /*#__PURE__*/_jsxDEV(\"div\", {\n            onDragOver: this.dragOverHandler,\n            onDragLeave: this.dragLeaveHandler,\n            onDrop: this.dropHandler,\n            \"data-square\": SQUARES[squares_ids[i]],\n            id: squares_ids[i],\n            \"data-position\": squares_ids[i],\n            className: \"square\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `piece ${this.colorConv(square.color)} ${square.type}`,\n              draggable: \"true\",\n              \"data-position\": squares_ids[i],\n              onDragStart: this.dragStartHandler,\n              onDragEnd: this.dragEndHandler,\n              onClick: this.handlePieceClick\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 19\n            }, this)\n          }, squares_ids[i], false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            \"data-square\": SQUARES[squares_ids[i]],\n            \"data-position\": squares_ids[i],\n            id: squares_ids[i],\n            onDragOver: this.dragOverHandler,\n            onDragLeave: this.dragLeaveHandler,\n            onClick: this.handleClick,\n            onDrop: this.dropHandler,\n            className: \"square\"\n          }, squares_ids[i], false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Moves, {\n        onClick: this.moveClick,\n        selected_move: this.state.selected_move,\n        moves: this.state.history,\n        colorToMove: colorToMove,\n        result: this.state.result\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button_wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(ImageButton, {\n          button: \"pgn_button\",\n          altText: \"Enter PGN\",\n          onClick: this.pgnClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ImageButton, {\n          button: \"play_button\",\n          altText: \"Turn Autoplay on\",\n          state: this.toggleConvert(this.state.autoplay),\n          onClick: this.handleAutoplayClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          text: \"Flip Board\",\n          onClick: this.handleFlipClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          text: \"Enter FEN\",\n          onClick: this.handleFENClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          text: \"Enter Lichess Game ID\",\n          onClick: this.serverClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          text: \"Enter Lichess Study Chapter\",\n          onClick: this.serverClickStudy\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ImageButton, {\n          button: \"pieces_button\",\n          state: this.toggleConvert(this.state.showPieces),\n          altText: \"Hide Pieces\",\n          onClick: this.handleHideClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ImageButton, {\n          button: \"control_button_on\",\n          altText: \"Hide Control\",\n          onClick: this.handleControlClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          text: \"Famous Games\",\n          onClick: this.handleGamesClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), this.state.promotion.from ? /*#__PURE__*/_jsxDEV(PromotionPrompt, {\n        onClick: this.promotionHandler,\n        from: this.state.promotion.from,\n        to: this.state.promotion.to,\n        color: this.state.promotion.color\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 11\n      }, this) : '', this.state.popUp ? /*#__PURE__*/_jsxDEV(PopUp, {\n        props: this.state.popUp\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 11\n      }, this) : '']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this);\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.keyDownHandler);\n    if (this.state.showControl) this.showBoardControl();\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.showPieces !== nextState.showPieces) return false;\n    return true;\n  }\n\n  componentDidUpdate() {\n    if (this.state.selected_move > 0) {// For highlighting the last move\n      // console.log(this.state.history.pop());\n    }\n\n    if (this.state.showControl) this.showBoardControl();\n  }\n  /*\n  ----------------------------------------------------------------------------------------------------------------------------------\n  ---------------------------------------------------- EVENT HANLDERS --------------------------------------------------------------\n  ----------------------------------------------------------------------------------------------------------------------------------\n  */\n\n\n  /*\n  ----------------------------------------------------------------------------------------------------------------------------------\n  ----------------------------------------------------        UTILITY        -------------------------------------------------------\n  ----------------------------------------------------------------------------------------------------------------------------------\n  */\n  autoplay(point, end) {\n    ++point;\n    if (point > end || !this.state.autoplay) return;\n    this.setState({\n      selected_move: point\n    });\n    setTimeout(() => this.autoplay(point, end), AUTOPLAY_SPEED);\n  }\n\n  loadPGNfromServer(url) {\n    fetch(url).then(res => res.text()).then(res => this.loadPGN(res));\n  }\n\n  loadPGN(pgn) {\n    let r = chess.load_pgn(pgn);\n    let headers = chess.header();\n    let board = document.getElementById(BOARD_ID);\n\n    if (headers.Black) {\n      let content = headers.BlackTitle ? `[${headers.BlackTitle}]` + ' ' + headers.Black : headers.Black;\n      board.dataset.blackplayer = content;\n      board.classList.add('blackplayer');\n    } else board.classList.remove('blackplayer');\n\n    if (headers.White) {\n      let content = headers.WhiteTitle ? `[${headers.WhiteTitle}]` + ' ' + headers.White : headers.White;\n      board.dataset.whiteplayer = content;\n      board.classList.add('whiteplayer');\n    } else board.classList.remove('whiteplayer');\n\n    let result = headers.Result ? 'Result: ' + headers.Result : '';\n    if (headers.Termination) result += ` (${headers.Termination})`;\n    console.log(headers);\n\n    if (r) {\n      let history = chess.history();\n      chess.reset();\n      let fen_history = [chess.fen()];\n      history.forEach(e => {\n        chess.move(e);\n        fen_history.push(chess.fen());\n      }); // let fen_history = history.map(e => {\n      //   chess.move(e);\n      //   return chess.fen();   \n      // });\n\n      chess.load(fen_history[0]); // this.setState({history, fen_history, loaded_game: pgn, selected_move: 0}, this.showBoardControl());\n\n      this.setState({\n        history,\n        fen_history,\n        loaded_game: pgn,\n        selected_move: 0,\n        result\n      });\n    } else console.log(r);\n  }\n\n  loadFEN(fen) {\n    let r = chess.load(fen);\n    let fen_history = [chess.fen()];\n    let history = [];\n    this.setState({\n      fen_history,\n      selected_move: 0\n    });\n    console.log(r);\n  } // If square is of format piece-square, remove piece (e.g. ba8 => a8) \n\n\n  // removeEnPassantFromFen = (fen) => {\n  //    var tokens = fen.split(/\\s+/);\n  //    tokens[3] = '-';\n  //    return tokens.join(' ');\n  // }\n  getRatio(w, b) {\n    if (w === 0 && b === 0) return 0;\n    let sum = w + b;\n    let whiteshare = w / sum * 100;\n    return whiteshare;\n  }\n\n  // diagonalPawnMoves(square, color){\n  //   if(this.isOnFirstOrLastRank(square)) return false; \n  //   let moves = [];\n  //   let [l, r] = color==='w' ? [-9, -7] : [7, 9];\n  //   switch(this.isOnEdge(square)){\n  //     case 0:\n  //       moves.push(squareID[square+l], squareID[square+r]);\n  //       break;\n  //     case 1: \n  //       moves.push(squareID[square+r]);\n  //       break;\n  //     case 2: \n  //       moves.push(squareID[square+l]);\n  //       break;\n  //     default: moves.push(squareID[square+l], squareID[square+r]);\n  //       break; \n  //   }\n  //   return moves;\n  // }\n  isOnFirstOrLastRank(square) {\n    return square >= 0 && square <= 7 || square >= 56 && square <= 63;\n  }\n\n  getRowFromSquare(square) {\n    return square.charAt(1);\n  }\n\n  isOnPromotionSquare(square, color) {\n    return color == 'w' ? this.getRowFromSquare(square) == 8 : this.getRowFromSquare(square) == 1;\n  }\n  /*\n  return 1 ... left Edge, \n         2 ... right edge \n         0 ... not on edge\n  */\n\n\n  isOnEdge(square) {\n    // if([0,8,16,24,32,40,48,56].includes(square)) return 1;\n    if (Number(square) % 8 === 0) return 1; // if([7,15,23,31,39,47,55,63].includes(square)) return 2; \n\n    if (Number(square) % 7 === 0) return 2;\n    return 0;\n  }\n  /*\n  ----------------------------------------------------------------------------------------------------------------------------------\n  ----------------------------------------------------     CHESS STUFF    ----------------------------------------------------------\n  ----------------------------------------------------------------------------------------------------------------------------------\n  */\n\n\n  openPromotionPrompt(from, to, color) {\n    this.setState({\n      promotion: {\n        from,\n        to,\n        color\n      }\n    }, () => {\n      let promotion = document.querySelector('.promotion_prompt');\n      let rect = document.getElementById(this.state.promotion.to).getBoundingClientRect();\n      let color = this.state.promotion.color;\n      promotion.style.left = rect.left + 'px';\n      console.log(color);\n      promotion.style.top = color == 'black' ? `${rect.top - 3 * SQUARE_SIZE}px` : `${rect.top}px`;\n    });\n  }\n\n  newMove(from, to, promoteTo = false) {\n    let fen_history = [...this.state.fen_history];\n    let history = [...this.state.history];\n    let options = {\n      from,\n      to\n    };\n\n    if (this.state.selected_move < this.state.history.length) {\n      // Override if a previous move was selected\n      history = history.slice(0, this.state.selected_move);\n      fen_history = fen_history.slice(0, this.state.selected_move + 1);\n    }\n\n    if (promoteTo) options.promotion = promoteTo;else {\n      if (this.isOnPromotionSquare(to, chess.turn()) && chess.get(from).type == 'p') {\n        // options.promotion = 'q';\n        if (this.state.promotion.from == null) {\n          this.openPromotionPrompt(from, to, this.colorConv(chess.turn()), this.newMove);\n          return;\n        } else {\n          options.promotion = promoteTo;\n        }\n      }\n    }\n    let res = chess.move(options);\n\n    if (res) {\n      fen_history.push(chess.fen());\n      history.push(res.san);\n      this.setState(prevState => ({\n        selected_move: prevState.selected_move + 1,\n        history,\n        fen_history\n      }));\n      return res.san;\n    } else {\n      console.log('Error making new move: ' + res);\n      return false;\n    }\n  } // switchColor = () => this.state.colorToMove === 1 ? -1 : 1;\n\n  /*\n  ----------------------------------------------------------------------------------------------------------------------------------\n  ----------------------------------------------------         DOM            ------------------------------------------------------\n  ----------------------------------------------------------------------------------------------------------------------------------\n  */\n\n\n  highlightMoves(piece) {\n    chess.moves({\n      square: piece,\n      verbose: true\n    }).forEach(move => {\n      document.getElementById(move.to).classList.add('moveable');\n    });\n  }\n\n  /*showBoardControl_old = () => { \n    let squares = this.initSquares();\n    let turn = chess.turn(); \n    let other_turn = this.getOtherChessColor();\n     let defends_other = chess.defended_pieces(other_turn, true, true);\n    // console.log('defends_other', defends_other);\n    // console.log(chess.boardFull());\n     let defends = chess.defended_pieces(turn, true, true);\n    // console.log('defends', defends);\n      // Defends = object, only own color  \n    // keys: defended squares/pieces  (format e.g. 'bc8' or 'c2')\n    // values: defending square/piece (format e.g. 'pd7')\n    for (let [key, value] of Object.entries(defends)){ \n      key = this.cleanUpSquare(key);  //check whether key is square or piece \n      if(value.length>0){\n        try{\n          // squares[key][turn] += value.filter(move => !this.moveIsPawnMove(move)).length;\n          // squares[square][turn].push(value.map(e=>e.slice(1)));\n          squares[key][turn]+=value.length;\n        }catch(err){\n          console.error('Error', err);\n          console.log(` Vars: value: ${value}, key: ${key} `);\n        }\n      } \n    } \n    for (let [key, value] of Object.entries(defends_other)){\n      // console.log(`value: ${value}, key: ${key}, moveIsPawnMove: ${this.moveIsPawnMove(value)}`);\n      key = this.cleanUpSquare(key);  //check whether key is square or piece \n      if(value.length>0){\n        // let square = key.slice(1);\n        try{\n          // squares[key][other_turn] += value.filter(move => !this.moveIsPawnMove(move)).length;\n          // squares[square][turn].push(value.map(e=>e.slice(1)));\n          squares[key][other_turn]+=value.length;\n        }catch(err){\n          console.error('Error', err);\n          console.log(` Vars: value: ${value}, key: ${key} `);\n        }\n      } \n    }\n    // console.log(squares);\n     this.removeClassFromAll('attacked');\n    for (let [square, value] of Object.entries(squares)) {\n      if(value.w>0||value.b>0){ \n        let dom = document.getElementById(square);\n        dom.classList.add('attacked');\n        dom.style.setProperty('--separator', this.getRatio(value.w,value.b)+'%');\n      }\n    }\n  }*/\n  loadGames(text, separator) {\n    let split = text.split(separator);\n    console.log(split[0]);\n    this.loadPGN(split[0]);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/q/Documents/WebDocuments/chess/front/src/App.js"],"names":["React","Component","Moves","PopUp","Button","ImageButton","PGNDialog","GamesList","PromotionPrompt","Draggable","ChessJS","Chess","chess","squareID","SQUARES","a8","b8","c8","d8","e8","f8","g8","h8","a7","b7","c7","d7","e7","f7","g7","h7","a6","b6","c6","d6","e6","f6","g6","h6","a5","b5","c5","d5","e5","f5","g5","h5","a4","b4","c4","d4","e4","f4","g4","h4","a3","b3","c3","d3","e3","f3","g3","h3","a2","b2","c2","d2","e2","f2","g2","h2","a1","b1","c1","d1","e1","f1","g1","h1","BOARD_ID","AUTOPLAY_SPEED","SQUARE_SIZE","App","constructor","handleEvalClick","keyDownHandler","e","keyCode","preventDefault","state","selected_move","fen_history","length","setState","prevState","popUp","dragStartHandler","square","target","dataset","position","dataTransfer","effectAllowed","dropEffect","setData","requestAnimationFrame","classList","add","highlightMoves","dragEndHandler","remove","dropHandler","removeClassesFromAll","origin","getData","newMove","dragOverHandler","dragLeaveHandler","handleControlClick","showControl","handleGamesClick","fetch","method","then","res","text","loadGames","handleFlipClick","flipped","handleHideClick","showPieces","document","getElementById","serverClickStudy","json","closePopup","content","serverClick","textarea_class","closeAndLoad","pgnClick","handleFENClick","closePopupFEN","moveClick","number","handleAutoplayClick","autoplay","history","handleClick","clicked","piece_clicked","handlePieceClick","pieceIsTurnColor","squaresOfSameColor","url","loadPGNfromServer","loadPGN","loadFEN","promotionHandler","piece","from","to","promotion","color","toggleConvert","toggle","cleanUpSquare","slice","moveIsPawnMove","move","charAt","toLowerCase","getOtherChessColor","turn","WHITE","BLACK","getColorToMoveByMoveNumber","squareColorConv","colorConv","one","two","get","removeClassFromAll","querySelectorAll","forEach","el","classes","showBoardControl","in_check","get_king","control","defended_pieces_all","console","log","value","Object","entries","w","b","dom","getRatio","weighted","style","setProperty","bind","fen","loaded_game","showGames","result","render","load","colorToMove","arr","Array","prototype","reverse","call","board","flat","squares_ids","map","i","type","componentDidMount","addEventListener","shouldComponentUpdate","nextProps","nextState","componentDidUpdate","point","end","setTimeout","pgn","r","load_pgn","headers","header","Black","BlackTitle","blackplayer","White","WhiteTitle","whiteplayer","Result","Termination","reset","push","sum","whiteshare","isOnFirstOrLastRank","getRowFromSquare","isOnPromotionSquare","isOnEdge","Number","openPromotionPrompt","querySelector","rect","getBoundingClientRect","left","top","promoteTo","options","san","moves","verbose","separator","split"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, { Component } from 'react';\nimport Moves from './components/Moves/Moves';\nimport PopUp from './components/PopUp/PopUp';\nimport Button from './components/Button/Button';\nimport ImageButton from './components/ImageButton/ImageButton';\nimport PGNDialog from './components/PGNDialog/PGNDialog';\nimport GamesList from './components/GamesList/GamesList';\nimport PromotionPrompt from './components/PromotionPrompt/PromotionPrompt';\n// import Squares from './components/Squares/Squares';\nimport Draggable from 'react-draggable';\nimport * as ChessJS from 'chess.js';\n\nconst Chess = typeof ChessJS === \"function\" ? ChessJS : ChessJS.Chess;\nconst chess = new Chess();\n\nconst squareID = [\"a8\", \"b8\", \"c8\", \"d8\", \"e8\", \"f8\", \"g8\", \"h8\", \"a7\", \"b7\", \"c7\", \"d7\", \"e7\", \"f7\", \"g7\", \"h7\", \"a6\", \"b6\", \"c6\", \"d6\", \"e6\", \"f6\", \"g6\", \"h6\", \"a5\", \"b5\", \"c5\", \"d5\", \"e5\", \"f5\", \"g5\", \"h5\", \"a4\", \"b4\", \"c4\", \"d4\", \"e4\", \"f4\", \"g4\", \"h4\", \"a3\", \"b3\", \"c3\", \"d3\", \"e3\", \"f3\", \"g3\", \"h3\", \"a2\", \"b2\", \"c2\", \"d2\", \"e2\", \"f2\", \"g2\", \"h2\", \"a1\", \"b1\", \"c1\", \"d1\", \"e1\", \"f1\", \"g1\", \"h1\"];\nconst SQUARES = {\n    a8:   0, b8:   1, c8:   2, d8:   3, e8:   4, f8:   5, g8:   6, h8:   7,\n    a7:  16, b7:  17, c7:  18, d7:  19, e7:  20, f7:  21, g7:  22, h7:  23,\n    a6:  32, b6:  33, c6:  34, d6:  35, e6:  36, f6:  37, g6:  38, h6:  39,\n    a5:  48, b5:  49, c5:  50, d5:  51, e5:  52, f5:  53, g5:  54, h5:  55,\n    a4:  64, b4:  65, c4:  66, d4:  67, e4:  68, f4:  69, g4:  70, h4:  71,\n    a3:  80, b3:  81, c3:  82, d3:  83, e3:  84, f3:  85, g3:  86, h3:  87,\n    a2:  96, b2:  97, c2:  98, d2:  99, e2: 100, f2: 101, g2: 102, h2: 103,\n    a1: 112, b1: 113, c1: 114, d1: 115, e1: 116, f1: 117, g1: 118, h1: 119\n  };\n\n\n/*\nrnbqkbnr/pp2p1Pp/2p5/8/8/8/PPpP1PPP/RNBQKBNR w KQkq - 0 1\n  => PROMOTION TEST white\n\nrnbqkbnr/pp2p1Pp/2p5/8/8/8/PPpP1PPP/RNBQKBNR b KQkq - 0 1\n  => PROMOTION TEST black\n\n\n7 move game  -> R0Nz054g \n36 move game -> u2qos9uM \n60 move game -> 0amFRLRg \n*/\n\nconst BOARD_ID = 'chessboard'; \nconst AUTOPLAY_SPEED = 200; \nconst SQUARE_SIZE = 100; \n\nclass App extends Component {\n  constructor(){\n    super();\n    this.moveIsPawnMove = this.moveIsPawnMove.bind(this);\n    this.state = {\n      selected_move: 0,\n      piece_clicked: false,\n      // board: chess.board().flat(),\n      history: [], // single moves \n      fen_history: [chess.fen()], // all moves, each represented by fen \n      flipped: false,\n      loaded_game: null, //PGN of loaded game \n      popUp: false, \n      showControl: true,\n      weighted: true,\n      showGames: false,\n      result: '',\n      showPieces: true,\n      promotion: {\n        from: null,\n        to: null,\n        color: null\n      },\n      autoplay: false\n    };  \n  }\n\n  render(){\n    console.log('Render');\n    // let arr = this.state.flipped ? chess.board().flat().reverse() : chess.board().flat();\n    chess.load(this.state.fen_history[this.state.selected_move]);\n    let colorToMove = chess.turn();\n    let arr = this.state.flipped ? Array.prototype.reverse.call(chess.board().flat()) : chess.board().flat();\n    let squares_ids = this.state.flipped ? squareID.reverse() : squareID;\n    return(\n      <div className='container'>\n        <h1 id=\"title\">\n          <span>visual chess</span>\n        </h1>\n        <div id=\"chessboard\" className='chessboard'> \n          {\n            arr.map((square, i)=>{\n              return square \n              ? \n              <div \n                onDragOver={this.dragOverHandler} \n                onDragLeave={this.dragLeaveHandler} \n                onDrop={this.dropHandler} \n                data-square={SQUARES[squares_ids[i]]}\n                id={squares_ids[i]}\n                data-position={squares_ids[i]}\n                key={squares_ids[i]} \n                className='square'> \n                  <div \n                    className={`piece ${this.colorConv(square.color)} ${square.type}`}\n                    draggable='true'\n                    data-position={squares_ids[i]}\n                    onDragStart={this.dragStartHandler}\n                    onDragEnd={this.dragEndHandler}\n                    onClick={this.handlePieceClick}\n                  />\n              </div>\n              : \n              <div \n                data-square={SQUARES[squares_ids[i]]}\n                data-position={squares_ids[i]}\n                id={squares_ids[i]}\n                onDragOver={this.dragOverHandler} \n                onDragLeave={this.dragLeaveHandler} \n                onClick={this.handleClick} \n                onDrop={this.dropHandler} \n                key={squares_ids[i]} \n                className='square' \n            />;\n          })\n        }\n        </div>\n\n        <Moves \n          onClick={this.moveClick} \n          selected_move={this.state.selected_move}\n          moves={this.state.history}\n          colorToMove={colorToMove}\n          result={this.state.result}\n          /> \n\n        <div className=\"button_wrapper\">  \n          <ImageButton \n            button='pgn_button' \n            altText='Enter PGN' \n            onClick={this.pgnClick} />\n          <ImageButton \n            button='play_button' \n            altText='Turn Autoplay on' \n            state={this.toggleConvert(this.state.autoplay)}\n            onClick={this.handleAutoplayClick} />\n          <Button \n            text='Flip Board' \n            onClick={this.handleFlipClick} />\n          <Button \n            text='Enter FEN' \n            onClick={this.handleFENClick} />          \n          <Button \n            text='Enter Lichess Game ID' \n            onClick={this.serverClick} />\n          <Button \n            text='Enter Lichess Study Chapter' \n            onClick={this.serverClickStudy} />\n          <ImageButton \n            button='pieces_button' \n            state={this.toggleConvert(this.state.showPieces)} \n            altText='Hide Pieces' \n            onClick={this.handleHideClick} />\n          <ImageButton \n            button='control_button_on' \n            altText='Hide Control' \n            onClick={this.handleControlClick} />\n          <Button \n            text='Famous Games' \n            onClick={this.handleGamesClick} />\n        </div>\n        \n        {this.state.promotion.from ? \n          <PromotionPrompt \n            onClick={this.promotionHandler}\n            from={this.state.promotion.from}\n            to={this.state.promotion.to}\n            color={this.state.promotion.color}\n\n            />\n            : ''\n        }\n        {this.state.popUp ?  \n          <PopUp\n             props={this.state.popUp}\n          />  \n          : ''}\n        \n      </div> \n    );\n  } \n  \n  componentDidMount(){\n    document.addEventListener(\"keydown\", this.keyDownHandler);\n    if(this.state.showControl) this.showBoardControl();\n  }\n\n\n  shouldComponentUpdate(nextProps, nextState){\n    if(this.state.showPieces!==nextState.showPieces) return false;\n    return true;\n  }\n\n  componentDidUpdate() {\n    if(this.state.selected_move>0){ // For highlighting the last move\n      // console.log(this.state.history.pop());\n    }\n    if(this.state.showControl) this.showBoardControl();\n  }\n\n  /*\n  ----------------------------------------------------------------------------------------------------------------------------------\n  ---------------------------------------------------- EVENT HANLDERS --------------------------------------------------------------\n  ----------------------------------------------------------------------------------------------------------------------------------\n  */\n  \n  handleEvalClick = () => {    \n    // let pgn = \"1. d4 d5 2. c4 c6 3. Nf3 Nf6 4. Nc3 e6 5. e3 Nbd7 6. Bd3 dxc4 7. Bxc4 b5 8. Bd3 Bd6 9. O-O O-O 10. Qc2 Bb7 11. a3 Rc8 12. Ng5 c5 13. Nxh7 Ng4 14. f4 cxd4 15. exd4 Bc5 16. Be2 Nde5 17. Bxg4 Bxd4+ 18. Kh1 Nxg4 19. Nxf8 f5 20. Ng6 Qf6 21. h3 Qxg6 22. Qe2 Qh5 23. Qd3 Be3 0-1\";\n    // this.loadPGN(pgn);\n\n    // if(chess.in_check()) console.log(chess.get_kings());\n  }\n\n  keyDownHandler = (e)=>{\n    switch(e.keyCode){\n      case 39: // Right arrow \n        e.preventDefault();\n        if(this.state.selected_move+1<=this.state.fen_history.length-1){ \n          // this.setState(prevState=>({selected_move: prevState.selected_move+1}), this.showBoardControl());  \n          this.setState(prevState=>({selected_move: prevState.selected_move+1}));                \n          // this.removeClassFromAll('selected');\n          // document.getElementById('m'+this.state.selected_move+1).classList.add('selected');\n        }\n        break;\n      case 37: // Left arrow \n        e.preventDefault();\n        if(this.state.selected_move>=1){\n          this.setState(prevState=>({selected_move: prevState.selected_move-1}));\n          // this.setState(prevState=>({selected_move: prevState.selected_move-1}), this.showBoardControl());\n          // this.removeClassFromAll('selected');\n          // document.getElementById('m'+this.state.selected_move-1).classList.add('selected');\n        }\n        break;\n      case 27: // esc \n        e.preventDefault(); \n        if(this.state.popUp){\n          this.setState({popUp: false});\n        }\n        break;\n      default: break; \n    }\n  }\n\n  dragStartHandler = (e) => { // e: dragEvent, i: original square of dragged piece\n    let square = e.target.dataset.position;\n    e.dataTransfer.effectAllowed = \"all\"\n    e.dataTransfer.dropEffect = \"move\";\n    e.dataTransfer.setData(\"text/plain\", square);\n    requestAnimationFrame(function () {\n      e.target.classList.add('hide');\n    });\n    this.highlightMoves(square);   \n  }\n\n  dragEndHandler = (e) =>{\n    e.preventDefault();\n    requestAnimationFrame(function () {\n        e.target.classList.remove('hide');\n      });\n  }\n\n  dropHandler = (e) => {\n    e.preventDefault();\n    let target = e.target.dataset.position;\n    this.removeClassesFromAll('dragover', 'moveable'); \n    let origin = e.dataTransfer.getData('text/plain');\n    if(this.newMove(origin, target)){\n      this.removeClassesFromAll('moveable', 'active');\n    }\n  }\n\n  dragOverHandler = (e) => {\n    e.preventDefault(e);\n    requestAnimationFrame(function () {\n      e.target.classList.add('dragover');\n    });\n  }\n  \n  dragLeaveHandler = (e) => {\n    e.preventDefault(); \n    requestAnimationFrame(function () {\n      e.target.classList.remove('dragover');\n    }); \n  }\n\n  handleControlClick = () => {    \n    if(!this.state.showControl){\n      this.setState({showControl: true});\n    }else{\n      this.setState({showControl: false});\n    }\n  }\n\n  handleGamesClick = () => {\n    fetch('http://localhost:3000/test', {method:'GET'})\n      .then(res => res.text())\n      .then(res => {\n        this.loadGames(res, '###');\n      });\n  }\n\n  handleFlipClick = () => {\n    this.setState({flipped: true});\n  }\n\n  handleHideClick = () => {\n    if(this.state.showPieces){\n      document.getElementById('chessboard').classList.add('hidepieces');\n      this.setState({showPieces: false});\n    }else{\n      document.getElementById('chessboard').classList.remove('hidepieces');\n      this.setState({showPieces: true});\n    }\n    \n    // console.log(chess.boardFull());\n  }\n\n  serverClickStudy = () => {\n    // this.loadPGNfromServer('https://lichess.org/study/WtwmeX4m/FzpbQLUx', {\n    //   credentials: 'same-origin',\n    //   Access-Control-Allow-Credentials\n    //   mode: 'same-origin'\n    // });\n    fetch('http://localhost:3001/game?all=true')\n      .then(res => res.json())\n      .then(res => {\n        let closePopup = this.closePopup;\n        // console.log(res);\n        this.setState({popUp: {\n            content: <GamesList games={res} closePopup={closePopup} />, \n            closePopup}\n        });\n      });\n  }\n\n  serverClick = () => {\n    this.setState({popUp: {text: 'Enter URL', textarea_class: 'url', closePopup: this.closeAndLoad}});\n  }\n\n  pgnClick = () =>{\n    this.setState({popUp: {content: <PGNDialog closePopup={this.closePopup} />, closePopup: this.closePopup}}); \n  }\n\n  handleFENClick = () => {\n    this.setState({popUp: {text: 'Enter FEN', textarea_class: 'pgn', closePopup: this.closePopupFEN}});\n  }\n\n  moveClick = (number) => {\n    // this.setState({colorToMove: chess.turn(), selected_move:number+1}, this.showBoardControl());\n    this.setState({selected_move:number+1});\n  }\n\n  handleAutoplayClick = () => {\n    if(!this.state.autoplay){ \n      this.setState(state => ({\n        autoplay: !state.autoplay \n      }), ()=>this.autoplay(this.state.selected_move, this.state.history.length));\n    }else{\n      this.setState(state => ({\n        autoplay: !state.autoplay \n      }));\n    }\n    \n  }\n\n  handleClick = (e) => {\n    let square = e.target.dataset.position;\n    let clicked = this.state.piece_clicked; \n    if(clicked){\n      if(this.newMove(clicked, square)){\n        this.removeClassesFromAll('moveable', 'active');\n        this.setState({piece_clicked: false});\n        // this.showBoardControl();\n      }else{\n        // this.removeClassFromAll('active'); \n        // this.setState({piece_clicked: false })\n      }\n    }\n  }\n\n  \n\n  handlePieceClick = (e) => {\n    let square = e.target.dataset.position;\n    let clicked = this.state.piece_clicked;\n    if(!clicked){\n      if(this.pieceIsTurnColor(square)){\n        document.getElementById(square).classList.add('active');\n        this.highlightMoves(square);\n        this.setState({piece_clicked: square});\n      }\n    }else{\n      this.removeClassesFromAll('active', 'moveable');\n      if(this.squaresOfSameColor(square, clicked)){ // Wenn selbfarbiges, anderes piece gedr√ºckt \n          document.getElementById(square).classList.add('active');\n          this.highlightMoves(square);\n          this.setState({piece_clicked: square});\n      }else{ // Capture \n        if(this.newMove(clicked, square)){\n          this.setState({piece_clicked: null});\n          // this.showBoardControl();\n        }\n      }\n    }\n  }\n\n  closeAndLoad = (url) => {\n    this.setState({popUp: false});\n    if(url){\n      this.loadPGNfromServer('https://lichess.org/game/export/'+url);\n    };\n  }\n\n  closePopup = (text) => {\n    this.setState({popUp: false});\n    if(text) this.loadPGN(text);\n  }\n\n  closePopupFEN = (text) => {\n    if(text) this.loadFEN(text);\n    this.setState({popUp: false});\n  }\n\n  promotionHandler = (piece, from, to) => {\n    this.setState({promotion: {from: null, to:null, color:null}});\n    this.newMove(from, to, piece);\n  }\n\n  /*\n  ----------------------------------------------------------------------------------------------------------------------------------\n  ----------------------------------------------------        UTILITY        -------------------------------------------------------\n  ----------------------------------------------------------------------------------------------------------------------------------\n  */\n\n  autoplay(point, end){\n    ++point;\n    if(point>end || !this.state.autoplay) return;\n    this.setState({selected_move: point});\n    setTimeout(() => this.autoplay(point, end), AUTOPLAY_SPEED);\n  }\n\n  toggleConvert = (toggle) => toggle ? 'on' : 'off';  \n\n  loadPGNfromServer(url){\n    fetch(url)\n      .then(res => res.text())\n      .then(res => this.loadPGN(res));\n  }\n\n  loadPGN(pgn){\n    let r = chess.load_pgn(pgn);\n    let headers = chess.header(); \n    let board = document.getElementById(BOARD_ID);\n    if(headers.Black){\n      let content = headers.BlackTitle ? `[${headers.BlackTitle}]` + ' ' + headers.Black : headers.Black; \n      board.dataset.blackplayer = content;\n      board.classList.add('blackplayer');\n    }else board.classList.remove('blackplayer');\n    if(headers.White){\n      let content = headers.WhiteTitle ? `[${headers.WhiteTitle}]` + ' ' + headers.White : headers.White; \n      board.dataset.whiteplayer = content;  \n      board.classList.add('whiteplayer');\n    }else board.classList.remove('whiteplayer');\n    let result = headers.Result ? 'Result: ' + headers.Result : '';\n    if(headers.Termination) result += ` (${headers.Termination})`; \n    console.log(headers);\n    if(r){\n      let history = chess.history(); \n      chess.reset();\n      let fen_history = [chess.fen()];\n      history.forEach(e=>{\n        chess.move(e);\n        fen_history.push(chess.fen());\n      });\n      // let fen_history = history.map(e => {\n      //   chess.move(e);\n      //   return chess.fen();   \n      // });\n      chess.load(fen_history[0]);\n      // this.setState({history, fen_history, loaded_game: pgn, selected_move: 0}, this.showBoardControl());\n      this.setState({history, fen_history, loaded_game: pgn, selected_move: 0, result});\n\n    }else console.log(r);\n  }\n\n  loadFEN(fen){\n    let r = chess.load(fen);\n    let fen_history = [chess.fen()];\n    let history = [];\n    this.setState({fen_history, selected_move: 0});\n    console.log(r);\n\n  }\n\n  // If square is of format piece-square, remove piece (e.g. ba8 => a8) \n  cleanUpSquare = (square) => square.length>2 ? square.slice(1) : square;\n\n  moveIsPawnMove = (move) => move.length===3 && move.charAt(0).toLowerCase()==='p'; \n\n  getOtherChessColor = () => chess.turn() === chess.WHITE ? chess.BLACK : chess.WHITE;\n  \n  // removeEnPassantFromFen = (fen) => {\n  //    var tokens = fen.split(/\\s+/);\n  //    tokens[3] = '-';\n  //    return tokens.join(' ');\n  // }\n\n  getRatio(w, b){\n    if(w===0&&b===0) return 0;  \n    let sum = w + b; \n    let whiteshare = w/sum*100; \n    return whiteshare; \n  }\n\n  getColorToMoveByMoveNumber = (number) => number%2===0 ? 1 : -1; \n\n  squareColorConv = color => {\n    if(color==='light') return 'w'; \n    else if(color==='dark') return 'b';\n    return false; \n  }\n\n  colorConv = color => color==='w' ? 'white' : 'black';\n\n  squaresOfSameColor = (one, two) => chess.get(one).color===chess.get(two).color;\n\n  pieceIsTurnColor = (piece) => chess.get(piece).color === chess.turn();\n\n\n  // diagonalPawnMoves(square, color){\n  //   if(this.isOnFirstOrLastRank(square)) return false; \n  //   let moves = [];\n  //   let [l, r] = color==='w' ? [-9, -7] : [7, 9];\n  //   switch(this.isOnEdge(square)){\n  //     case 0:\n  //       moves.push(squareID[square+l], squareID[square+r]);\n  //       break;\n  //     case 1: \n  //       moves.push(squareID[square+r]);\n  //       break;\n  //     case 2: \n  //       moves.push(squareID[square+l]);\n  //       break;\n  //     default: moves.push(squareID[square+l], squareID[square+r]);\n  //       break; \n  //   }\n  //   return moves;\n  // }\n\n  isOnFirstOrLastRank(square){ return (square>=0&&square<=7)||(square>=56&&square<=63); }\n\n  getRowFromSquare(square){ return square.charAt(1); }\n\n  isOnPromotionSquare(square, color){\n    return color=='w' ? this.getRowFromSquare(square)==8 : this.getRowFromSquare(square)==1; \n  }\n\n  /*\n  return 1 ... left Edge, \n         2 ... right edge \n         0 ... not on edge\n  */\n  isOnEdge(square){\n    // if([0,8,16,24,32,40,48,56].includes(square)) return 1;\n    if(Number(square)%8===0) return 1;\n    // if([7,15,23,31,39,47,55,63].includes(square)) return 2; \n    if(Number(square)%7===0) return 2; \n    return 0; \n  }\n\n  /*\n  ----------------------------------------------------------------------------------------------------------------------------------\n  ----------------------------------------------------     CHESS STUFF    ----------------------------------------------------------\n  ----------------------------------------------------------------------------------------------------------------------------------\n  */\n\n\n  openPromotionPrompt(from, to, color){\n    this.setState({promotion: {from, to, color}}, () => {\n      let promotion = document.querySelector('.promotion_prompt'); \n      let rect = document.getElementById(this.state.promotion.to).getBoundingClientRect();\n      let color = this.state.promotion.color; \n      promotion.style.left = rect.left+'px';\n      console.log(color);\n      promotion.style.top = color=='black' ? `${rect.top-3*SQUARE_SIZE}px` : `${rect.top}px`;\n    });\n  }\n\n  newMove(from, to, promoteTo = false){\n    let fen_history = [...this.state.fen_history]; \n    let history = [...this.state.history];\n    let options = {from, to}; \n\n    if(this.state.selected_move<this.state.history.length){ // Override if a previous move was selected\n      history = history.slice(0, this.state.selected_move);\n      fen_history = fen_history.slice(0, this.state.selected_move+1); \n    }\n\n    if(promoteTo) options.promotion = promoteTo;\n    else{\n      if(this.isOnPromotionSquare(to, chess.turn()) && chess.get(from).type == 'p'){\n        // options.promotion = 'q';\n        if(this.state.promotion.from==null){ \n          this.openPromotionPrompt(from, to, this.colorConv(chess.turn()), this.newMove);\n          return;\n        }else{\n          options.promotion = promoteTo;\n        } \n      }\n    }\n\n    let res = chess.move(options);\n    if(res){\n      fen_history.push(chess.fen());\n      history.push(res.san);\n      this.setState(prevState => (\n        {selected_move: prevState.selected_move+1, history, fen_history}\n      ));\n      return res.san; \n    }else{\n      console.log('Error making new move: '+res);\n      return false; \n    } \n  }\n\n  // switchColor = () => this.state.colorToMove === 1 ? -1 : 1;\n\n  /*\n  ----------------------------------------------------------------------------------------------------------------------------------\n  ----------------------------------------------------         DOM            ------------------------------------------------------\n  ----------------------------------------------------------------------------------------------------------------------------------\n  */\n\n\n  highlightMoves(piece){\n    chess.moves({square:piece, verbose:true}).forEach(move=>{\n      document.getElementById(move.to).classList.add('moveable');\n    });\n  }\n\n  removeClassFromAll = remove => {\n    document.querySelectorAll('.'+remove).forEach(el=>el.classList.remove(remove));\n  }\n\n  removeClassesFromAll = (...classes) => {\n    classes.forEach(e => document.querySelectorAll('.'+e).forEach(el=>el.classList.remove(e)));\n  }\n\n\n  showBoardControl = () => { \n    this.removeClassesFromAll('attacked', 'kingcheck');\n    if(chess.in_check()){\n      let square = document.getElementById(chess.get_king());\n      square.classList.add('kingcheck');\n      return;\n    }\n    let control = chess.defended_pieces_all(true, true);\n    console.log(control);\n    \n    for(let [square, value] of Object.entries(control)){\n      if(value.w>0||value.b>0){ \n        let dom = document.getElementById(square);\n        dom.classList.add('attacked');\n        console.log(square+': '+this.getRatio(value.w,value.b)+'%');\n        if(this.state.weighted) dom.style.setProperty('--separator', this.getRatio(value.w,value.b)+'%');\n        else dom.style.setProperty('--separator', this.getRatio(value.w,value.b)+'%');\n      }\n    } \n  }\n\n  /*showBoardControl_old = () => { \n    let squares = this.initSquares();\n    let turn = chess.turn(); \n    let other_turn = this.getOtherChessColor();\n\n    let defends_other = chess.defended_pieces(other_turn, true, true);\n    // console.log('defends_other', defends_other);\n    // console.log(chess.boardFull());\n\n    let defends = chess.defended_pieces(turn, true, true);\n    // console.log('defends', defends);\n\n\n    // Defends = object, only own color  \n    // keys: defended squares/pieces  (format e.g. 'bc8' or 'c2')\n    // values: defending square/piece (format e.g. 'pd7')\n    for (let [key, value] of Object.entries(defends)){ \n      key = this.cleanUpSquare(key);  //check whether key is square or piece \n      if(value.length>0){\n        try{\n          // squares[key][turn] += value.filter(move => !this.moveIsPawnMove(move)).length;\n          // squares[square][turn].push(value.map(e=>e.slice(1)));\n          squares[key][turn]+=value.length;\n        }catch(err){\n          console.error('Error', err);\n          console.log(` Vars: value: ${value}, key: ${key} `);\n        }\n      } \n    } \n    for (let [key, value] of Object.entries(defends_other)){\n      // console.log(`value: ${value}, key: ${key}, moveIsPawnMove: ${this.moveIsPawnMove(value)}`);\n      key = this.cleanUpSquare(key);  //check whether key is square or piece \n      if(value.length>0){\n        // let square = key.slice(1);\n        try{\n          // squares[key][other_turn] += value.filter(move => !this.moveIsPawnMove(move)).length;\n          // squares[square][turn].push(value.map(e=>e.slice(1)));\n          squares[key][other_turn]+=value.length;\n        }catch(err){\n          console.error('Error', err);\n          console.log(` Vars: value: ${value}, key: ${key} `);\n        }\n      } \n    }\n    // console.log(squares);\n\n    this.removeClassFromAll('attacked');\n    for (let [square, value] of Object.entries(squares)) {\n      if(value.w>0||value.b>0){ \n        let dom = document.getElementById(square);\n        dom.classList.add('attacked');\n        dom.style.setProperty('--separator', this.getRatio(value.w,value.b)+'%');\n      }\n    }\n  }*/\n\n  loadGames(text, separator){\n    let split = text.split(separator);\n    console.log(split[0]);\n    this.loadPGN(split[0]);\n  }\n\n  \n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}