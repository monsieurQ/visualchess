{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/q/Documents/WebDocuments/ChessReact/chess/src/components/Piece/Piece.js\";\nimport React from 'react';\nimport './Piece.css';\nconst typeConv = {\n  0: 'pawn',\n  1: 'bishop',\n  2: 'knight',\n  3: 'rook',\n  4: 'queen',\n  5: 'king'\n};\n\nlet colorConv = number => {\n  if (number === 1) return 'white';else if (number === -1) return 'black';else return null;\n};\n\nconst Piece = ({\n  position,\n  type,\n  color\n}) => {\n  console.log(colorConv(color));\n  let pieceClass = `piece ${typeConv[type]} ${colorConv(color)}`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: pieceClass\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 3\n  }, this);\n};\n\n_c = Piece;\nexport default Piece;\n\nvar _c;\n\n$RefreshReg$(_c, \"Piece\");","map":{"version":3,"sources":["/Users/q/Documents/WebDocuments/ChessReact/chess/src/components/Piece/Piece.js"],"names":["React","typeConv","colorConv","number","Piece","position","type","color","console","log","pieceClass"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,aAAP;AAEA,MAAMC,QAAQ,GAAG;AAChB,KAAG,MADa;AACL,KAAE,QADG;AACO,KAAE,QADT;AACmB,KAAE,MADrB;AAC6B,KAAE,OAD/B;AACwC,KAAE;AAD1C,CAAjB;;AAIA,IAAIC,SAAS,GAAGC,MAAM,IAAI;AACzB,MAAGA,MAAM,KAAG,CAAZ,EAAe,OAAO,OAAP,CAAf,KACK,IAAGA,MAAM,KAAG,CAAC,CAAb,EAAgB,OAAO,OAAP,CAAhB,KACA,OAAO,IAAP;AACL,CAJD;;AAKA,MAAMC,KAAK,GAAG,CAAC;AAACC,EAAAA,QAAD;AAAWC,EAAAA,IAAX;AAAiBC,EAAAA;AAAjB,CAAD,KAA6B;AAC1CC,EAAAA,OAAO,CAACC,GAAR,CAAYP,SAAS,CAACK,KAAD,CAArB;AACA,MAAIG,UAAU,GAAI,SAAQT,QAAQ,CAACK,IAAD,CAAO,IAAGJ,SAAS,CAACK,KAAD,CAAQ,EAA7D;AACA,sBACC;AAAK,IAAA,SAAS,EAAEG;AAAhB;AAAA;AAAA;AAAA;AAAA,UADD;AAGA,CAND;;KAAMN,K;AAQN,eAAeA,KAAf","sourcesContent":["import React from 'react'; \nimport './Piece.css';\n\nconst typeConv = {\n\t0: 'pawn', 1:'bishop', 2:'knight', 3:'rook', 4:'queen', 5:'king'\n}\n\nlet colorConv = number => {\n\tif(number===1) return 'white';\n\telse if(number===-1) return 'black'; \n\telse return null; \n}\nconst Piece = ({position, type, color}) => {\n\tconsole.log(colorConv(color));\n\tlet pieceClass = `piece ${typeConv[type]} ${colorConv(color)}`\n\treturn (\n\t\t<div className={pieceClass} /> \n\t);\n}\n\nexport default Piece; "]},"metadata":{},"sourceType":"module"}