{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/q/Documents/WebDocuments/ChessReact/chess/src/components/Moves/Moves.js\";\nimport React, { Component } from 'react';\nimport './Moves.css';\nlet columnConversion = {\n  1: 'a',\n  2: 'b',\n  3: 'c',\n  4: 'd',\n  5: 'e',\n  6: 'f',\n  7: 'g',\n  8: 'h'\n};\n\nclass Moves extends Component {\n  convertMove(move) {\n    let str = '' + move;\n    let r = Number(str.charAt(0));\n    let c = columnConversion[Number(str.charAt(1))];\n    return '' + c + r;\n  }\n\n  constructor(props) {\n    super(props);\n    let {\n      lastMove\n    } = props; // moveHistory: [[from, to], [from, to], [from, to], ...]\n    // this.newMoveBlack = this.newMoveBlack.bind(this);\n\n    this.state = {\n      render: [],\n      history: [],\n      playedMoves: 0\n    };\n  }\n\n  numberOfRows(length) {\n    return Math.ceil(length / 2);\n  }\n\n  newMoveWhite(move, type, move_number) {\n    let row_number = /*#__PURE__*/React.createElement('div', {\n      className: 'move_number',\n      key: `move_number${move_number}`\n    }, move_number);\n    let white = /*#__PURE__*/React.createElement('div', {\n      className: 'move_white',\n      key: `move_white${move_number}`\n    }, type + ':' + this.convertMove(move));\n    return [row_number, white];\n  }\n\n  newMoveBlack(move, type, move_number) {\n    let black = /*#__PURE__*/React.createElement('div', {\n      className: 'move_black',\n      key: `move_black${move_number}`\n    }, type + ':' + this.convertMove(move));\n    return black;\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    let {\n      lastMove\n    } = {\n      props\n    };\n    if (!lastMove || lastMove === undefined) return null;\n    let [move_number, type, move] = lastMove;\n    console.log(move_number, type, move);\n    return null; // console.log('last move', lastMove);\n    // \n    // let history_copy = [...state.history];\n    // history_copy.push([lastMove]); \n    // // this.setState(prevState=>({history:history_copy}));\n    // return {\n    // \thistory: history_copy\n    // };\n  }\n\n  render() {\n    let history = this.state.history; // let render = [];\n    // let move_number = 1; \n    // console.log('history', history);\n    // history.forEach((element,index)=>{\n    // \tconsole.log('element0', element[0]);\n    // \tconsole.log('element1', element[1]);\n    // \tif(index%2===0){\n    // \t\trender.push(this.newMoveWhite(element[1], element[0], move_number));\n    // \t\tmove_number++;\n    // \t}else render.push(this.newMoveBlack(element[1], element[0], move_number)); \n    // });\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"moves\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"top_row\",\n        children: \" Moves \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"moves_table\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default Moves;","map":{"version":3,"sources":["/Users/q/Documents/WebDocuments/ChessReact/chess/src/components/Moves/Moves.js"],"names":["React","Component","columnConversion","Moves","convertMove","move","str","r","Number","charAt","c","constructor","props","lastMove","state","render","history","playedMoves","numberOfRows","length","Math","ceil","newMoveWhite","type","move_number","row_number","createElement","className","key","white","newMoveBlack","black","getDerivedStateFromProps","undefined","console","log"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'; \nimport './Moves.css';\n\n\nlet columnConversion =  {1:'a', 2:'b', 3:'c', 4:'d', 5:'e', 6:'f', 7:'g', 8:'h'};\t\n\nclass Moves extends Component {\n\n\n\tconvertMove(move){\n\t\tlet str = ''+move; \n\t\tlet r = Number(str.charAt(0)); \n\t\tlet c = columnConversion[Number(str.charAt(1))];\n\t\treturn ''+c+r;\n\t}\n\n\tconstructor(props){\n\t\tsuper(props);\n\t\tlet {lastMove} = props;  // moveHistory: [[from, to], [from, to], [from, to], ...]\n\t\t// this.newMoveBlack = this.newMoveBlack.bind(this);\n\t\tthis.state = {\n\t\t\t render: [],\n\t\t\t history: [],\n\t\t\t playedMoves: 0\n\t\t}\n\t}\n\n\tnumberOfRows(length){\n\t\treturn Math.ceil(length/2);\n\t}\n\n\tnewMoveWhite(move, type, move_number){\n\t\tlet row_number = React.createElement('div', {className:'move_number',key:`move_number${move_number}`}, move_number);\n\t\tlet white = React.createElement('div', {className:'move_white', key: `move_white${move_number}`},type+':'+this.convertMove(move));\n\t\treturn [row_number, white];\n\t}\n\tnewMoveBlack(move, type, move_number){\n\t\tlet black = React.createElement('div', {className:'move_black', key: `move_black${move_number}`},type+':'+this.convertMove(move));\n\t\treturn black;\n\t}\n\n\n\tstatic getDerivedStateFromProps(props, state) {\n\t\tlet {lastMove} = {props}; \n\t\tif(!lastMove||lastMove===undefined) return null;\n\t\tlet [move_number, type, move] = lastMove;\n\t\tconsole.log(move_number, type, move);\n\t\treturn null;\n\t\t// console.log('last move', lastMove);\n\t\t// \n\t\t// let history_copy = [...state.history];\n\t\t// history_copy.push([lastMove]); \n\t\t// // this.setState(prevState=>({history:history_copy}));\n\t\t// return {\n\t\t// \thistory: history_copy\n\t\t// };\n\t}\t\t\n\n\trender(){\n\t\tlet history = this.state.history;\n\t\t\n\t\t// let render = [];\n\t\t// let move_number = 1; \n\t\t// console.log('history', history);\n\t\t// history.forEach((element,index)=>{\n\t\t// \tconsole.log('element0', element[0]);\n\t\t// \tconsole.log('element1', element[1]);\n\t\t// \tif(index%2===0){\n\t\t// \t\trender.push(this.newMoveWhite(element[1], element[0], move_number));\n\t\t// \t\tmove_number++;\n\t\t// \t}else render.push(this.newMoveBlack(element[1], element[0], move_number)); \n\t\t// });\n\n\n\t\treturn (\n\t\t\t<div id=\"moves\"> \n\t\t\t\t<div id=\"top_row\"> Moves </div>\n\t\t\t\t<div id=\"moves_table\"> \n\t\t\t\t\t{//render\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Moves; "]},"metadata":{},"sourceType":"module"}