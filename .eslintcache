[{"/Users/q/Documents/WebDocuments/chess/front/src/index.js":"1","/Users/q/Documents/WebDocuments/chess/front/src/reportWebVitals.js":"2","/Users/q/Documents/WebDocuments/chess/front/src/App.js":"3","/Users/q/Documents/WebDocuments/chess/front/src/components/Button/Button.js":"4","/Users/q/Documents/WebDocuments/chess/front/src/components/Moves/Moves.js":"5","/Users/q/Documents/WebDocuments/chess/front/src/components/GamesList/GamesList.js":"6","/Users/q/Documents/WebDocuments/chess/front/src/components/PopUp/PopUp.js":"7","/Users/q/Documents/WebDocuments/chess/front/src/components/PGNDialog/PGNDialog.js":"8","/Users/q/Documents/WebDocuments/chess/front/src/components/PromotionPrompt/PromotionPrompt.js":"9","/Users/q/Documents/WebDocuments/chess/front/src/components/ImageButton/ImageButton.js":"10","/Users/q/Documents/WebDocuments/chess/front/src/components/Moves/MoveButton/MoveButton.js":"11","/Users/q/Documents/WebDocuments/chess/front/src/components/Piece/Piece.js":"12","/Users/q/Documents/WebDocuments/chess/front/src/components/ToggleTextButton/ToggleTextButton.js":"13"},{"size":463,"mtime":1610630618631,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":1607602318190,"results":"16","hashOfConfig":"15"},{"size":23364,"mtime":1625931711847,"results":"17","hashOfConfig":"15"},{"size":194,"mtime":1612280925239,"results":"18","hashOfConfig":"15"},{"size":3172,"mtime":1624289327041,"results":"19","hashOfConfig":"15"},{"size":719,"mtime":1625935971871,"results":"20","hashOfConfig":"15"},{"size":910,"mtime":1623592029516,"results":"21","hashOfConfig":"15"},{"size":1507,"mtime":1626017973983,"results":"22","hashOfConfig":"15"},{"size":951,"mtime":1623766897591,"results":"23","hashOfConfig":"15"},{"size":258,"mtime":1624290321988,"results":"24","hashOfConfig":"15"},{"size":281,"mtime":1617372160262,"results":"25","hashOfConfig":"15"},{"size":580,"mtime":1611577937474,"results":"26","hashOfConfig":"15"},{"size":462,"mtime":1624363899915,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"hn2cv8",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"/Users/q/Documents/WebDocuments/chess/front/src/index.js",[],["59","60"],"/Users/q/Documents/WebDocuments/chess/front/src/reportWebVitals.js",[],"/Users/q/Documents/WebDocuments/chess/front/src/App.js",["61","62","63","64","65","66"],"import './App.css';\nimport React, { Component } from 'react';\nimport Moves from './components/Moves/Moves';\nimport PopUp from './components/PopUp/PopUp';\nimport ToggleTextButton from './components/ToggleTextButton/ToggleTextButton';\nimport ImageButton from './components/ImageButton/ImageButton';\nimport PGNDialog from './components/PGNDialog/PGNDialog';\nimport GamesList from './components/GamesList/GamesList';\nimport PromotionPrompt from './components/PromotionPrompt/PromotionPrompt';\nimport Draggable from 'react-draggable';\n\nimport * as ChessJS from 'chess.js';\nconst Chess = typeof ChessJS === \"function\" ? ChessJS : ChessJS.Chess;\nconst chess = new Chess();\n\nconst squareID = [\"a8\", \"b8\", \"c8\", \"d8\", \"e8\", \"f8\", \"g8\", \"h8\", \"a7\", \"b7\", \"c7\", \"d7\", \"e7\", \"f7\", \"g7\", \"h7\", \"a6\", \"b6\", \"c6\", \"d6\", \"e6\", \"f6\", \"g6\", \"h6\", \"a5\", \"b5\", \"c5\", \"d5\", \"e5\", \"f5\", \"g5\", \"h5\", \"a4\", \"b4\", \"c4\", \"d4\", \"e4\", \"f4\", \"g4\", \"h4\", \"a3\", \"b3\", \"c3\", \"d3\", \"e3\", \"f3\", \"g3\", \"h3\", \"a2\", \"b2\", \"c2\", \"d2\", \"e2\", \"f2\", \"g2\", \"h2\", \"a1\", \"b1\", \"c1\", \"d1\", \"e1\", \"f1\", \"g1\", \"h1\"];\nconst BOARD_ID = 'chessboard'; \nconst AUTOPLAY_SPEED = 500; \nconst SQUARE_SIZE = 100;\nconst CONTROL_CLASS = '--control'; // Variable in CSS for storing the ratio of attackers/defenders on a square \n\n\nclass App extends Component {\n\n  /*\n  ----------------------------------------------------------------------------------------------------------------------------------\n  ------------------------------------------------------------ REACT ---------------------------------------------------------------\n  ----------------------------------------------------------------------------------------------------------------------------------\n  */\n\n\n  constructor(){\n    super();\n\n    this.state = {\n      selected_move: 0,\n      piece_clicked: false,\n      fen_history: [chess.fen()], // all moves, each represented by fen \n      flipped: false,\n      history: {}, // Single moves, each with from and to-squares and in SAN format \n      loaded_game: null, //PGN of loaded game \n      popUp: false, \n      show_control: true,\n      weighted: false,\n      players: false,\n      result: '',\n      show_pieces: true,\n      promotion: {\n        from: null,\n        to: null,\n        color: null\n      },\n      autoplay: false\n    };  \n  }\n\n  /**\n   * \n   * Each render gets every piece from chess.js. Pieces are rendered as children into the squares \n   * Board control is realized through the .square-bg children\n   * List of played moves is passed to the Moves-component, which also displays game results \n   * \n   **/\n  render(){\n    chess.load(this.state.fen_history[this.state.selected_move]);\n    let colorToMove = chess.turn();\n    let arr = this.state.flipped ? Array.prototype.reverse.call(chess.board().flat()) : chess.board().flat();\n    let squares_ids = this.state.flipped ? squareID.reverse() : squareID;\n\n    let square_classes = ['light', 'dark'];\n    let c = 0; \n    let players = this.state.players;\n    return(\n      <div className='container'>\n        <h1 id=\"title\">\n          visual chess\n        </h1>\n        <div className=\"main\"> \n          <div id={BOARD_ID} className='chessboard'> \n            {\n              arr.map((square, i)=>{\n                return square \n                ? \n                <div \n                  onDragOver={this.dragOverHandler} \n                  onDragLeave={this.dragLeaveHandler} \n                  onDrop={this.dropHandler} \n                  id={squares_ids[i]}\n                  data-position={squares_ids[i]}\n                  data-count={i}\n                  key={squares_ids[i]} \n                  className={`square ${square_classes[c%2]}`}> \n                    <div className='square-bg'>\n                      <div className='control-dark' /> \n                      <div className='control-light' />\n                    </div> \n                    <div \n                      className={`piece ${this.colorConv(square.color)} ${square.type}`}\n                      draggable='true'\n                      data-position={squares_ids[i]}\n                      onDragStart={this.dragStartHandler}\n                      onDragEnd={this.dragEndHandler}\n                      onClick={this.handlePieceClick}\n                    />  \n                </div>\n                : \n                <div \n                  data-position={squares_ids[i]}\n                  id={squares_ids[i]}\n                  data-count={i}\n                  onDragOver={this.dragOverHandler} \n                  onTouchStart={this.touchStartHandler}\n                  onDragLeave={this.dragLeaveHandler} \n                  onClick={this.handleClick} \n                  onDrop={this.dropHandler} \n                  key={squares_ids[i]} \n                  className='square'> \n                    <div className='square-bg'>\n                      <div className='control-dark' /> \n                      <div className='control-light' />\n                    </div> \n                </div>         \n            })\n          }\n          </div>\n\n          {this.state.promotion.from ? \n            <PromotionPrompt \n              onClick={this.promotionHandler}\n              from={this.state.promotion.from}\n              to={this.state.promotion.to}\n              color={this.state.promotion.color}\n\n              />\n              : ''\n          }\n\n          <aside>\n            <Moves \n              onClick={this.moveClick} \n              selected_move={this.state.selected_move}\n              moves={this.state.history}\n              colorToMove={colorToMove}\n              result={this.state.result}\n              whiteplayer={this.state.whiteplayer}\n              blackplayer={this.state.blackplayer}\n              />\n\n              <div className=\"cards\">\n                { players && \n                    <div className=\"players\"> \n                      <div className=\"whiteplayer\">{players.whiteplayer ? players.whiteplayer : 'Anonymous'}</div> \n                      <div className=\"blackplayer\">{players.blackplayer ? players.blackplayer : 'Anonymous'}</div>\n                    </div>\n                }\n\n                { this.state.result && \n                    <div className=\"result\"> {this.state.result} </div> \n                } \n              </div>\n              \n              <div className=\"button_container\">\n                  <ImageButton \n                    button='pgn_button' \n                    altText='Enter PGN'\n                    onClick={this.pgnClick}\n                  />\n                  <ImageButton \n                    button='play_button' \n                    altText='Turn Autoplay on'\n                    state={this.toggleConvert(this.state.autoplay)}\n                    onClick={this.handleAutoplayClick}  \n                    />\n                  <ToggleTextButton \n                    text={['Hide Pieces', 'Show Pieces']} \n                    initialText={0}\n                    onClick={this.handleHideClick} />\n                  <ToggleTextButton \n                    text={['Hide Board Control', 'Show Board Control']} \n                    initialText={0}\n                    onClick={this.handleControlClick} />\n              </div>\n\n              {<footer> \n                <p>created using (a modified) <a alt=\"Chess.JS Github\" href=\"https://github.com/jhlywa/chess.js/blob/master/README.md\">chess.js</a></p>\n                <p>piece design from <a href=\"lichess.org\" alt=\"Lichess\">lichess.org</a></p>\n                <p>contact: <a href = \"mailto: quirschnei@gmail.com\">quirschnei@gmail.com</a></p>\n              </footer>}\n           \n          </aside>\n         \n          \n        </div>\n\n        {this.state.popUp ?  \n          <PopUp\n             props={this.state.popUp}\n          />  \n          : ''}\n\n      </div> \n    );\n  } \n  \n  componentDidMount(){\n    document.addEventListener(\"keydown\", this.keyDownHandler);\n    if(this.state.show_control) this.showBoardControl();\n  }\n\n\n  /**\n   * If show/hide pieces or show/hide Board control are triggered, no need to re-render (changes are done through DOM / CSS) \n   **/\n  shouldComponentUpdate(nextProps, nextState){\n    if(this.state.show_pieces!==nextState.show_pieces) return false;\n    if(this.state.show_control!==nextState.show_control){\n      this.showBoardControl(nextState.show_control);\n      return false; \n    }\n    return true;\n  }\n\n  /**\n   * Highlights last move and calls showBoardControl after render \n   **/\n  componentDidUpdate() {\n    if(this.state.selected_move>0){ // For highlighting the last move\n      this.removeClassFromAll('highlighted');\n      try{\n        this.highlightSquare(this.state.history[this.state.selected_move-1].to);\n      }catch(err){\n        console.error('Error:', err);\n      }\n    }\n    if(this.state.show_control) this.showBoardControl();\n  }\n\n  /*\n  ----------------------------------------------------------------------------------------------------------------------------------\n  ---------------------------------------------------- EVENT HANLDERS --------------------------------------------------------------\n  ----------------------------------------------------------------------------------------------------------------------------------\n  */\n\n\n  keyDownHandler = (e)=>{\n    switch(e.keyCode){\n      case 39: // Right arrow \n        e.preventDefault();\n        if(this.state.selected_move+1<=this.state.fen_history.length-1){ \n          this.setState(prevState=>({selected_move: prevState.selected_move+1}));                \n        }\n        break;\n      case 37: // Left arrow \n        e.preventDefault();\n        if(this.state.selected_move>=1){\n          this.setState(prevState=>({selected_move: prevState.selected_move-1}));\n        }\n        break;\n      case 27: // esc-key\n        e.preventDefault(); \n        if(this.state.popUp){\n          this.setState({popUp: false});\n        } else if(this.state.promotion){\n          this.closePromotionPrompt();\n        }\n        break;\n      default: break; \n    }\n  }\n\n  dragStartHandler = (e) => { // e: dragEvent\n    console.log('dragStart', e);\n    let square = e.target.dataset.position;\n    e.dataTransfer.effectAllowed = \"all\"\n    e.dataTransfer.dropEffect = \"move\";\n    e.dataTransfer.setData(\"text/plain\", square);\n    requestAnimationFrame(function () {\n      e.target.classList.add('hide');\n    });\n    this.highlightMoves(square);   \n  }\n\n  dragEndHandler = (e) =>{\n    e.preventDefault();\n    requestAnimationFrame(function () {\n      e.target.classList.remove('hide');\n    }); \n  }\n\n  dropHandler = (e) => {\n    e.preventDefault();\n    let target = e.target.dataset.position;\n     requestAnimationFrame(function () {\n      e.target.classList.remove('dragover');\n    });\n    this.removeClassesFromAll('dragover', 'moveable'); \n    let origin = e.dataTransfer.getData('text/plain');\n    if(this.newMove(origin, target)){\n      this.removeClassesFromAll('moveable', 'active');\n    }\n  }\n\n  dragOverHandler = (e) => {\n    e.preventDefault(e);\n    requestAnimationFrame(function () { \n      e.target.classList.add('dragover');\n    });\n  }\n  \n  dragLeaveHandler = (e) => {\n    e.preventDefault(); \n    requestAnimationFrame(function () {\n      e.target.classList.remove('dragover');\n    }); \n  }\n\n  handleControlClick = () => {  \n    this.setState(prevState=> ({show_control: !prevState.show_control}));  \n  }\n\n  handleHideClick = () => {\n    if(this.state.show_pieces){\n      document.getElementById('chessboard').classList.add('hidepieces');\n      this.setState({show_pieces: false});\n    }else{\n      document.getElementById('chessboard').classList.remove('hidepieces');\n      this.setState({show_pieces: true});\n    }\n  }\n\n  pgnClick = () =>{\n    this.setState({popUp: {content: <PGNDialog closePopup={this.closePopup} />, closePopup: this.closePopup}});\n  }\n\n  moveClick = (number) => {\n    if(number===999) number=this.state.history.length; // Last move \n    else if(number>this.state.history.length || number<0) return;  \n    this.setState({selected_move:number});\n  }\n\n  /**\n   * Calls the recursive autoplay function or updates state to stop autoplay-execution \n   **/\n  handleAutoplayClick = () => {\n    if(!this.state.autoplay){ \n      this.setState(state => ({\n        autoplay: !state.autoplay \n      }), ()=>this.autoplay(this.state.selected_move, Object.keys(this.state.history).length));\n    }else{\n      this.setState(state => ({\n        autoplay: !state.autoplay \n      }));\n    } \n  }\n\n  /**\n   * Click-Listener for squares, calls newMove function \n   **/\n  handleClick = (e) => {\n    if(this.state.promotion.from){\n      this.closePromotionPrompt(); \n      return;\n    }\n\n    let square = e.target.dataset.position;\n    let clicked = this.state.piece_clicked; \n\n    if(clicked){\n      if(this.newMove(clicked, square)){\n        this.removeClassesFromAll('moveable', 'active');\n        this.setState({piece_clicked: false});\n      }else{\n        console.log('Error in handleClick');\n      }\n    }\n  }\n\n  /**\n   * Click-Listener for pieces\n   **/\n  handlePieceClick = (e) => {\n    if(this.state.promotion.from){\n      this.closePromotionPrompt(); \n      return;\n    }\n\n    let square = e.target.dataset.position;\n    let clicked = this.state.piece_clicked;\n    if(square===clicked){\n      this.removeClassesFromAll('active', 'moveable');\n      this.setState({piece_clicked: null});\n      return; \n    }\n    if(!clicked){\n      if(this.pieceIsTurnColor(square)){\n        document.getElementById(square).classList.add('active');\n        this.highlightMoves(square);\n        this.setState({piece_clicked: square});\n      }\n    }else{\n      this.removeClassesFromAll('active', 'moveable');\n      if(this.squaresOfSameColor(square, clicked)){ // If another piece of the same color is clicked, switch to that piece being active  \n          document.getElementById(square).classList.add('active');\n          this.highlightMoves(square);\n          this.setState({piece_clicked: square});\n      }else{ // Capture \n        if(this.newMove(clicked, square)){\n          this.setState({piece_clicked: null});\n        }\n      }\n    }\n  }\n\n  closePopup = (text) => {\n    this.setState({popUp: false});\n    if(text) this.loadPGN(text);\n  }\n\n  /*\n  ----------------------------------------------------------------------------------------------------------------------------------\n  ----------------------------------------------------        UTILITY        -------------------------------------------------------\n  ----------------------------------------------------------------------------------------------------------------------------------\n  */\n\n\n  getRandomIntInclusive(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1) + min); //The maximum is inclusive and the minimum is inclusive\n  }\n\n  /**\n   * Recursive method, goes through all played moves, as long as uninterrupted by state \n   **/\n  autoplay(point, end){\n    console.log(point, end);\n    ++point;\n    if(point>end || !this.state.autoplay){\n      this.setState({autoplay:false});\n      return false;\n    } \n    this.setState({selected_move: point});\n    setTimeout(() => this.autoplay(point, end), AUTOPLAY_SPEED);\n  }\n\n  toggleConvert = (toggle) => toggle ? 'on' : 'off';  \n\n  loadPGNfromServer(url){\n    fetch(url)\n      .then(res => res.text())\n      .then(res => this.loadPGN(res));\n  }\n\n  /**\n   * Loads a proveded PGN (format to save chess-games)\n   * Passes it to chess.js and extracts titles and names of players and game result (if available) to display\n   * Loads moves into state (history and fen_history), as chess.js does not allow to browse through \n   * the move history. As such, each position in the game is saved via the corresponding FEN-string  \n   * Afterwards, chess.js is reset to the starting position \n   **/\n  loadPGN(pgn){\n    let load_result = chess.load_pgn(pgn);\n    let headers = chess.header(); \n    let players = {};\n\n    if(headers.Black){\n      let content = headers.BlackTitle ? `[${headers.BlackTitle}] ${headers.Black}` : headers.Black; \n      players.whiteplayer = content; \n    }if(headers.White){\n      let content = headers.WhiteTitle ? `[${headers.WhiteTitle}] ${headers.White}` : headers.White; \n      players.blackplayer = content;   \n    }\n\n    let result = headers.Result ? 'Result: ' + headers.Result : '';\n    if(headers.Termination) result += ` (${headers.Termination})`; \n    \n    if(load_result){\n      let history = chess.history({verbose:true});\n      let new_history = {}; \n      chess.reset();\n      let fen_history = [chess.fen()];\n      history.forEach((e, i)=>{\n        chess.move(e);\n        fen_history.push(chess.fen());\n        new_history[i] = {from: e.from, to:e.to, san:e.san};\n      });\n      chess.load(fen_history[0]);\n      this.setState({history: new_history, fen_history, loaded_game: pgn, selected_move: 0, result, players});\n\n    }else console.log(load_result);\n  }\n\n  loadFEN(fen){\n    let load_result = chess.load(fen);\n    let fen_history = [chess.fen()];\n    let history = {}; \n    this.setState({fen_history, history, selected_move: 0});\n  }\n\n  // If square is of format piece-square, remove piece (e.g. ba8 => a8) \n  cleanUpSquare = (square) => square.length>2 ? square.slice(1) : square;\n\n  getOtherChessColor = () => chess.turn() === chess.WHITE ? chess.BLACK : chess.WHITE;\n  \n  getRatio(w, b){\n    if(w===0&&b===0) return 0;  \n    let sum = w + b; \n    let whiteshare = w/sum*100; \n    return whiteshare; \n  }\n\n  colorConv = color => color==='w' ? 'white' : 'black';\n\n  squaresOfSameColor = (one, two) => chess.get(one).color===chess.get(two).color;\n\n  pieceIsTurnColor = (piece) => chess.get(piece).color === chess.turn();\n\n  getRowFromSquare(square){ return Number(square.charAt(1)); }\n\n  isOnPromotionSquare(square, color){\n    return color==='w' ? this.getRowFromSquare(square)==8 : this.getRowFromSquare(square)==1; \n  }\n\n  /*\n  ----------------------------------------------------------------------------------------------------------------------------------\n  ----------------------------------------------------     CHESS     ---------------------------------------------------------------\n  ----------------------------------------------------------------------------------------------------------------------------------\n  */\n\n\n  /**\n   * Called by the PromotionPromt-component, passes clicked option to newMove function and \n   **/\n  promotionHandler = (piece, from, to) => {\n    this.setState({promotion: {from: null, to:null, color:null}});\n    this.newMove(from, to, piece);\n  }\n\n  openPromotionPrompt(from, to, color){ this.setState({promotion: {from, to, color}}); }\n\n  closePromotionPrompt = () => { this.setState({promotion: {from: null, to:null, color:null}, piece_clicked: false}); }\n\n\n  makeRandomMove(){\n    let possible_moves = chess.moves({verbose:true});\n    let move = possible_moves[this.getRandomInt(possible_moves.length)]; \n    this.newMove(move.from, move.to)\n  }\n\n  getRandomInt(max) {\n    return Math.floor(Math.random() * max);\n  }\n\n\n  /**\n   * Method for handling new moves. Updates history (overrides if necessary) \n   * Checks for promotion (if a pawn reaches a respective square)\n   * otherwise passes move to chess.js and updates state \n   **/\n  newMove(from, to, promoteTo = false){\n    let fen_history = [...this.state.fen_history]; \n    let history = Object.assign({}, this.state.history);\n    let options = {from, to}; \n\n    if(this.state.selected_move<this.state.fen_history.length){ // Override if a previous move was selected\n      fen_history = fen_history.slice(0, this.state.selected_move+1);\n      let new_history = {}; \n      for(let [key, value] of Object.entries(history)){\n        if(key>=this.state.selected_move) break; \n        new_history[key] = value; \n      }\n        history = Object.assign({}, new_history);\n    }\n\n    if(promoteTo) options.promotion = promoteTo;\n    else{\n      if(this.isOnPromotionSquare(to, chess.turn()) && chess.get(from).type === 'p'){\n        if(this.state.promotion.from===null){ \n          this.openPromotionPrompt(from, to, this.colorConv(chess.turn()));\n          return;\n        }else{\n          options.promotion = promoteTo;\n        } \n      }\n    }\n\n    let res = chess.move(options);\n    \n    if(res){\n      fen_history.push(chess.fen());\n      history[this.state.selected_move] = {from: options.from, to: options.to, san: res.san};\n      if(chess.result()){ // If game over (for any reason)  \n        this.setState(prevState => (\n          {selected_move: prevState.selected_move+1, history, fen_history, result: chess.result()}\n        ));\n        return; \n      }\n      this.setState(prevState => (\n        {selected_move: prevState.selected_move+1, history, fen_history}\n      ));\n      return res.san; \n    }else{\n      console.log('Error making new move: '+res);\n      return false; \n    } \n  }\n\n  /*\n  ----------------------------------------------------------------------------------------------------------------------------------\n  ----------------------------------------------------         DOM            ------------------------------------------------------\n  ----------------------------------------------------------------------------------------------------------------------------------\n  */\n\n\n  highlightMoves(piece){\n    chess.moves({square:piece, verbose:true}).forEach(move=>{\n      this.highlightSquare(move.to, 'moveable'); \n    });\n  }\n\n  highlightSquare(square, highlightClass = 'highlighted'){\n    document.getElementById(square).classList.add(highlightClass);\n  }\n\n  removeClassFromAll = remove => {\n    document.querySelectorAll('.'+remove).forEach(el=>el.classList.remove(remove));\n  }\n\n  removeClassesFromAll = (...classes) => {\n    classes.forEach(e => document.querySelectorAll('.'+e).forEach(el=>el.classList.remove(e)));\n  }\n\n  hideBoardControl = () => {\n     this.removeClassFromAll('attacked');\n  }\n\n  /**\n   * Shows which squares are controlled how much by which color\n   * First removes all \n   * If a king is currently in check, only available moves (including blocks) are highlighted\n   * Otherwise calls the defended_pieces_all funtion from chess.js, which returns the number of attackers \n   * and defenders for each square. \n   * The ratio for each square is calculated and displayed by updating the respective variable in CSS for\n   * each square.  \n   **/\n  showBoardControl = (control_flag=undefined) => { \n    let show_control = (control_flag===undefined) ? this.state.show_control : control_flag;\n    this.removeClassesFromAll('attacked', 'kingcheck');\n    if(chess.in_check()){\n      let square = document.getElementById(chess.get_king());\n      square.classList.add('kingcheck');\n\n      if(!show_control) return; \n      chess.moves({verbose:true}).forEach(move=>{\n        let dom = document.getElementById(move.to);\n        dom.classList.add('attacked');\n        dom.style.setProperty(CONTROL_CLASS, '100%');\n      });\n      return;\n\n    }\n    if(!show_control) return; \n    let control = chess.defended_pieces_all(true, true, false);\n\n    for(let [square, value] of Object.entries(control)){\n      if(value.w>0||value.b>0){ \n        let dom = document.getElementById(square);\n        dom.classList.add('attacked');\n        let ratio = this.getRatio(value.w,value.b);\n        dom.style.setProperty(CONTROL_CLASS, ratio+'%');\n      }\n    } \n  }  \n}\n\nexport default App;\n","/Users/q/Documents/WebDocuments/chess/front/src/components/Button/Button.js",[],["67","68"],"/Users/q/Documents/WebDocuments/chess/front/src/components/Moves/Moves.js",[],"/Users/q/Documents/WebDocuments/chess/front/src/components/GamesList/GamesList.js",[],"/Users/q/Documents/WebDocuments/chess/front/src/components/PopUp/PopUp.js",[],"/Users/q/Documents/WebDocuments/chess/front/src/components/PGNDialog/PGNDialog.js",[],"/Users/q/Documents/WebDocuments/chess/front/src/components/PromotionPrompt/PromotionPrompt.js",[],"/Users/q/Documents/WebDocuments/chess/front/src/components/ImageButton/ImageButton.js",[],"/Users/q/Documents/WebDocuments/chess/front/src/components/Moves/MoveButton/MoveButton.js",[],"/Users/q/Documents/WebDocuments/chess/front/src/components/Piece/Piece.js",["69"],"import React from 'react'; \nimport './Piece.css';\nimport Draggable from 'react-draggable';\n\nlet colorConv = color => {\n\treturn color==='w' ? 'white' : 'black';\n}\n\n\n// let pieceToColor = piece => {\n// \treturn piece<0 ? -1 : 1; \n// }\n\n\nconst Piece = ({position, piece, onClick, dragStart, dragEnd, color}) => {\n\tlet pieceClass = `piece ${piece} ${colorConv(color)}`;\n\tlet properties = {'className': pieceClass, onDragEnd:dragEnd, onDragStart: (e)=>dragStart(e, position), onClick: onClick, draggable: 'true'}\n\treturn React.createElement('div', properties);\n}\n\nexport default Piece; ",["70","71"],"/Users/q/Documents/WebDocuments/chess/front/src/components/ToggleTextButton/ToggleTextButton.js",[],{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":8,"column":8,"nodeType":"78","messageId":"79","endLine":8,"endColumn":17},{"ruleId":"76","severity":1,"message":"80","line":10,"column":8,"nodeType":"78","messageId":"79","endLine":10,"endColumn":17},{"ruleId":"76","severity":1,"message":"81","line":19,"column":7,"nodeType":"78","messageId":"79","endLine":19,"endColumn":18},{"ruleId":"76","severity":1,"message":"82","line":494,"column":9,"nodeType":"78","messageId":"79","endLine":494,"endColumn":20},{"ruleId":"83","severity":1,"message":"84","line":521,"column":55,"nodeType":"85","messageId":"86","endLine":521,"endColumn":57},{"ruleId":"83","severity":1,"message":"84","line":521,"column":90,"nodeType":"85","messageId":"86","endLine":521,"endColumn":92},{"ruleId":"72","replacedBy":"87"},{"ruleId":"74","replacedBy":"88"},{"ruleId":"76","severity":1,"message":"80","line":3,"column":8,"nodeType":"78","messageId":"79","endLine":3,"endColumn":17},{"ruleId":"72","replacedBy":"89"},{"ruleId":"74","replacedBy":"90"},"no-native-reassign",["91"],"no-negated-in-lhs",["92"],"no-unused-vars","'GamesList' is defined but never used.","Identifier","unusedVar","'Draggable' is defined but never used.","'SQUARE_SIZE' is assigned a value but never used.","'load_result' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["91"],["92"],["91"],["92"],"no-global-assign","no-unsafe-negation"]