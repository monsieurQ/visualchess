{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/q/Documents/WebDocuments/ChessReact/chess/src/App.js\";\nimport './App.css';\nimport React, { Component } from 'react'; // import Board from './components/Board/Board';\n\nimport Moves from './components/Moves/Moves';\nimport Square from './components/Square/Square'; // TYPES (negative values for black)\n// PAWN - 1 \n// BISHOP - 2 \n// KNIGHT - 3 \n// ROOK - 4\n// QUEEN - 5 \n// KING - 6 \n\nconst startingPosition = [-4, -2, -3, -5, -6, -3, -2, -4, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 4, 2, 3, 5, 6, 3, 2, 4];\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.createSquares = position => {\n      let squares = [];\n      let click = this.handleClick;\n      let pClick = this.handlePieceClick;\n      let bgs = ['black', 'white'];\n      let tick = 0;\n      let counter = 0;\n      let onDrop = this.dropHandler;\n      position.forEach((square, index) => {\n        squares[index] = /*#__PURE__*/_jsxDEV(Square, {\n          pClick: pClick,\n          index: index,\n          onClick: click,\n          onDrop: onDrop,\n          background: bgs[tick],\n          piece: square\n        }, 's' + index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 24\n        }, this);\n        counter++;\n        if (counter > 7) counter = 0;else tick = tick === 0 ? 1 : 0;\n      });\n      return squares;\n    };\n\n    this.moveClick = number => {\n      console.log('move clicked', number); // this.setState(prevState=>({\n      //   squares: this.initSquares(number, prevState.history[number])\n      // }));\n    };\n\n    this.handleClick = e => {\n      console.log(this.state.squares_history);\n      this.setState(prevState => ({\n        squares: [...this.state.squares_history[0]]\n      }));\n    };\n\n    this.handlePieceClick = (e, position) => {\n      this.state.squares[position].availableMoves();\n    };\n\n    this.dropHandler = e => {\n      e.preventDefault();\n      e.target.classList.remove('dragover');\n      let target = e.target.dataset.position;\n      let origin = e.dataTransfer.getData(\"text/plain\");\n      this.newMove(origin, target);\n    };\n\n    this.state = {\n      currentMove: 0,\n      lastMove: null,\n      colorToMove: 1,\n      selectedMove: 0,\n      positions: [startingPosition]\n    };\n  }\n\n  render() {\n    let position = this.state.positions[this.state.selectedMove];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board\",\n        children: [\" \", this.createSquares(position), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"moves\",\n        children: [\" \", /*#__PURE__*/_jsxDEV(Moves, {\n          onClick: this.moveClick,\n          lastMove: this.state.lastMove\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 34\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this);\n  }\n\n  switchColor() {\n    return this.state.colorToMove === 1 ? -1 : 1;\n  }\n\n  getColor(square) {\n    return square < 0 ? -1 : 1; //-1 = black, 1 = white \n  }\n\n  hasPiece(square) {\n    return Math.abs(square) > 0;\n  }\n\n  newMove(from, to) {\n    let positions = JSON.parse(JSON.stringify(this.state.positions));\n    let old_position = Array.from(positions[positions.length - 1]);\n    let new_position = Array.from(old_position);\n    if (this.getColor(old_position[from]) !== this.state.colorToMove) return;\n\n    if (this.hasPiece(old_position[to])) {\n      if (this.getColor(old_position[from]) === this.getColor(old_position[to])) return;\n    }\n\n    let moved_piece = old_position[from];\n    new_position[to] = new_position[from];\n    new_position[from] = 0;\n    positions.push(new_position);\n    this.setState(prevState => ({\n      positions: positions,\n      lastMove: [moved_piece, to],\n      currentMove: prevState.currentMove + 1,\n      selectedMove: prevState.selectedMove + 1,\n      colorToMove: this.switchColor()\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/q/Documents/WebDocuments/ChessReact/chess/src/App.js"],"names":["React","Component","Moves","Square","startingPosition","App","constructor","createSquares","position","squares","click","handleClick","pClick","handlePieceClick","bgs","tick","counter","onDrop","dropHandler","forEach","square","index","moveClick","number","console","log","e","state","squares_history","setState","prevState","availableMoves","preventDefault","target","classList","remove","dataset","origin","dataTransfer","getData","newMove","currentMove","lastMove","colorToMove","selectedMove","positions","render","switchColor","getColor","hasPiece","Math","abs","from","to","JSON","parse","stringify","old_position","Array","length","new_position","moved_piece","push"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, { Component } from 'react';\n// import Board from './components/Board/Board';\nimport Moves from './components/Moves/Moves';\nimport Square from './components/Square/Square';\n\n\n// TYPES (negative values for black)\n// PAWN - 1 \n// BISHOP - 2 \n// KNIGHT - 3 \n// ROOK - 4\n// QUEEN - 5 \n// KING - 6 \n\nconst startingPosition = \n[\n-4, -2, -3, -5, -6, -3, -2, -4,\n-1, -1, -1, -1, -1, -1, -1, -1,\n0, 0, 0, 0, 0, 0, 0, 0,\n0, 0, 0, 0, 0, 0, 0, 0,\n0, 0, 0, 0, 0, 0, 0, 0,\n0, 0, 0, 0, 0, 0, 0, 0,\n1, 1, 1, 1, 1, 1, 1, 1,\n4, 2, 3, 5, 6, 3, 2, 4\n];\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      currentMove: 0,\n      lastMove: null,\n      colorToMove: 1,\n      selectedMove: 0,\n      positions: [startingPosition]\n    };  \n  }\n\n  createSquares = (position) => {\n    let squares = []; \n    let click = this.handleClick;\n    let pClick = this.handlePieceClick;\n    let bgs = ['black', 'white'];\n    let tick = 0;\n    let counter = 0; \n    let onDrop = this.dropHandler;\n    position.forEach((square, index) => {\n      squares[index] = <Square key={'s'+index} pClick={pClick} index={index} onClick={click} onDrop={onDrop} background={bgs[tick]} piece={square} />;\n      counter++; \n      if(counter>7) counter = 0; \n      else tick = (tick===0)? 1 : 0;\n\n    });\n    return squares; \n  }\n\n  render(){\n    let position = this.state.positions[this.state.selectedMove];\n    return(\n      <div className='container'>\n        <div className=\"board\"> {this.createSquares(position)} </div>\n        <div className='moves' > <Moves onClick={this.moveClick} lastMove={this.state.lastMove} /> </div>\n      </div> \n    );\n  } \n\n  moveClick = (number) => {\n    console.log('move clicked',number);\n    // this.setState(prevState=>({\n    //   squares: this.initSquares(number, prevState.history[number])\n    // }));\n  }\n\n  handleClick = (e) => {\n    console.log(this.state.squares_history);\n    this.setState(prevState=>({\n      squares: [...this.state.squares_history[0]]\n    }));\n  };\n\n  handlePieceClick = (e, position) => {\n    this.state.squares[position].availableMoves();\n  }\n\n  dropHandler = (e) => {\n    e.preventDefault();\n    e.target.classList.remove('dragover');\n    let target = e.target.dataset.position; \n    let origin = e.dataTransfer.getData(\"text/plain\");\n    this.newMove(origin, target)\n  };\n\n  switchColor(){\n    return this.state.colorToMove === 1 ? -1 : 1; \n  }\n\n  getColor(square){\n    return square<0 ? -1 : 1; //-1 = black, 1 = white \n  }\n\n  hasPiece(square){\n    return Math.abs(square)>0; \n  }\n\n  newMove(from, to){\n    let positions = JSON.parse(JSON.stringify(this.state.positions));\n\n    let old_position = Array.from(positions[positions.length-1]);\n    let new_position = Array.from(old_position);\n    if(this.getColor(old_position[from])!==this.state.colorToMove) return; \n    if(this.hasPiece(old_position[to])){ \n      if(this.getColor(old_position[from])===this.getColor(old_position[to])) return; \n    }\n    let moved_piece = old_position[from];\n    new_position[to] = new_position[from];\n    new_position[from] = 0;\n\n    positions.push(new_position);\n\n    this.setState(prevState=>({\n      positions: positions,\n      lastMove: [moved_piece, to],\n      currentMove: prevState.currentMove+1,\n      selectedMove: prevState.selectedMove+1,\n      colorToMove: this.switchColor() \n    }));\n  }\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}