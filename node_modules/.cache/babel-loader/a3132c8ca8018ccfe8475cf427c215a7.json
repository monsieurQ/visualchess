{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/q/Documents/WebDocuments/ChessReact/chess/src/components/Square/Square.js\";\nimport React from 'react';\nimport './Square.css';\nimport Piece from '../Piece/Piece'; // import Draggable from 'react-draggable';\n\nfunction Square({\n  row,\n  column,\n  background,\n  piece,\n  onClick,\n  pieceClick,\n  onDrop\n}) {\n  let dragOverHandler = e => {\n    e.preventDefault(e);\n    requestAnimationFrame(function () {\n      e.target.classList.add('dragover');\n    });\n  };\n\n  let classes = 'square ' + background;\n  let position = Number('' + column + row);\n  let returnT = piece ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes,\n    \"data-row\": row,\n    \"data-column\": column,\n    \"data-position\": position // onDragOver={this.dragOverHandler}\n    // onDragLeave={this.dragLeaveHandler}\n    ,\n    onDrop: onDrop,\n    children: /*#__PURE__*/_jsxDEV(Piece, {\n      position: position,\n      onClick: pieceClick // onDragStart={this.dragStartHandler}\n      // onDragEnd={this.dragEndHandler}\n      ,\n      type: piece[0],\n      color: piece[1]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes // onDrop={onDrop}\n    ,\n    \"data-position\": position // onDragLeave={this.dragLeaveHandler} \n    // onDragEnd={this.dragEndHandler} \n    // onDragOver={this.dragOverHandler} \n    ,\n    onClick: onClick,\n    \"data-row\": row,\n    \"data-column\": column\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n  return returnT;\n} // dragStartHandler = (e) => {\n// \te.dataTransfer.dropEffect = \"move\";\n// \te.dataTransfer.setData(\"text/plain\", e.target.dataset.position); \n// \trequestAnimationFrame(function () {\n// \t\te.target.classList.add('hide');\n// \t});\n// };\n// // dropHandler = (e) => {\n// // \te.preventDefault();\n// // \tconsole.log('drop, e.target', e.target);\n// // \tlet data = e.dataTransfer.getData(\"text/plain\");\n// // \tconsole.log('drop, moved piece', data);\n// // };\n// dragLeaveHandler = (e) => {\n// \te.preventDefault(); \n// \trequestAnimationFrame(function () {\n// \t\te.target.classList.remove('dragover');\n// \t}); \n// };\n// dragEndHandler = (e) =>{\n// \te.preventDefault();\n// \tlet element = e.target;\n//  \t  \trequestAnimationFrame(function () {\n//     \telement.classList.remove('hide');\n//   \t});\n// };\n// dropHandler = (e) => {\n// \te.preventDefault();\n// \tlet data = e.dataTransfer.getData(\"text/plain\");\n// \t\tlet strs = data.split(\"/\"); \n// \tlet piece = strs[0];\n// \tlet original_position = strs[1];\n// \tlet new_position = e.target.id;\n// \tif(e.target.localName==\"piece\"){\n// \t\tif(piece==e.target.id){\n// \t \t\tconsole.log(\"Same piece\");\n// \t \t\treturn; \n// \t \t}else{\n// \t \t\t// console.log(piecesObj[original_position]);\n// \t \t\t// console.log(piecesObj[convertPieceID(e.target.id)]);\n// \t \t\tif(isOfSameColor(piecesObj[convertPieceID(piece)], piecesObj[convertPieceID(e.target.id)])){\n// \t \t\t\tconsole.log(\"Same color\");\n// \t \t\t\treturn;\n// \t \t\t}else{\n// \t \t\t\tcapturePiece(original_position, e.target.parentNode.id);\n// \t \t\t\treturn;\n// \t \t\t} \n// \t \t}\n// \t}\n// \telse movePiece(original_position, new_position);\n// \t// console.log(e.target.id);\n// }\n\n\n_c = Square;\nexport default Square;\n\nvar _c;\n\n$RefreshReg$(_c, \"Square\");","map":{"version":3,"sources":["/Users/q/Documents/WebDocuments/ChessReact/chess/src/components/Square/Square.js"],"names":["React","Piece","Square","row","column","background","piece","onClick","pieceClick","onDrop","dragOverHandler","e","preventDefault","requestAnimationFrame","target","classList","add","classes","position","Number","returnT"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,cAAP;AACA,OAAOC,KAAP,MAAkB,gBAAlB,C,CACA;;AAKA,SAASC,MAAT,CAAgB;AAACC,EAAAA,GAAD;AAAMC,EAAAA,MAAN;AAAcC,EAAAA,UAAd;AAA0BC,EAAAA,KAA1B;AAAiCC,EAAAA,OAAjC;AAA0CC,EAAAA,UAA1C;AAAsDC,EAAAA;AAAtD,CAAhB,EAA8E;AAE7E,MAAIC,eAAe,GAAIC,CAAD,IAAO;AAC5BA,IAAAA,CAAC,CAACC,cAAF,CAAiBD,CAAjB;AACAE,IAAAA,qBAAqB,CAAC,YAAY;AACjCF,MAAAA,CAAC,CAACG,MAAF,CAASC,SAAT,CAAmBC,GAAnB,CAAuB,UAAvB;AACA,KAFoB,CAArB;AAGA,GALD;;AAOA,MAAIC,OAAO,GAAG,YAAUZ,UAAxB;AACA,MAAIa,QAAQ,GAAGC,MAAM,CAAC,KAAGf,MAAH,GAAUD,GAAX,CAArB;AACA,MAAIiB,OAAO,GAAGd,KAAK,gBAChB;AAAK,IAAA,SAAS,EAAEW,OAAhB;AAAyB,gBAAUd,GAAnC;AACD,mBAAaC,MADZ;AAED,qBAAec,QAFd,CAGD;AACA;AAJC;AAKD,IAAA,MAAM,EAAET,MALP;AAAA,2BAOD,QAAC,KAAD;AAAO,MAAA,QAAQ,EAAES,QAAjB;AACC,MAAA,OAAO,EAAEV,UADV,CAEC;AACA;AAHD;AAIC,MAAA,IAAI,EAAEF,KAAK,CAAC,CAAD,CAJZ;AAIiB,MAAA,KAAK,EAAEA,KAAK,CAAC,CAAD;AAJ7B;AAAA;AAAA;AAAA;AAAA;AAPC;AAAA;AAAA;AAAA;AAAA,UADgB,gBAchB;AAAK,IAAA,SAAS,EAAEW,OAAhB,CACD;AADC;AAED,qBAAeC,QAFd,CAGD;AACA;AACA;AALC;AAMD,IAAA,OAAO,EAAEX,OANR;AAOD,gBAAUJ,GAPT;AAQD,mBAAaC;AARZ;AAAA;AAAA;AAAA;AAAA,UAdH;AAuBA,SAAOgB,OAAP;AACA,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;KAhGQlB,M;AAmGT,eAAeA,MAAf","sourcesContent":["import React from 'react'; \nimport './Square.css';\nimport Piece from '../Piece/Piece';\n// import Draggable from 'react-draggable';\n\n\n\n\nfunction Square({row, column, background, piece, onClick, pieceClick, onDrop}){\n\n\tlet dragOverHandler = (e) => {\n\t\te.preventDefault(e);\n\t\trequestAnimationFrame(function () {\n\t\t\te.target.classList.add('dragover');\n\t\t});\n\t};\n\n\tlet classes = 'square '+background;\n\tlet position = Number(''+column+row);\n\tlet returnT = piece \n\t\t? <div className={classes} data-row={row} \n\t\t\tdata-column={column}\n\t\t\tdata-position={position}\n\t\t\t// onDragOver={this.dragOverHandler}\n\t\t\t// onDragLeave={this.dragLeaveHandler}\n\t\t\tonDrop={onDrop}\n\t\t\t> \n\t\t\t<Piece position={position} \n\t\t\t\tonClick={pieceClick}\n\t\t\t\t// onDragStart={this.dragStartHandler}\n\t\t\t\t// onDragEnd={this.dragEndHandler}\n\t\t\t\ttype={piece[0]} color={piece[1]} /> \n\t\t</div>\n\t\t: <div className={classes} \n\t\t\t// onDrop={onDrop}\n\t\t\tdata-position={position} \n\t\t\t// onDragLeave={this.dragLeaveHandler} \n\t\t\t// onDragEnd={this.dragEndHandler} \n\t\t\t// onDragOver={this.dragOverHandler} \n\t\t\tonClick={onClick} \n\t\t\tdata-row={row} \n\t\t\tdata-column={column} />;\n\treturn returnT;\n}\n\n\t// dragStartHandler = (e) => {\n\t// \te.dataTransfer.dropEffect = \"move\";\n\t// \te.dataTransfer.setData(\"text/plain\", e.target.dataset.position); \n\t// \trequestAnimationFrame(function () {\n\t// \t\te.target.classList.add('hide');\n\t// \t});\n\t// };\n\n\t// // dropHandler = (e) => {\n\t// // \te.preventDefault();\n\t// // \tconsole.log('drop, e.target', e.target);\n\t// // \tlet data = e.dataTransfer.getData(\"text/plain\");\n\t// // \tconsole.log('drop, moved piece', data);\n\t// // };\n\n\n\n\t// dragLeaveHandler = (e) => {\n\t// \te.preventDefault(); \n\t// \trequestAnimationFrame(function () {\n\t// \t\te.target.classList.remove('dragover');\n\t// \t}); \n\t// };\n\n\t// dragEndHandler = (e) =>{\n\t// \te.preventDefault();\n\t// \tlet element = e.target;\n //  \t  \trequestAnimationFrame(function () {\n\t//     \telement.classList.remove('hide');\n\t//   \t});\n\n\t// };\n\n\t\n\t\t// dropHandler = (e) => {\n\t// \te.preventDefault();\n\t// \tlet data = e.dataTransfer.getData(\"text/plain\");\n // \t\tlet strs = data.split(\"/\"); \n\t// \tlet piece = strs[0];\n\t// \tlet original_position = strs[1];\n\t// \tlet new_position = e.target.id;\n\t// \tif(e.target.localName==\"piece\"){\n\t// \t\tif(piece==e.target.id){\n\t// \t \t\tconsole.log(\"Same piece\");\n\t// \t \t\treturn; \n\t// \t \t}else{\n\t// \t \t\t// console.log(piecesObj[original_position]);\n\t// \t \t\t// console.log(piecesObj[convertPieceID(e.target.id)]);\n\t// \t \t\tif(isOfSameColor(piecesObj[convertPieceID(piece)], piecesObj[convertPieceID(e.target.id)])){\n\t// \t \t\t\tconsole.log(\"Same color\");\n\t// \t \t\t\treturn;\n\t// \t \t\t}else{\n\t// \t \t\t\tcapturePiece(original_position, e.target.parentNode.id);\n\t// \t \t\t\treturn;\n\t// \t \t\t} \n\t// \t \t}\n\t// \t}\n\t// \telse movePiece(original_position, new_position);\n\t// \t// console.log(e.target.id);\n\t// }\n\n\nexport default Square; "]},"metadata":{},"sourceType":"module"}