{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _Reflect$construct = require(\"@babel/runtime-corejs2/core-js/reflect/construct\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports[\"default\"] = exports.Board = exports.NeighborType = void 0;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/toConsumableArray\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/slicedToArray\"));\n\nvar _parseInt2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/parse-int\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/getPrototypeOf\"));\n\nvar _piece = require(\"./piece\");\n\nvar _events = require(\"events\");\n\nvar _square = require(\"./square\");\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = (0, _getPrototypeOf2[\"default\"])(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor;\n      result = _Reflect$construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return (0, _possibleConstructorReturn2[\"default\"])(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false;\n  if (_Reflect$construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(_Reflect$construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n} // types\n\n\nvar NeighborType = {\n  Above: {\n    offset: 8\n  },\n  AboveLeft: {\n    offset: 7\n  },\n  AboveRight: {\n    offset: 9\n  },\n  Below: {\n    offset: -8\n  },\n  BelowLeft: {\n    offset: -9\n  },\n  BelowRight: {\n    offset: -7\n  },\n  KnightAboveLeft: {\n    offset: 15\n  },\n  KnightAboveRight: {\n    offset: 17\n  },\n  KnightBelowLeft: {\n    offset: -17\n  },\n  KnightBelowRight: {\n    offset: -15\n  },\n  KnightLeftAbove: {\n    offset: 6\n  },\n  KnightLeftBelow: {\n    offset: -10\n  },\n  KnightRightAbove: {\n    offset: 10\n  },\n  KnightRightBelow: {\n    offset: -6\n  },\n  Left: {\n    offset: -1\n  },\n  Right: {\n    offset: 1\n  }\n}; // ctor\n\nexports.NeighborType = NeighborType;\n\nvar Board = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(Board, _EventEmitter);\n\n  var _super = _createSuper(Board);\n\n  function Board(squares) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, Board);\n    _this = _super.call(this);\n    _this.squares = squares;\n    return _this;\n  }\n\n  (0, _createClass2[\"default\"])(Board, [{\n    key: \"getNeighborSquare\",\n    value: function getNeighborSquare(sq, n) {\n      if (sq && n) {\n        // validate boundaries of board\n        if (sq.file === 'a' && (n === NeighborType.AboveLeft || n === NeighborType.BelowLeft || n === NeighborType.Left)) {\n          return null;\n        }\n\n        if (sq.file === 'h' && (n === NeighborType.AboveRight || n === NeighborType.BelowRight || n === NeighborType.Right)) {\n          return null;\n        }\n\n        if (sq.rank === 1 && (n === NeighborType.Below || n === NeighborType.BelowLeft || n === NeighborType.BelowRight)) {\n          return null;\n        }\n\n        if (sq.rank === 8 && (n === NeighborType.Above || n === NeighborType.AboveLeft || n === NeighborType.AboveRight)) {\n          return null;\n        } // validate file\n\n\n        var fIndex = 'abcdefgh'.indexOf(sq.file),\n            i = 0;\n\n        if (fIndex !== -1 && sq.rank > 0 && sq.rank < 9) {\n          // find the index\n          i = 8 * (sq.rank - 1) + fIndex + n.offset;\n\n          if (this.squares && this.squares.length > i && i > -1) {\n            return this.squares[i];\n          }\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"getSquare\",\n    value: function getSquare(f, r) {\n      // check for shorthand\n      if (typeof f === 'string' && f.length === 2 && !r) {\n        r = (0, _parseInt2[\"default\"])(f.charAt(1), 10);\n        f = f.charAt(0);\n      } // validate file\n\n\n      var fIndex = 'abcdefgh'.indexOf(f),\n          i = 0;\n\n      if (fIndex !== -1 && r > 0 && r < 9) {\n        // Find the index\n        i = 8 * (r - 1) + fIndex;\n\n        if (this.squares && this.squares.length > i) {\n          return this.squares[i];\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"getSquares\",\n    value: function getSquares(side) {\n      var list = [];\n\n      for (var i = 0; i < this.squares.length; i++) {\n        if (this.squares[i].piece && this.squares[i].piece.side === side) {\n          list.push(this.squares[i]);\n        }\n      }\n\n      return list;\n    }\n  }, {\n    key: \"move\",\n    value: function move(src, dest, n) {\n      if (typeof src === 'string' && src.length === 2) {\n        src = this.getSquare(src);\n      }\n\n      if (typeof dest === 'string' && dest.length === 2) {\n        dest = this.getSquare(dest);\n      }\n\n      var simulate;\n\n      if (typeof n === 'boolean') {\n        simulate = n;\n        n = null;\n      }\n\n      if (src && src.file && src.rank && dest && dest.file && dest.rank) {\n        var move = {\n          algebraic: n,\n          capturedPiece: dest.piece,\n          castle: false,\n          enPassant: false,\n          postSquare: dest,\n          prevSquare: src\n        },\n            p = src.piece,\n            sq = null,\n            undo = function undo(b, m) {\n          return function () {\n            m.prevSquare.piece = m.postSquare.piece;\n            m.postSquare.piece = m.capturedPiece;\n\n            if (!m.enPassant) {\n              m.postSquare.piece = m.capturedPiece;\n            } else {\n              b.getSquare(m.postSquare.file, m.prevSquare.rank).piece = m.capturedPiece; // there is no piece on the post square in the event of\n              // an en-passant, clear anything that me be present as\n              // a result of the move (fix for issue #8)\n\n              m.postSquare.piece = null;\n            }\n\n            if (m.castle) {\n              sq = b.getSquare(move.postSquare.file === 'g' ? 'f' : 'd', move.postSquare.rank);\n              b.getSquare(move.postSquare.file === 'g' ? 'h' : 'a', move.postSquare.rank).piece = sq.piece;\n              sq.piece = null;\n            }\n          };\n        };\n\n        dest.piece = p;\n        move.castle = p.type === _piece.PieceType.King && p.moveCount === 0 && (move.postSquare.file === 'g' || move.postSquare.file === 'c');\n        move.enPassant = p.type === _piece.PieceType.Pawn && move.capturedPiece === null && move.postSquare.file !== move.prevSquare.file;\n        move.prevSquare.piece = null; // check for en-passant\n\n        if (move.enPassant) {\n          sq = this.getSquare(move.postSquare.file, move.prevSquare.rank);\n          move.capturedPiece = sq.piece;\n          sq.piece = null;\n        } // check for castle\n\n\n        if (move.castle) {\n          sq = this.getSquare(move.postSquare.file === 'g' ? 'h' : 'a', move.postSquare.rank);\n\n          if (sq.piece === null) {\n            move.castle = false;\n          } else {\n            this.getSquare(move.postSquare.file === 'g' ? 'f' : 'd', move.postSquare.rank).piece = sq.piece;\n            sq.piece = null;\n          }\n        }\n\n        if (!simulate) {\n          p.moveCount++;\n          this.lastMovedPiece = p;\n\n          if (move.capturedPiece) {\n            this.emit('capture', move);\n          }\n\n          if (move.castle) {\n            this.emit('castle', move);\n          }\n\n          if (move.enPassant) {\n            this.emit('enPassant', move);\n          }\n\n          this.emit('move', move);\n        }\n\n        return {\n          move: move,\n          undo: undo(this, move, simulate)\n        };\n      }\n    }\n  }, {\n    key: \"promote\",\n    value: function promote(sq, p) {\n      // update move count and last piece\n      p.moveCount = sq.piece.moveCount;\n      this.lastMovedPiece = p; // set to square\n\n      sq.piece = p;\n      this.emit('promote', sq);\n      return sq;\n    }\n  }], [{\n    key: \"create\",\n    value: function create() {\n      var b = new Board([]),\n          f = 0,\n          i = 0,\n          r = 0,\n          sq = null;\n      /* eslint no-magic-numbers:0 */\n\n      for (i = 0; i < 64; i++) {\n        f = Math.floor(i % 8);\n        r = Math.floor(i / 8) + 1;\n        sq = _square.Square.create('abcdefgh'[f], r);\n        b.squares.push(sq);\n\n        if (r === 1 || r === 8) {\n          // Named pieces\n          if (f === 0 || f === 7) {\n            // Rookage\n            sq.piece = _piece.Piece.createRook(r === 1 ? _piece.SideType.White : _piece.SideType.Black);\n          } else if (f === 1 || f === 6) {\n            // Knights\n            sq.piece = _piece.Piece.createKnight(r === 1 ? _piece.SideType.White : _piece.SideType.Black);\n          } else if (f === 2 || f === 5) {\n            // Bish's\n            sq.piece = _piece.Piece.createBishop(r === 1 ? _piece.SideType.White : _piece.SideType.Black);\n          } else if (f === 3) {\n            sq.piece = _piece.Piece.createQueen(r === 1 ? _piece.SideType.White : _piece.SideType.Black);\n          } else {\n            sq.piece = _piece.Piece.createKing(r === 1 ? _piece.SideType.White : _piece.SideType.Black);\n          }\n        } else if (r === 2 || r === 7) {\n          // Pawns\n          sq.piece = _piece.Piece.createPawn(r === 2 ? _piece.SideType.White : _piece.SideType.Black);\n        }\n      }\n\n      return b;\n    }\n  }, {\n    key: \"load\",\n    value: function load(fen) {\n      var pieces = {\n        b: {\n          arg: _piece.SideType.Black,\n          method: 'createBishop'\n        },\n        B: {\n          arg: _piece.SideType.White,\n          method: 'createBishop'\n        },\n        k: {\n          arg: _piece.SideType.Black,\n          method: 'createKing'\n        },\n        K: {\n          arg: _piece.SideType.White,\n          method: 'createKing'\n        },\n        n: {\n          arg: _piece.SideType.Black,\n          method: 'createKnight'\n        },\n        N: {\n          arg: _piece.SideType.White,\n          method: 'createKnight'\n        },\n        p: {\n          arg: _piece.SideType.Black,\n          method: 'createPawn'\n        },\n        P: {\n          arg: _piece.SideType.White,\n          method: 'createPawn'\n        },\n        q: {\n          arg: _piece.SideType.Black,\n          method: 'createQueen'\n        },\n        Q: {\n          arg: _piece.SideType.White,\n          method: 'createQueen'\n        },\n        r: {\n          arg: _piece.SideType.Black,\n          method: 'createRook'\n        },\n        R: {\n          arg: _piece.SideType.White,\n          method: 'createRook'\n        }\n      };\n\n      var _fen$split = fen.split(' '),\n          _fen$split2 = (0, _slicedToArray2[\"default\"])(_fen$split, 1),\n          board\n      /* , turn, castling, enPassant, halfs, moves */\n      = _fen$split2[0];\n\n      var lines = board.split('/').map(function (line, rank) {\n        var arr = line.split('');\n        var file = 0;\n        return arr.reduce(function (acc, cur) {\n          if (!isNaN(Number(cur))) {\n            for (var i = 0; i < Number(cur); i += 1) {\n              acc.push(_square.Square.create('abcdefgh'[file], rank + 1));\n              file = file < 7 ? file + 1 : 0;\n            }\n          } else {\n            var square = _square.Square.create('abcdefgh'[file], rank + 1);\n\n            square.piece = _piece.Piece[pieces[cur].method](pieces[cur].arg);\n            acc.push(square);\n            file = file < 7 ? file + 1 : 0;\n          }\n\n          return acc;\n        }, []);\n      });\n      return new Board(lines.reduce(function (acc, cur) {\n        acc.push.apply(acc, (0, _toConsumableArray2[\"default\"])(cur));\n        return acc;\n      }, []));\n    }\n  }]);\n  return Board;\n}(_events.EventEmitter); // exports\n\n\nexports.Board = Board;\nvar _default = {\n  Board: Board,\n  NeighborType: NeighborType\n};\nexports[\"default\"] = _default;","map":{"version":3,"sources":["board.js"],"names":["NeighborType","Above","offset","AboveLeft","AboveRight","Below","BelowLeft","BelowRight","KnightAboveLeft","KnightAboveRight","KnightBelowLeft","KnightBelowRight","KnightLeftAbove","KnightLeftBelow","KnightRightAbove","KnightRightBelow","Left","Right","Board","EventEmitter","b","f","i","r","sq","Math","Square","Piece","SideType","fen","pieces","arg","method","B","k","K","n","N","p","P","q","Q","R","board","lines","arr","line","file","isNaN","Number","acc","rank","square","fIndex","side","list","src","dest","simulate","move","algebraic","capturedPiece","castle","enPassant","postSquare","prevSquare","undo","m","PieceType"],"mappings":"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","sourcesContent":["/**\n\tThe Board is the representation of the current position of the pieces on\n\tthe squares it contains.\n*/\nimport { Piece, PieceType, SideType } from './piece';\nimport { EventEmitter } from 'events';\nimport { Square } from './square';\n\n// types\nexport var NeighborType = {\n\tAbove : { offset : 8 },\n\tAboveLeft : { offset : 7 },\n\tAboveRight : { offset : 9 },\n\tBelow : { offset : -8 },\n\tBelowLeft : { offset : -9 },\n\tBelowRight : { offset : -7 },\n\tKnightAboveLeft : { offset : 15 },\n\tKnightAboveRight : { offset : 17 },\n\tKnightBelowLeft : { offset : -17 },\n\tKnightBelowRight : { offset : -15 },\n\tKnightLeftAbove : { offset : 6 },\n\tKnightLeftBelow : { offset : -10 },\n\tKnightRightAbove : { offset : 10 },\n\tKnightRightBelow : { offset : -6 },\n\tLeft : { offset : -1 },\n\tRight : { offset : 1 }\n};\n\n// ctor\nexport class Board extends EventEmitter {\n\tconstructor (squares) {\n\t\tsuper();\n\n\t\tthis.squares = squares;\n\t}\n\n\tstatic create () {\n\t\tlet\n\t\t\tb = new Board([]),\n\t\t\tf = 0,\n\t\t\ti = 0,\n\t\t\tr = 0,\n\t\t\tsq = null;\n\n\t\t/* eslint no-magic-numbers:0 */\n\t\tfor (i = 0; i < 64; i++) {\n\t\t\tf = Math.floor(i % 8);\n\t\t\tr = Math.floor(i / 8) + 1;\n\t\t\tsq = Square.create('abcdefgh'[f], r);\n\n\t\t\tb.squares.push(sq);\n\n\t\t\tif (r === 1 || r === 8) { // Named pieces\n\t\t\t\tif (f === 0 || f === 7) { // Rookage\n\t\t\t\t\tsq.piece = Piece.createRook(\n\t\t\t\t\t\tr === 1 ? SideType.White : SideType.Black\n\t\t\t\t\t);\n\t\t\t\t} else if (f === 1 || f === 6) { // Knights\n\t\t\t\t\tsq.piece = Piece.createKnight(\n\t\t\t\t\t\tr === 1 ? SideType.White : SideType.Black\n\t\t\t\t\t);\n\t\t\t\t} else if (f === 2 || f === 5) { // Bish's\n\t\t\t\t\tsq.piece = Piece.createBishop(\n\t\t\t\t\t\tr === 1 ? SideType.White : SideType.Black\n\t\t\t\t\t);\n\t\t\t\t} else if (f === 3) {\n\t\t\t\t\tsq.piece = Piece.createQueen(\n\t\t\t\t\t\tr === 1 ? SideType.White : SideType.Black\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tsq.piece = Piece.createKing(\n\t\t\t\t\t\tr === 1 ? SideType.White : SideType.Black\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else if (r === 2 || r === 7) { // Pawns\n\t\t\t\tsq.piece = Piece.createPawn(\n\t\t\t\t\tr === 2 ? SideType.White : SideType.Black\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn b;\n\t}\n\n\tstatic load (fen) {\n\t\tconst pieces = {\n\t\t\tb: { arg: SideType.Black, method: 'createBishop' },\n\t\t\tB: { arg: SideType.White, method: 'createBishop' },\n\t\t\tk: { arg: SideType.Black, method: 'createKing' },\n\t\t\tK: { arg: SideType.White, method: 'createKing' },\n\t\t\tn: { arg: SideType.Black, method: 'createKnight' },\n\t\t\tN: { arg: SideType.White, method: 'createKnight' },\n\t\t\tp: { arg: SideType.Black, method: 'createPawn' },\n\t\t\tP: { arg: SideType.White, method: 'createPawn' },\n\t\t\tq: { arg: SideType.Black, method: 'createQueen' },\n\t\t\tQ: { arg: SideType.White, method: 'createQueen' },\n\t\t\tr: { arg: SideType.Black, method: 'createRook' },\n\t\t\tR: { arg: SideType.White, method: 'createRook' }\n\t\t};\n\n\t\tconst [board/* , turn, castling, enPassant, halfs, moves */] = fen.split(' ');\n\t\tconst lines = board.split('/')\n\t\t\t.map((line, rank) => {\n\t\t\t\tconst arr = line.split('');\n\t\t\t\tlet file = 0;\n\n\t\t\t\treturn arr.reduce((acc, cur) => {\n\t\t\t\t\tif (!isNaN(Number(cur))) {\n\t\t\t\t\t\tfor (let i = 0; i < Number(cur); i += 1) {\n\t\t\t\t\t\t\tacc.push(Square.create('abcdefgh'[file], rank + 1));\n\t\t\t\t\t\t\tfile = file < 7 ? file + 1 : 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst square = Square.create('abcdefgh'[file], rank + 1);\n\t\t\t\t\t\tsquare.piece = Piece[pieces[cur].method](pieces[cur].arg);\n\t\t\t\t\t\tacc.push(square);\n\t\t\t\t\t\tfile = file < 7 ? file + 1 : 0;\n\t\t\t\t\t}\n\t\t\t\t\treturn acc;\n\t\t\t\t}, []);\n\t\t\t});\n\n\t\treturn new Board(lines.reduce((acc, cur) => {\n\t\t\tacc.push(...cur);\n\t\t\treturn acc;\n\t\t}, []));\n\t}\n\n\tgetNeighborSquare (sq, n) {\n\t\tif (sq && n) {\n\t\t\t// validate boundaries of board\n\t\t\tif (sq.file === 'a' && (n === NeighborType.AboveLeft ||\n\t\t\t\t\tn === NeighborType.BelowLeft ||\n\t\t\t\t\tn === NeighborType.Left)) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif (sq.file === 'h' && (n === NeighborType.AboveRight ||\n\t\t\t\t\tn === NeighborType.BelowRight ||\n\t\t\t\t\tn === NeighborType.Right)) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif (sq.rank === 1 && (n === NeighborType.Below ||\n\t\t\t\t\tn === NeighborType.BelowLeft ||\n\t\t\t\t\tn === NeighborType.BelowRight)) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif (sq.rank === 8 && (n === NeighborType.Above ||\n\t\t\t\t\tn === NeighborType.AboveLeft ||\n\t\t\t\t\tn === NeighborType.AboveRight)) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// validate file\n\t\t\tlet\n\t\t\t\tfIndex = 'abcdefgh'.indexOf(sq.file),\n\t\t\t\ti = 0;\n\n\t\t\tif (fIndex !== -1 && sq.rank > 0 && sq.rank < 9) {\n\t\t\t\t// find the index\n\t\t\t\ti = 8 * (sq.rank - 1) + fIndex + n.offset;\n\t\t\t\tif (this.squares && this.squares.length > i && i > -1) {\n\t\t\t\t\treturn this.squares[i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tgetSquare (f, r) {\n\t\t// check for shorthand\n\t\tif (typeof f === 'string' && f.length === 2 && !r) {\n\t\t\tr = parseInt(f.charAt(1), 10);\n\t\t\tf = f.charAt(0);\n\t\t}\n\n\t\t// validate file\n\t\tlet\n\t\t\tfIndex = 'abcdefgh'.indexOf(f),\n\t\t\ti = 0;\n\n\t\tif (fIndex !== -1 && r > 0 && r < 9) {\n\t\t\t// Find the index\n\t\t\ti = 8 * (r - 1) + fIndex;\n\t\t\tif (this.squares && this.squares.length > i) {\n\t\t\t\treturn this.squares[i];\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tgetSquares (side) {\n\t\tconst list = [];\n\n\t\tfor (let i = 0; i < this.squares.length; i++) {\n\t\t\tif (this.squares[i].piece && this.squares[i].piece.side === side) {\n\t\t\t\tlist.push(this.squares[i]);\n\t\t\t}\n\t\t}\n\n\t\treturn list;\n\t}\n\n\tmove (src, dest, n) {\n\t\tif (typeof src === 'string' && src.length === 2) {\n\t\t\tsrc = this.getSquare(src);\n\t\t}\n\n\t\tif (typeof dest === 'string' && dest.length === 2) {\n\t\t\tdest = this.getSquare(dest);\n\t\t}\n\n\t\tlet simulate;\n\n\t\tif (typeof n === 'boolean') {\n\t\t\tsimulate = n;\n\t\t\tn = null;\n\t\t}\n\n\t\tif (src && src.file && src.rank && dest && dest.file && dest.rank) {\n\t\t\tlet\n\t\t\t\tmove = {\n\t\t\t\t\talgebraic : n,\n\t\t\t\t\tcapturedPiece : dest.piece,\n\t\t\t\t\tcastle : false,\n\t\t\t\t\tenPassant : false,\n\t\t\t\t\tpostSquare : dest,\n\t\t\t\t\tprevSquare : src\n\t\t\t\t},\n\t\t\t\tp = src.piece,\n\t\t\t\tsq = null,\n\t\t\t\tundo = (b, m) => {\n\t\t\t\t\treturn () => {\n\t\t\t\t\t\tm.prevSquare.piece = m.postSquare.piece;\n\t\t\t\t\t\tm.postSquare.piece = m.capturedPiece;\n\n\t\t\t\t\t\tif (!m.enPassant) {\n\t\t\t\t\t\t\tm.postSquare.piece = m.capturedPiece;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tb.getSquare(\n\t\t\t\t\t\t\t\tm.postSquare.file,\n\t\t\t\t\t\t\t\tm.prevSquare.rank\n\t\t\t\t\t\t\t).piece = m.capturedPiece;\n\n\t\t\t\t\t\t\t// there is no piece on the post square in the event of\n\t\t\t\t\t\t\t// an en-passant, clear anything that me be present as\n\t\t\t\t\t\t\t// a result of the move (fix for issue #8)\n\t\t\t\t\t\t\tm.postSquare.piece = null;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (m.castle) {\n\t\t\t\t\t\t\tsq = b.getSquare(\n\t\t\t\t\t\t\t\tmove.postSquare.file === 'g' ? 'f' : 'd',\n\t\t\t\t\t\t\t\tmove.postSquare.rank\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tb.getSquare(\n\t\t\t\t\t\t\t\tmove.postSquare.file === 'g' ? 'h' : 'a',\n\t\t\t\t\t\t\t\tmove.postSquare.rank\n\t\t\t\t\t\t\t).piece = sq.piece;\n\t\t\t\t\t\t\tsq.piece = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t};\n\n\t\t\tdest.piece = p;\n\t\t\tmove.castle = p.type === PieceType.King &&\n\t\t\t\tp.moveCount === 0 &&\n\t\t\t\t(move.postSquare.file === 'g' || move.postSquare.file === 'c');\n\t\t\tmove.enPassant = p.type === PieceType.Pawn &&\n\t\t\t\tmove.capturedPiece === null &&\n\t\t\t\tmove.postSquare.file !== move.prevSquare.file;\n\t\t\tmove.prevSquare.piece = null;\n\n\t\t\t// check for en-passant\n\t\t\tif (move.enPassant) {\n\t\t\t\tsq = this.getSquare(move.postSquare.file, move.prevSquare.rank);\n\t\t\t\tmove.capturedPiece = sq.piece;\n\t\t\t\tsq.piece = null;\n\t\t\t}\n\n\t\t\t// check for castle\n\t\t\tif (move.castle) {\n\t\t\t\tsq = this.getSquare(\n\t\t\t\t\tmove.postSquare.file === 'g' ? 'h' : 'a',\n\t\t\t\t\tmove.postSquare.rank\n\t\t\t\t);\n\n\t\t\t\tif (sq.piece === null) {\n\t\t\t\t\tmove.castle = false;\n\t\t\t\t} else {\n\t\t\t\t\tthis.getSquare(\n\t\t\t\t\t\tmove.postSquare.file === 'g' ? 'f' : 'd',\n\t\t\t\t\t\tmove.postSquare.rank\n\t\t\t\t\t).piece = sq.piece;\n\t\t\t\t\tsq.piece = null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!simulate) {\n\t\t\t\tp.moveCount++;\n\t\t\t\tthis.lastMovedPiece = p;\n\n\t\t\t\tif (move.capturedPiece) {\n\t\t\t\t\tthis.emit('capture', move);\n\t\t\t\t}\n\n\t\t\t\tif (move.castle) {\n\t\t\t\t\tthis.emit('castle', move);\n\t\t\t\t}\n\n\t\t\t\tif (move.enPassant) {\n\t\t\t\t\tthis.emit('enPassant', move);\n\t\t\t\t}\n\n\t\t\t\tthis.emit('move', move);\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tmove,\n\t\t\t\tundo : undo(this, move, simulate)\n\t\t\t};\n\t\t}\n\t}\n\n\tpromote (sq, p) {\n\t\t// update move count and last piece\n\t\tp.moveCount = sq.piece.moveCount;\n\t\tthis.lastMovedPiece = p;\n\n\t\t// set to square\n\t\tsq.piece = p;\n\n\t\tthis.emit('promote', sq);\n\n\t\treturn sq;\n\t}\n}\n\n// exports\nexport default { Board, NeighborType };\n"]},"metadata":{},"sourceType":"script"}