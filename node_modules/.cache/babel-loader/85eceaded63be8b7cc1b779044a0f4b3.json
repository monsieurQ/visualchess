{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/q/Documents/WebDocuments/chess/front/src/App.js\";\nimport './App.css';\nimport React, { Component } from 'react';\nimport Moves from './components/Moves/Moves'; // import Square from './components/Square/Square'\n\nimport PopUp from './components/PopUp/PopUp'; // import Button from './components/Button/Button';\n\nimport ToggleTextButton from './components/ToggleTextButton/ToggleTextButton';\nimport ImageButton from './components/ImageButton/ImageButton';\nimport PGNDialog from './components/PGNDialog/PGNDialog';\nimport GamesList from './components/GamesList/GamesList';\nimport PromotionPrompt from './components/PromotionPrompt/PromotionPrompt'; // import Squares from './components/Squares/Squares';\n\nimport Draggable from 'react-draggable';\nimport * as ChessJS from 'chess.js';\nconst Chess = typeof ChessJS === \"function\" ? ChessJS : ChessJS.Chess;\nconst chess = new Chess(); // const SQUARES = {\n//     a8:   0, b8:   1, c8:   2, d8:   3, e8:   4, f8:   5, g8:   6, h8:   7,\n//     a7:  16, b7:  17, c7:  18, d7:  19, e7:  20, f7:  21, g7:  22, h7:  23,\n//     a6:  32, b6:  33, c6:  34, d6:  35, e6:  36, f6:  37, g6:  38, h6:  39,\n//     a5:  48, b5:  49, c5:  50, d5:  51, e5:  52, f5:  53, g5:  54, h5:  55,\n//     a4:  64, b4:  65, c4:  66, d4:  67, e4:  68, f4:  69, g4:  70, h4:  71,\n//     a3:  80, b3:  81, c3:  82, d3:  83, e3:  84, f3:  85, g3:  86, h3:  87,\n//     a2:  96, b2:  97, c2:  98, d2:  99, e2: 100, f2: 101, g2: 102, h2: 103,\n//     a1: 112, b1: 113, c1: 114, d1: 115, e1: 116, f1: 117, g1: 118, h1: 119\n//   };\n\nconst squareID = [\"a8\", \"b8\", \"c8\", \"d8\", \"e8\", \"f8\", \"g8\", \"h8\", \"a7\", \"b7\", \"c7\", \"d7\", \"e7\", \"f7\", \"g7\", \"h7\", \"a6\", \"b6\", \"c6\", \"d6\", \"e6\", \"f6\", \"g6\", \"h6\", \"a5\", \"b5\", \"c5\", \"d5\", \"e5\", \"f5\", \"g5\", \"h5\", \"a4\", \"b4\", \"c4\", \"d4\", \"e4\", \"f4\", \"g4\", \"h4\", \"a3\", \"b3\", \"c3\", \"d3\", \"e3\", \"f3\", \"g3\", \"h3\", \"a2\", \"b2\", \"c2\", \"d2\", \"e2\", \"f2\", \"g2\", \"h2\", \"a1\", \"b1\", \"c1\", \"d1\", \"e1\", \"f1\", \"g1\", \"h1\"];\nconst BOARD_ID = 'chessboard';\nconst AUTOPLAY_SPEED = 500;\nconst SQUARE_SIZE = 100;\nconst CONTROL_CLASS = '--control'; // Variable in CSS for storing the ratio of attackers/defenders on a square \n\nclass App extends Component {\n  /*\n  ----------------------------------------------------------------------------------------------------------------------------------\n  ------------------------------------------------------------ REACT ---------------------------------------------------------------\n  ----------------------------------------------------------------------------------------------------------------------------------\n  */\n  constructor() {\n    super();\n\n    this.keyDownHandler = e => {\n      switch (e.keyCode) {\n        case 39:\n          // Right arrow \n          e.preventDefault();\n\n          if (this.state.selected_move + 1 <= this.state.fen_history.length - 1) {\n            this.setState(prevState => ({\n              selected_move: prevState.selected_move + 1\n            }));\n          }\n\n          break;\n\n        case 37:\n          // Left arrow \n          e.preventDefault();\n\n          if (this.state.selected_move >= 1) {\n            this.setState(prevState => ({\n              selected_move: prevState.selected_move - 1\n            }));\n          }\n\n          break;\n\n        case 27:\n          // esc \n          e.preventDefault();\n\n          if (this.state.popUp) {\n            this.setState({\n              popUp: false\n            });\n          } else if (this.state.promotion) {\n            this.closePromotionPrompt();\n          }\n\n          break;\n\n        case 78:\n          // n - makes one random move \n          e.preventDefault();\n          this.makeRandomMove();\n          break;\n\n        case 77:\n          // m - makes 25 random moves \n          e.preventDefault();\n\n          for (let i = 0; i < 25; i++) {\n            this.makeRandomMove();\n          }\n\n          break;\n\n        case 75:\n          // k \n          e.preventDefault();\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.touchStartHandler = e => {\n      console.log('touchStartHandler');\n    };\n\n    this.dragStartHandler = e => {\n      // e: dragEvent\n      console.log('dragStart');\n      let square = e.target.dataset.position;\n      e.dataTransfer.effectAllowed = \"all\";\n      e.dataTransfer.dropEffect = \"move\";\n      e.dataTransfer.setData(\"text/plain\", square);\n      requestAnimationFrame(function () {\n        e.target.classList.add('hide');\n      });\n      this.highlightMoves(square);\n    };\n\n    this.dragEndHandler = e => {\n      e.preventDefault();\n      requestAnimationFrame(function () {\n        e.target.classList.remove('hide');\n      });\n    };\n\n    this.dropHandler = e => {\n      e.preventDefault();\n      let target = e.target.dataset.position;\n      requestAnimationFrame(function () {\n        e.target.classList.remove('dragover');\n      });\n      this.removeClassesFromAll('dragover', 'moveable');\n      let origin = e.dataTransfer.getData('text/plain');\n\n      if (this.newMove(origin, target)) {\n        this.removeClassesFromAll('moveable', 'active');\n      }\n    };\n\n    this.dragOverHandler = e => {\n      e.preventDefault(e);\n      requestAnimationFrame(function () {\n        e.target.classList.add('dragover');\n      });\n    };\n\n    this.dragLeaveHandler = e => {\n      e.preventDefault();\n      requestAnimationFrame(function () {\n        e.target.classList.remove('dragover');\n      });\n    };\n\n    this.handleControlClick = () => {\n      this.setState(prevState => ({\n        show_control: !prevState.show_control\n      }));\n    };\n\n    this.handleHideClick = () => {\n      if (this.state.show_pieces) {\n        document.getElementById('chessboard').classList.add('hidepieces');\n        this.setState({\n          show_pieces: false\n        });\n      } else {\n        document.getElementById('chessboard').classList.remove('hidepieces');\n        this.setState({\n          show_pieces: true\n        });\n      } // console.log(chess.boardFull());\n\n    };\n\n    this.serverClickStudy = () => {\n      // this.loadPGNfromServer('https://lichess.org/study/WtwmeX4m/FzpbQLUx', {\n      //   credentials: 'same-origin',\n      //   Access-Control-Allow-Credentials\n      //   mode: 'same-origin'\n      // });\n      fetch('http://localhost:3001/game?all=true').then(res => res.json()).then(res => {\n        let closePopup = this.closePopup; // console.log(res);\n\n        this.setState({\n          popUp: {\n            content: /*#__PURE__*/_jsxDEV(GamesList, {\n              games: res,\n              closePopup: closePopup\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 393,\n              columnNumber: 22\n            }, this),\n            closePopup\n          }\n        });\n      });\n    };\n\n    this.serverClick = () => {\n      this.setState({\n        popUp: {\n          text: 'Enter URL',\n          textarea_class: 'url',\n          closePopup: this.closeAndLoad\n        }\n      });\n    };\n\n    this.pgnClick = () => {\n      this.setState({\n        popUp: {\n          content: /*#__PURE__*/_jsxDEV(PGNDialog, {\n            closePopup: this.closePopup\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 404,\n            columnNumber: 37\n          }, this),\n          closePopup: this.closePopup\n        }\n      });\n    };\n\n    this.handleFENClick = () => {\n      this.setState({\n        popUp: {\n          text: 'Enter FEN',\n          textarea_class: 'pgn',\n          closePopup: this.closePopupFEN\n        }\n      });\n    };\n\n    this.moveClick = number => {\n      if (number === 999) number = this.state.history.length; // Last move \n      else if (number > this.state.history.length || number < 0) return;\n      this.setState({\n        selected_move: number\n      });\n    };\n\n    this.handleAutoplayClick = () => {\n      if (!this.state.autoplay) {\n        this.setState(state => ({\n          autoplay: !state.autoplay\n        }), () => this.autoplay(this.state.selected_move, this.state.history.length));\n      } else {\n        this.setState(state => ({\n          autoplay: !state.autoplay\n        }));\n      }\n    };\n\n    this.handleClick = e => {\n      if (this.state.promotion.from) {\n        this.closePromotionPrompt();\n        return;\n      }\n\n      let square = e.target.dataset.position;\n      let clicked = this.state.piece_clicked;\n\n      if (clicked) {\n        if (this.newMove(clicked, square)) {\n          this.removeClassesFromAll('moveable', 'active');\n          this.setState({\n            piece_clicked: false\n          });\n        } else {\n          console.log('Error in handleClick');\n        }\n      }\n    };\n\n    this.handlePieceClick = e => {\n      if (this.state.promotion.from) {\n        this.closePromotionPrompt();\n        return;\n      }\n\n      let square = e.target.dataset.position;\n      let clicked = this.state.piece_clicked;\n\n      if (square === clicked) {\n        this.removeClassesFromAll('active', 'moveable');\n        this.setState({\n          piece_clicked: null\n        });\n        return;\n      }\n\n      if (!clicked) {\n        if (this.pieceIsTurnColor(square)) {\n          document.getElementById(square).classList.add('active');\n          this.highlightMoves(square);\n          this.setState({\n            piece_clicked: square\n          });\n        }\n      } else {\n        this.removeClassesFromAll('active', 'moveable');\n\n        if (this.squaresOfSameColor(square, clicked)) {\n          // If another piece of the same color is clicked, switch to that piece being active  \n          document.getElementById(square).classList.add('active');\n          this.highlightMoves(square);\n          this.setState({\n            piece_clicked: square\n          });\n        } else {\n          // Capture \n          if (this.newMove(clicked, square)) {\n            this.setState({\n              piece_clicked: null\n            });\n          }\n        }\n      }\n    };\n\n    this.closeAndLoad = url => {\n      this.setState({\n        popUp: false\n      });\n\n      if (url) {\n        this.loadPGNfromServer('https://lichess.org/game/export/' + url);\n      }\n\n      ;\n    };\n\n    this.closePopup = text => {\n      this.setState({\n        popUp: false\n      });\n      if (text) this.loadPGN(text);\n    };\n\n    this.closePopupFEN = text => {\n      if (text) this.loadFEN(text);\n      this.setState({\n        popUp: false\n      });\n    };\n\n    this.promotionHandler = (piece, from, to) => {\n      this.setState({\n        promotion: {\n          from: null,\n          to: null,\n          color: null\n        }\n      });\n      this.newMove(from, to, piece);\n    };\n\n    this.toggleConvert = toggle => toggle ? 'on' : 'off';\n\n    this.cleanUpSquare = square => square.length > 2 ? square.slice(1) : square;\n\n    this.getOtherChessColor = () => chess.turn() === chess.WHITE ? chess.BLACK : chess.WHITE;\n\n    this.getColorToMoveByMoveNumber = number => number % 2 === 0 ? 1 : -1;\n\n    this.squareColorConv = color => {\n      if (color === 'light') return 'w';else if (color === 'dark') return 'b';\n      return false;\n    };\n\n    this.colorConv = color => color === 'w' ? 'white' : 'black';\n\n    this.squaresOfSameColor = (one, two) => chess.get(one).color === chess.get(two).color;\n\n    this.pieceIsTurnColor = piece => chess.get(piece).color === chess.turn();\n\n    this.closePromotionPrompt = () => {\n      this.setState({\n        promotion: {\n          from: null,\n          to: null,\n          color: null\n        },\n        piece_clicked: false\n      });\n    };\n\n    this.removeClassFromAll = remove => {\n      document.querySelectorAll('.' + remove).forEach(el => el.classList.remove(remove));\n    };\n\n    this.removeClassesFromAll = (...classes) => {\n      classes.forEach(e => document.querySelectorAll('.' + e).forEach(el => el.classList.remove(e)));\n    };\n\n    this.hideBoardControl = () => {\n      this.removeClassFromAll('attacked');\n    };\n\n    this.showBoardControl = (control_flag = undefined) => {\n      let show_control = control_flag === undefined ? this.state.show_control : control_flag;\n      this.removeClassesFromAll('attacked', 'kingcheck');\n\n      if (chess.in_check()) {\n        let square = document.getElementById(chess.get_king());\n        square.classList.add('kingcheck');\n        if (!show_control) return;\n        chess.moves({\n          verbose: true\n        }).forEach(move => {\n          let dom = document.getElementById(move.to);\n          dom.classList.add('attacked');\n          dom.style.setProperty(CONTROL_CLASS, '100%');\n        });\n        return;\n      }\n\n      if (!show_control) return;\n      let control = chess.defended_pieces_all(true, true, false);\n\n      for (let [square, value] of Object.entries(control)) {\n        if (value.w > 0 || value.b > 0) {\n          let dom = document.getElementById(square);\n          dom.classList.add('attacked');\n          let ratio = this.getRatio(value.w, value.b);\n          dom.style.setProperty(CONTROL_CLASS, ratio + '%');\n        }\n      }\n    };\n\n    this.state = {\n      selected_move: 0,\n      piece_clicked: false,\n      fen_history: [chess.fen()],\n      // all moves, each represented by fen \n      flipped: false,\n      history: {},\n      // Single moves, each with from and to-squares and in SAN format \n      loaded_game: null,\n      //PGN of loaded game \n      popUp: false,\n      show_control: true,\n      weighted: false,\n      players: false,\n      result: '',\n      show_pieces: true,\n      promotion: {\n        from: null,\n        to: null,\n        color: null\n      },\n      autoplay: false\n    };\n  }\n  /**\n   * \n   * Each render gets every piece from chess.js. Pieces are rendered as children into the squares \n   * Board control is realized through the .square-bg children\n   * List of played moves is passed to the Moves-component, which also displays game results \n   * \n   **/\n\n\n  render() {\n    // let arr = this.state.flipped ? chess.board().flat().reverse() : chess.board().flat();\n    chess.load(this.state.fen_history[this.state.selected_move]);\n    let colorToMove = chess.turn();\n    let arr = this.state.flipped ? Array.prototype.reverse.call(chess.board().flat()) : chess.board().flat();\n    let squares_ids = this.state.flipped ? squareID.reverse() : squareID;\n    let square_classes = ['light', 'dark'];\n    let c = 0;\n    let players = this.state.players;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        id: \"title\",\n        children: \"visual chess\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: BOARD_ID,\n          className: \"chessboard\",\n          children: arr.map((square, i) => {\n            return square ? /*#__PURE__*/_jsxDEV(\"div\", {\n              onDragOver: this.dragOverHandler,\n              onDragLeave: this.dragLeaveHandler,\n              onDrop: this.dropHandler // data-square={SQUARES[squares_ids[i]]}\n              ,\n              id: squares_ids[i],\n              \"data-position\": squares_ids[i],\n              \"data-count\": i,\n              className: `square ${square_classes[c % 2]}`,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"square-bg\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"control-dark\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 110,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"control-light\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 111,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 109,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: `piece ${this.colorConv(square.color)} ${square.type}`,\n                draggable: \"true\",\n                \"data-position\": squares_ids[i],\n                onDragStart: this.dragStartHandler,\n                onDragEnd: this.dragEndHandler,\n                onClick: this.handlePieceClick\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 21\n              }, this)]\n            }, squares_ids[i], true, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              // data-square={SQUARES[squares_ids[i]]}\n              \"data-position\": squares_ids[i],\n              id: squares_ids[i],\n              \"data-count\": i,\n              onDragOver: this.dragOverHandler,\n              onTouchStart: this.touchStartHandler,\n              onDragLeave: this.dragLeaveHandler,\n              onClick: this.handleClick,\n              onDrop: this.dropHandler,\n              className: \"square\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"square-bg\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"control-dark\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 136,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"control-light\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 137,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 135,\n                columnNumber: 21\n              }, this)\n            }, squares_ids[i], false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this), this.state.promotion.from ? /*#__PURE__*/_jsxDEV(PromotionPrompt, {\n          onClick: this.promotionHandler,\n          from: this.state.promotion.from,\n          to: this.state.promotion.to,\n          color: this.state.promotion.color\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 13\n        }, this) : '', /*#__PURE__*/_jsxDEV(\"aside\", {\n          children: [/*#__PURE__*/_jsxDEV(Moves, {\n            onClick: this.moveClick,\n            selected_move: this.state.selected_move,\n            moves: this.state.history,\n            colorToMove: colorToMove,\n            result: this.state.result,\n            whiteplayer: this.state.whiteplayer,\n            blackplayer: this.state.blackplayer\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"cards\",\n            children: [players && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"players\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"whiteplayer\",\n                children: players.whiteplayer ? players.whiteplayer : 'Anonymous'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 169,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"blackplayer\",\n                children: players.blackplayer ? players.blackplayer : 'Anonymous'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 171,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 21\n            }, this), this.state.result && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"result\",\n              children: [\" \", this.state.result, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"button_container\",\n            children: [/*#__PURE__*/_jsxDEV(ImageButton, {\n              button: \"pgn_button\",\n              altText: \"Enter PGN\",\n              onClick: this.pgnClick\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(ImageButton, {\n              button: \"play_button\",\n              altText: \"Turn Autoplay on\",\n              state: this.toggleConvert(this.state.autoplay),\n              onClick: this.handleAutoplayClick\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(ToggleTextButton, {\n              text: ['Hide Pieces', 'Show Pieces'],\n              initialText: 0,\n              onClick: this.handleHideClick\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(ToggleTextButton, {\n              text: ['Hide Board Control', 'Show Board Control'],\n              initialText: 0,\n              onClick: this.handleControlClick\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"created using (a modified) \", /*#__PURE__*/_jsxDEV(\"a\", {\n                alt: \"Chess.JS Github\",\n                href: \"https://github.com/jhlywa/chess.js/blob/master/README.md\",\n                children: \"chess.js\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 205,\n                columnNumber: 47\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"piece design from \", /*#__PURE__*/_jsxDEV(\"a\", {\n                href: \"lichess.org\",\n                alt: \"Lichess\",\n                children: \"lichess.org\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 206,\n                columnNumber: 38\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"contact: \", /*#__PURE__*/_jsxDEV(\"a\", {\n                href: \"mailto: quirschnei@gmail.com\",\n                children: \"quirschnei@gmail.com\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 207,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 16\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), this.state.popUp ? /*#__PURE__*/_jsxDEV(PopUp, {\n        props: this.state.popUp\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 11\n      }, this) : '']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this);\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.keyDownHandler); // document.addEventListener('click')\n\n    if (this.state.show_control) this.showBoardControl();\n  }\n  /**\n   * If show/hide pieces or show/hide Board control are triggered, no need to re-render (changes are done through DOM / CSS) \n   **/\n\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.show_pieces !== nextState.show_pieces) return false;\n\n    if (this.state.show_control !== nextState.show_control) {\n      this.showBoardControl(nextState.show_control);\n      return false;\n    }\n\n    return true;\n  }\n  /**\n   * Highlights last move and calls showBoardControl after render \n   **/\n\n\n  componentDidUpdate() {\n    if (this.state.selected_move > 0) {\n      // For highlighting the last move\n      this.removeClassFromAll('highlighted');\n\n      try {\n        this.highlightSquare(this.state.history[this.state.selected_move - 1].to);\n      } catch (err) {\n        console.log('Error highlighting move!');\n        console.log('this.state.selected_move: ', this.state.selected_move);\n        console.log('History entry', this.state.history[this.state.selected_move - 1]);\n        console.error('Error:', err);\n      }\n    }\n\n    if (this.state.show_control) this.showBoardControl();\n  }\n  /*\n  ----------------------------------------------------------------------------------------------------------------------------------\n  ---------------------------------------------------- EVENT HANLDERS --------------------------------------------------------------\n  ----------------------------------------------------------------------------------------------------------------------------------\n  */\n\n\n  getRandomIntInclusive(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1) + min); //The maximum is inclusive and the minimum is inclusive\n  }\n\n  /*\n  ----------------------------------------------------------------------------------------------------------------------------------\n  ----------------------------------------------------        UTILITY        -------------------------------------------------------\n  ----------------------------------------------------------------------------------------------------------------------------------\n  */\n\n  /**\n   * Recursive method, goes through all played moves, as long as uninterrupted by state \n   **/\n  autoplay(point, end) {\n    ++point;\n\n    if (point >= end || !this.state.autoplay) {\n      this.setState({\n        autoplay: false\n      });\n      return false;\n    }\n\n    this.setState({\n      selected_move: point\n    });\n    setTimeout(() => this.autoplay(point, end), AUTOPLAY_SPEED);\n  }\n\n  loadPGNfromServer(url) {\n    fetch(url).then(res => res.text()).then(res => this.loadPGN(res));\n  }\n  /**\n   * Loads a proveded PGN (format to save chess-games)\n   * Passes it to chess.js and extracts titles and names of players and game result (if available) to display\n   * Loads moves into state (history and fen_history), as chess.js does not have an option to browse through \n   * the move history \n   * Afterwards, chess.js is reset to the starting position \n   **/\n\n\n  loadPGN(pgn) {\n    let load_result = chess.load_pgn(pgn);\n    let headers = chess.header();\n    let players = {};\n\n    if (headers.Black) {\n      let content = headers.BlackTitle ? `[${headers.BlackTitle}] ${headers.Black}` : headers.Black;\n      players.whiteplayer = content;\n    }\n\n    if (headers.White) {\n      let content = headers.WhiteTitle ? `[${headers.WhiteTitle}] ${headers.White}` : headers.White;\n      players.blackplayer = content;\n    }\n\n    let result = headers.Result ? 'Result: ' + headers.Result : '';\n    if (headers.Termination) result += ` (${headers.Termination})`;\n\n    if (load_result) {\n      let history = chess.history({\n        verbose: true\n      });\n      let new_history = {};\n      chess.reset();\n      let fen_history = [chess.fen()];\n      history.forEach((e, i) => {\n        chess.move(e);\n        fen_history.push(chess.fen());\n        new_history[i] = {\n          from: e.from,\n          to: e.to,\n          san: e.san\n        };\n      });\n      chess.load(fen_history[0]);\n      this.setState({\n        history: new_history,\n        fen_history,\n        loaded_game: pgn,\n        selected_move: 0,\n        result,\n        players\n      });\n    } else console.log(load_result);\n  }\n\n  loadFEN(fen) {\n    let load_result = chess.load(fen);\n    let fen_history = [chess.fen()];\n    let history = {};\n    this.setState({\n      fen_history,\n      history,\n      selected_move: 0\n    });\n  } // If square is of format piece-square, remove piece (e.g. ba8 => a8) \n\n\n  // removeEnPassantFromFen = (fen) => {\n  //    var tokens = fen.split(/\\s+/);\n  //    tokens[3] = '-';\n  //    return tokens.join(' ');\n  // }\n  getRatio(w, b) {\n    if (w === 0 && b === 0) return 0;\n    let sum = w + b;\n    let whiteshare = w / sum * 100;\n    return whiteshare;\n  }\n\n  getWeightedRatio(w, b) {\n    if (w === 0) return 0;\n    if (b === 0) return 100;\n    let sum = w + b;\n    let whiteshare = 100 - w / sum * 100;\n    return whiteshare;\n  }\n\n  isOnFirstOrLastRank(square) {\n    return square >= 0 && square <= 7 || square >= 56 && square <= 63;\n  }\n\n  getRowFromSquare(square) {\n    return Number(square.charAt(1));\n  }\n\n  isOnPromotionSquare(square, color) {\n    return color === 'w' ? this.getRowFromSquare(square) == 8 : this.getRowFromSquare(square) == 1;\n  }\n  /**\n   * return 1 ... left Edge, \n   * 2 ... right edge \n   * 0 ... not on edge\n  **/\n\n\n  isOnEdge(square) {\n    if (Number(square) % 8 === 0) return 1;\n    if (Number(square) % 7 === 0) return 2;\n    return 0;\n  }\n  /*\n  ----------------------------------------------------------------------------------------------------------------------------------\n  ----------------------------------------------------     CHESS STUFF    ----------------------------------------------------------\n  ----------------------------------------------------------------------------------------------------------------------------------\n  */\n\n\n  openPromotionPrompt(from, to, color) {\n    this.setState({\n      promotion: {\n        from,\n        to,\n        color\n      }\n    });\n  }\n\n  makeRandomMove() {\n    let possible_moves = chess.moves({\n      verbose: true\n    });\n    let move = possible_moves[this.getRandomInt(possible_moves.length)];\n    this.newMove(move.from, move.to);\n  }\n\n  getRandomInt(max) {\n    return Math.floor(Math.random() * max);\n  }\n  /**\n   * Method for handling new moves. Updates history (overrides if necessary) \n   * Checks for promotion (if a pawn reaches a respective square)\n   * otherwise passes move to chess.js and updates state \n   **/\n\n\n  newMove(from, to, promoteTo = false) {\n    let fen_history = [...this.state.fen_history];\n    let history = Object.assign({}, this.state.history);\n    let options = {\n      from,\n      to\n    };\n\n    if (this.state.selected_move < this.state.fen_history.length) {\n      // Override if a previous move was selected\n      fen_history = fen_history.slice(0, this.state.selected_move + 1);\n      let new_history = {};\n\n      for (let [key, value] of Object.entries(history)) {\n        if (key >= this.state.selected_move) break;\n        new_history[key] = value;\n      }\n\n      history = Object.assign({}, new_history);\n    }\n\n    if (promoteTo) options.promotion = promoteTo;else {\n      if (this.isOnPromotionSquare(to, chess.turn()) && chess.get(from).type === 'p') {\n        if (this.state.promotion.from === null) {\n          this.openPromotionPrompt(from, to, this.colorConv(chess.turn()));\n          return;\n        } else {\n          options.promotion = promoteTo;\n        }\n      }\n    }\n    let res = chess.move(options);\n\n    if (res) {\n      fen_history.push(chess.fen());\n      history[this.state.selected_move] = {\n        from: options.from,\n        to: options.to,\n        san: res.san\n      };\n\n      if (chess.result()) {\n        // If game over (for any reason)  \n        this.setState(prevState => ({\n          selected_move: prevState.selected_move + 1,\n          history,\n          fen_history,\n          result: chess.result()\n        }));\n        return;\n      }\n\n      this.setState(prevState => ({\n        selected_move: prevState.selected_move + 1,\n        history,\n        fen_history\n      }));\n      return res.san;\n    } else {\n      console.log('Error making new move: ' + res);\n      return false;\n    }\n  } // switchColor = () => this.state.colorToMove === 1 ? -1 : 1;\n\n  /*\n  ----------------------------------------------------------------------------------------------------------------------------------\n  ----------------------------------------------------         DOM            ------------------------------------------------------\n  ----------------------------------------------------------------------------------------------------------------------------------\n  */\n\n\n  highlightMoves(piece) {\n    chess.moves({\n      square: piece,\n      verbose: true\n    }).forEach(move => {\n      document.getElementById(move.to).classList.add('moveable');\n    });\n  }\n\n  highlightSquare(square) {\n    document.getElementById(square).classList.add('highlighted');\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/q/Documents/WebDocuments/chess/front/src/App.js"],"names":["React","Component","Moves","PopUp","ToggleTextButton","ImageButton","PGNDialog","GamesList","PromotionPrompt","Draggable","ChessJS","Chess","chess","squareID","BOARD_ID","AUTOPLAY_SPEED","SQUARE_SIZE","CONTROL_CLASS","App","constructor","keyDownHandler","e","keyCode","preventDefault","state","selected_move","fen_history","length","setState","prevState","popUp","promotion","closePromotionPrompt","makeRandomMove","i","touchStartHandler","console","log","dragStartHandler","square","target","dataset","position","dataTransfer","effectAllowed","dropEffect","setData","requestAnimationFrame","classList","add","highlightMoves","dragEndHandler","remove","dropHandler","removeClassesFromAll","origin","getData","newMove","dragOverHandler","dragLeaveHandler","handleControlClick","show_control","handleHideClick","show_pieces","document","getElementById","serverClickStudy","fetch","then","res","json","closePopup","content","serverClick","text","textarea_class","closeAndLoad","pgnClick","handleFENClick","closePopupFEN","moveClick","number","history","handleAutoplayClick","autoplay","handleClick","from","clicked","piece_clicked","handlePieceClick","pieceIsTurnColor","squaresOfSameColor","url","loadPGNfromServer","loadPGN","loadFEN","promotionHandler","piece","to","color","toggleConvert","toggle","cleanUpSquare","slice","getOtherChessColor","turn","WHITE","BLACK","getColorToMoveByMoveNumber","squareColorConv","colorConv","one","two","get","removeClassFromAll","querySelectorAll","forEach","el","classes","hideBoardControl","showBoardControl","control_flag","undefined","in_check","get_king","moves","verbose","move","dom","style","setProperty","control","defended_pieces_all","value","Object","entries","w","b","ratio","getRatio","fen","flipped","loaded_game","weighted","players","result","render","load","colorToMove","arr","Array","prototype","reverse","call","board","flat","squares_ids","square_classes","c","map","type","whiteplayer","blackplayer","componentDidMount","addEventListener","shouldComponentUpdate","nextProps","nextState","componentDidUpdate","highlightSquare","err","error","getRandomIntInclusive","min","max","Math","ceil","floor","random","point","end","setTimeout","pgn","load_result","load_pgn","headers","header","Black","BlackTitle","White","WhiteTitle","Result","Termination","new_history","reset","push","san","sum","whiteshare","getWeightedRatio","isOnFirstOrLastRank","getRowFromSquare","Number","charAt","isOnPromotionSquare","isOnEdge","openPromotionPrompt","possible_moves","getRandomInt","promoteTo","assign","options","key"],"mappings":";;AAAA,OAAO,WAAP;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,0BAAlB,C,CACA;;AACA,OAAOC,KAAP,MAAkB,0BAAlB,C,CACA;;AACA,OAAOC,gBAAP,MAA6B,gDAA7B;AACA,OAAOC,WAAP,MAAwB,sCAAxB;AACA,OAAOC,SAAP,MAAsB,kCAAtB;AACA,OAAOC,SAAP,MAAsB,kCAAtB;AACA,OAAOC,eAAP,MAA4B,8CAA5B,C,CACA;;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AAEA,OAAO,KAAKC,OAAZ,MAAyB,UAAzB;AACA,MAAMC,KAAK,GAAG,OAAOD,OAAP,KAAmB,UAAnB,GAAgCA,OAAhC,GAA0CA,OAAO,CAACC,KAAhE;AACA,MAAMC,KAAK,GAAG,IAAID,KAAJ,EAAd,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAME,QAAQ,GAAG,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,IAA/B,EAAqC,IAArC,EAA2C,IAA3C,EAAiD,IAAjD,EAAuD,IAAvD,EAA6D,IAA7D,EAAmE,IAAnE,EAAyE,IAAzE,EAA+E,IAA/E,EAAqF,IAArF,EAA2F,IAA3F,EAAiG,IAAjG,EAAuG,IAAvG,EAA6G,IAA7G,EAAmH,IAAnH,EAAyH,IAAzH,EAA+H,IAA/H,EAAqI,IAArI,EAA2I,IAA3I,EAAiJ,IAAjJ,EAAuJ,IAAvJ,EAA6J,IAA7J,EAAmK,IAAnK,EAAyK,IAAzK,EAA+K,IAA/K,EAAqL,IAArL,EAA2L,IAA3L,EAAiM,IAAjM,EAAuM,IAAvM,EAA6M,IAA7M,EAAmN,IAAnN,EAAyN,IAAzN,EAA+N,IAA/N,EAAqO,IAArO,EAA2O,IAA3O,EAAiP,IAAjP,EAAuP,IAAvP,EAA6P,IAA7P,EAAmQ,IAAnQ,EAAyQ,IAAzQ,EAA+Q,IAA/Q,EAAqR,IAArR,EAA2R,IAA3R,EAAiS,IAAjS,EAAuS,IAAvS,EAA6S,IAA7S,EAAmT,IAAnT,EAAyT,IAAzT,EAA+T,IAA/T,EAAqU,IAArU,EAA2U,IAA3U,EAAiV,IAAjV,EAAuV,IAAvV,EAA6V,IAA7V,EAAmW,IAAnW,EAAyW,IAAzW,EAA+W,IAA/W,EAAqX,IAArX,EAA2X,IAA3X,CAAjB;AACA,MAAMC,QAAQ,GAAG,YAAjB;AACA,MAAMC,cAAc,GAAG,GAAvB;AACA,MAAMC,WAAW,GAAG,GAApB;AACA,MAAMC,aAAa,GAAG,WAAtB,C,CAAmC;;AAGnC,MAAMC,GAAN,SAAkBjB,SAAlB,CAA4B;AAE1B;AACF;AACA;AACA;AACA;AAGEkB,EAAAA,WAAW,GAAE;AACX;;AADW,SA8NbC,cA9Na,GA8NKC,CAAD,IAAK;AACpB,cAAOA,CAAC,CAACC,OAAT;AACE,aAAK,EAAL;AAAS;AACPD,UAAAA,CAAC,CAACE,cAAF;;AACA,cAAG,KAAKC,KAAL,CAAWC,aAAX,GAAyB,CAAzB,IAA4B,KAAKD,KAAL,CAAWE,WAAX,CAAuBC,MAAvB,GAA8B,CAA7D,EAA+D;AAC7D,iBAAKC,QAAL,CAAcC,SAAS,KAAG;AAACJ,cAAAA,aAAa,EAAEI,SAAS,CAACJ,aAAV,GAAwB;AAAxC,aAAH,CAAvB;AACD;;AACD;;AACF,aAAK,EAAL;AAAS;AACPJ,UAAAA,CAAC,CAACE,cAAF;;AACA,cAAG,KAAKC,KAAL,CAAWC,aAAX,IAA0B,CAA7B,EAA+B;AAC7B,iBAAKG,QAAL,CAAcC,SAAS,KAAG;AAACJ,cAAAA,aAAa,EAAEI,SAAS,CAACJ,aAAV,GAAwB;AAAxC,aAAH,CAAvB;AACD;;AACD;;AACF,aAAK,EAAL;AAAS;AACPJ,UAAAA,CAAC,CAACE,cAAF;;AACA,cAAG,KAAKC,KAAL,CAAWM,KAAd,EAAoB;AAClB,iBAAKF,QAAL,CAAc;AAACE,cAAAA,KAAK,EAAE;AAAR,aAAd;AACD,WAFD,MAEO,IAAG,KAAKN,KAAL,CAAWO,SAAd,EAAwB;AAC7B,iBAAKC,oBAAL;AACD;;AACD;;AACF,aAAK,EAAL;AAAS;AACPX,UAAAA,CAAC,CAACE,cAAF;AACA,eAAKU,cAAL;AACA;;AACF,aAAK,EAAL;AAAS;AACPZ,UAAAA,CAAC,CAACE,cAAF;;AACA,eAAI,IAAIW,CAAC,GAAC,CAAV,EAAYA,CAAC,GAAC,EAAd,EAAiBA,CAAC,EAAlB,EAAqB;AACnB,iBAAKD,cAAL;AACD;;AACD;;AACA,aAAK,EAAL;AAAS;AACPZ,UAAAA,CAAC,CAACE,cAAF;AAEF;;AACF;AAAS;AAnCX;AAqCD,KApQY;;AAAA,SAsQbY,iBAtQa,GAsQQd,CAAD,IAAO;AACzBe,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACD,KAxQY;;AAAA,SA0QbC,gBA1Qa,GA0QOjB,CAAD,IAAO;AAAE;AAC1Be,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,UAAIE,MAAM,GAAGlB,CAAC,CAACmB,MAAF,CAASC,OAAT,CAAiBC,QAA9B;AACArB,MAAAA,CAAC,CAACsB,YAAF,CAAeC,aAAf,GAA+B,KAA/B;AACAvB,MAAAA,CAAC,CAACsB,YAAF,CAAeE,UAAf,GAA4B,MAA5B;AACAxB,MAAAA,CAAC,CAACsB,YAAF,CAAeG,OAAf,CAAuB,YAAvB,EAAqCP,MAArC;AACAQ,MAAAA,qBAAqB,CAAC,YAAY;AAChC1B,QAAAA,CAAC,CAACmB,MAAF,CAASQ,SAAT,CAAmBC,GAAnB,CAAuB,MAAvB;AACD,OAFoB,CAArB;AAGA,WAAKC,cAAL,CAAoBX,MAApB;AACD,KApRY;;AAAA,SAsRbY,cAtRa,GAsRK9B,CAAD,IAAM;AACrBA,MAAAA,CAAC,CAACE,cAAF;AACAwB,MAAAA,qBAAqB,CAAC,YAAY;AAChC1B,QAAAA,CAAC,CAACmB,MAAF,CAASQ,SAAT,CAAmBI,MAAnB,CAA0B,MAA1B;AACD,OAFoB,CAArB;AAGD,KA3RY;;AAAA,SA6RbC,WA7Ra,GA6REhC,CAAD,IAAO;AACnBA,MAAAA,CAAC,CAACE,cAAF;AACA,UAAIiB,MAAM,GAAGnB,CAAC,CAACmB,MAAF,CAASC,OAAT,CAAiBC,QAA9B;AACCK,MAAAA,qBAAqB,CAAC,YAAY;AACjC1B,QAAAA,CAAC,CAACmB,MAAF,CAASQ,SAAT,CAAmBI,MAAnB,CAA0B,UAA1B;AACD,OAFqB,CAArB;AAGD,WAAKE,oBAAL,CAA0B,UAA1B,EAAsC,UAAtC;AACA,UAAIC,MAAM,GAAGlC,CAAC,CAACsB,YAAF,CAAea,OAAf,CAAuB,YAAvB,CAAb;;AACA,UAAG,KAAKC,OAAL,CAAaF,MAAb,EAAqBf,MAArB,CAAH,EAAgC;AAC9B,aAAKc,oBAAL,CAA0B,UAA1B,EAAsC,QAAtC;AACD;AACF,KAxSY;;AAAA,SA0SbI,eA1Sa,GA0SMrC,CAAD,IAAO;AACvBA,MAAAA,CAAC,CAACE,cAAF,CAAiBF,CAAjB;AACA0B,MAAAA,qBAAqB,CAAC,YAAY;AAChC1B,QAAAA,CAAC,CAACmB,MAAF,CAASQ,SAAT,CAAmBC,GAAnB,CAAuB,UAAvB;AACD,OAFoB,CAArB;AAGD,KA/SY;;AAAA,SAiTbU,gBAjTa,GAiTOtC,CAAD,IAAO;AACxBA,MAAAA,CAAC,CAACE,cAAF;AACAwB,MAAAA,qBAAqB,CAAC,YAAY;AAChC1B,QAAAA,CAAC,CAACmB,MAAF,CAASQ,SAAT,CAAmBI,MAAnB,CAA0B,UAA1B;AACD,OAFoB,CAArB;AAGD,KAtTY;;AAAA,SAwTbQ,kBAxTa,GAwTQ,MAAM;AACzB,WAAKhC,QAAL,CAAcC,SAAS,KAAI;AAACgC,QAAAA,YAAY,EAAE,CAAChC,SAAS,CAACgC;AAA1B,OAAJ,CAAvB;AACD,KA1TY;;AAAA,SAkUbC,eAlUa,GAkUK,MAAM;AACtB,UAAG,KAAKtC,KAAL,CAAWuC,WAAd,EAA0B;AACxBC,QAAAA,QAAQ,CAACC,cAAT,CAAwB,YAAxB,EAAsCjB,SAAtC,CAAgDC,GAAhD,CAAoD,YAApD;AACA,aAAKrB,QAAL,CAAc;AAACmC,UAAAA,WAAW,EAAE;AAAd,SAAd;AACD,OAHD,MAGK;AACHC,QAAAA,QAAQ,CAACC,cAAT,CAAwB,YAAxB,EAAsCjB,SAAtC,CAAgDI,MAAhD,CAAuD,YAAvD;AACA,aAAKxB,QAAL,CAAc;AAACmC,UAAAA,WAAW,EAAE;AAAd,SAAd;AACD,OAPqB,CAStB;;AACD,KA5UY;;AAAA,SA8UbG,gBA9Ua,GA8UM,MAAM;AACvB;AACA;AACA;AACA;AACA;AACAC,MAAAA,KAAK,CAAC,qCAAD,CAAL,CACGC,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAEQC,GAAG,IAAI;AACX,YAAIE,UAAU,GAAG,KAAKA,UAAtB,CADW,CAEX;;AAEA,aAAK3C,QAAL,CAAc;AAACE,UAAAA,KAAK,EAAE;AAClB0C,YAAAA,OAAO,eAAE,QAAC,SAAD;AAAW,cAAA,KAAK,EAAEH,GAAlB;AAAuB,cAAA,UAAU,EAAEE;AAAnC;AAAA;AAAA;AAAA;AAAA,oBADS;AAElBA,YAAAA;AAFkB;AAAR,SAAd;AAID,OAVH;AAWD,KA/VY;;AAAA,SAiWbE,WAjWa,GAiWC,MAAM;AAClB,WAAK7C,QAAL,CAAc;AAACE,QAAAA,KAAK,EAAE;AAAC4C,UAAAA,IAAI,EAAE,WAAP;AAAoBC,UAAAA,cAAc,EAAE,KAApC;AAA2CJ,UAAAA,UAAU,EAAE,KAAKK;AAA5D;AAAR,OAAd;AACD,KAnWY;;AAAA,SAqWbC,QArWa,GAqWF,MAAK;AACd,WAAKjD,QAAL,CAAc;AAACE,QAAAA,KAAK,EAAE;AAAC0C,UAAAA,OAAO,eAAE,QAAC,SAAD;AAAW,YAAA,UAAU,EAAE,KAAKD;AAA5B;AAAA;AAAA;AAAA;AAAA,kBAAV;AAAsDA,UAAAA,UAAU,EAAE,KAAKA;AAAvE;AAAR,OAAd;AACD,KAvWY;;AAAA,SAyWbO,cAzWa,GAyWI,MAAM;AACrB,WAAKlD,QAAL,CAAc;AAACE,QAAAA,KAAK,EAAE;AAAC4C,UAAAA,IAAI,EAAE,WAAP;AAAoBC,UAAAA,cAAc,EAAE,KAApC;AAA2CJ,UAAAA,UAAU,EAAE,KAAKQ;AAA5D;AAAR,OAAd;AACD,KA3WY;;AAAA,SA6WbC,SA7Wa,GA6WAC,MAAD,IAAY;AACtB,UAAGA,MAAM,KAAG,GAAZ,EAAiBA,MAAM,GAAC,KAAKzD,KAAL,CAAW0D,OAAX,CAAmBvD,MAA1B,CAAjB,CAAmD;AAAnD,WACK,IAAGsD,MAAM,GAAC,KAAKzD,KAAL,CAAW0D,OAAX,CAAmBvD,MAA1B,IAAoCsD,MAAM,GAAC,CAA9C,EAAiD;AACtD,WAAKrD,QAAL,CAAc;AAACH,QAAAA,aAAa,EAACwD;AAAf,OAAd;AACD,KAjXY;;AAAA,SAsXbE,mBAtXa,GAsXS,MAAM;AAC1B,UAAG,CAAC,KAAK3D,KAAL,CAAW4D,QAAf,EAAwB;AACtB,aAAKxD,QAAL,CAAcJ,KAAK,KAAK;AACtB4D,UAAAA,QAAQ,EAAE,CAAC5D,KAAK,CAAC4D;AADK,SAAL,CAAnB,EAEI,MAAI,KAAKA,QAAL,CAAc,KAAK5D,KAAL,CAAWC,aAAzB,EAAwC,KAAKD,KAAL,CAAW0D,OAAX,CAAmBvD,MAA3D,CAFR;AAGD,OAJD,MAIK;AACH,aAAKC,QAAL,CAAcJ,KAAK,KAAK;AACtB4D,UAAAA,QAAQ,EAAE,CAAC5D,KAAK,CAAC4D;AADK,SAAL,CAAnB;AAGD;AAEF,KAjYY;;AAAA,SAsYbC,WAtYa,GAsYEhE,CAAD,IAAO;AACnB,UAAG,KAAKG,KAAL,CAAWO,SAAX,CAAqBuD,IAAxB,EAA6B;AAC3B,aAAKtD,oBAAL;AACA;AACD;;AAED,UAAIO,MAAM,GAAGlB,CAAC,CAACmB,MAAF,CAASC,OAAT,CAAiBC,QAA9B;AACA,UAAI6C,OAAO,GAAG,KAAK/D,KAAL,CAAWgE,aAAzB;;AAEA,UAAGD,OAAH,EAAW;AACT,YAAG,KAAK9B,OAAL,CAAa8B,OAAb,EAAsBhD,MAAtB,CAAH,EAAiC;AAC/B,eAAKe,oBAAL,CAA0B,UAA1B,EAAsC,QAAtC;AACA,eAAK1B,QAAL,CAAc;AAAC4D,YAAAA,aAAa,EAAE;AAAhB,WAAd;AACD,SAHD,MAGK;AACHpD,UAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACD;AACF;AACF,KAvZY;;AAAA,SA4ZboD,gBA5Za,GA4ZOpE,CAAD,IAAO;AACxB,UAAG,KAAKG,KAAL,CAAWO,SAAX,CAAqBuD,IAAxB,EAA6B;AAC3B,aAAKtD,oBAAL;AACA;AACD;;AAGD,UAAIO,MAAM,GAAGlB,CAAC,CAACmB,MAAF,CAASC,OAAT,CAAiBC,QAA9B;AACA,UAAI6C,OAAO,GAAG,KAAK/D,KAAL,CAAWgE,aAAzB;;AACA,UAAGjD,MAAM,KAAGgD,OAAZ,EAAoB;AAClB,aAAKjC,oBAAL,CAA0B,QAA1B,EAAoC,UAApC;AACA,aAAK1B,QAAL,CAAc;AAAC4D,UAAAA,aAAa,EAAE;AAAhB,SAAd;AACA;AACD;;AACD,UAAG,CAACD,OAAJ,EAAY;AACV,YAAG,KAAKG,gBAAL,CAAsBnD,MAAtB,CAAH,EAAiC;AAC/ByB,UAAAA,QAAQ,CAACC,cAAT,CAAwB1B,MAAxB,EAAgCS,SAAhC,CAA0CC,GAA1C,CAA8C,QAA9C;AACA,eAAKC,cAAL,CAAoBX,MAApB;AACA,eAAKX,QAAL,CAAc;AAAC4D,YAAAA,aAAa,EAAEjD;AAAhB,WAAd;AACD;AACF,OAND,MAMK;AACH,aAAKe,oBAAL,CAA0B,QAA1B,EAAoC,UAApC;;AACA,YAAG,KAAKqC,kBAAL,CAAwBpD,MAAxB,EAAgCgD,OAAhC,CAAH,EAA4C;AAAE;AAC1CvB,UAAAA,QAAQ,CAACC,cAAT,CAAwB1B,MAAxB,EAAgCS,SAAhC,CAA0CC,GAA1C,CAA8C,QAA9C;AACA,eAAKC,cAAL,CAAoBX,MAApB;AACA,eAAKX,QAAL,CAAc;AAAC4D,YAAAA,aAAa,EAAEjD;AAAhB,WAAd;AACH,SAJD,MAIK;AAAE;AACL,cAAG,KAAKkB,OAAL,CAAa8B,OAAb,EAAsBhD,MAAtB,CAAH,EAAiC;AAC/B,iBAAKX,QAAL,CAAc;AAAC4D,cAAAA,aAAa,EAAE;AAAhB,aAAd;AACD;AACF;AACF;AACF,KA5bY;;AAAA,SA8bbZ,YA9ba,GA8bGgB,GAAD,IAAS;AACtB,WAAKhE,QAAL,CAAc;AAACE,QAAAA,KAAK,EAAE;AAAR,OAAd;;AACA,UAAG8D,GAAH,EAAO;AACL,aAAKC,iBAAL,CAAuB,qCAAmCD,GAA1D;AACD;;AAAA;AACF,KAncY;;AAAA,SAqcbrB,UArca,GAqcCG,IAAD,IAAU;AACrB,WAAK9C,QAAL,CAAc;AAACE,QAAAA,KAAK,EAAE;AAAR,OAAd;AACA,UAAG4C,IAAH,EAAS,KAAKoB,OAAL,CAAapB,IAAb;AACV,KAxcY;;AAAA,SA0cbK,aA1ca,GA0cIL,IAAD,IAAU;AACxB,UAAGA,IAAH,EAAS,KAAKqB,OAAL,CAAarB,IAAb;AACT,WAAK9C,QAAL,CAAc;AAACE,QAAAA,KAAK,EAAE;AAAR,OAAd;AACD,KA7cY;;AAAA,SAkdbkE,gBAlda,GAkdM,CAACC,KAAD,EAAQX,IAAR,EAAcY,EAAd,KAAqB;AACtC,WAAKtE,QAAL,CAAc;AAACG,QAAAA,SAAS,EAAE;AAACuD,UAAAA,IAAI,EAAE,IAAP;AAAaY,UAAAA,EAAE,EAAC,IAAhB;AAAsBC,UAAAA,KAAK,EAAC;AAA5B;AAAZ,OAAd;AACA,WAAK1C,OAAL,CAAa6B,IAAb,EAAmBY,EAAnB,EAAuBD,KAAvB;AACD,KArdY;;AAAA,SA0ebG,aA1ea,GA0eIC,MAAD,IAAYA,MAAM,GAAG,IAAH,GAAU,KA1e/B;;AAAA,SAiiBbC,aAjiBa,GAiiBI/D,MAAD,IAAYA,MAAM,CAACZ,MAAP,GAAc,CAAd,GAAkBY,MAAM,CAACgE,KAAP,CAAa,CAAb,CAAlB,GAAoChE,MAjiBnD;;AAAA,SAmiBbiE,kBAniBa,GAmiBQ,MAAM5F,KAAK,CAAC6F,IAAN,OAAiB7F,KAAK,CAAC8F,KAAvB,GAA+B9F,KAAK,CAAC+F,KAArC,GAA6C/F,KAAK,CAAC8F,KAniBjE;;AAAA,SA0jBbE,0BA1jBa,GA0jBiB3B,MAAD,IAAYA,MAAM,GAAC,CAAP,KAAW,CAAX,GAAe,CAAf,GAAmB,CAAC,CA1jBhD;;AAAA,SA4jBb4B,eA5jBa,GA4jBKV,KAAK,IAAI;AACzB,UAAGA,KAAK,KAAG,OAAX,EAAoB,OAAO,GAAP,CAApB,KACK,IAAGA,KAAK,KAAG,MAAX,EAAmB,OAAO,GAAP;AACxB,aAAO,KAAP;AACD,KAhkBY;;AAAA,SAkkBbW,SAlkBa,GAkkBDX,KAAK,IAAIA,KAAK,KAAG,GAAR,GAAc,OAAd,GAAwB,OAlkBhC;;AAAA,SAokBbR,kBApkBa,GAokBQ,CAACoB,GAAD,EAAMC,GAAN,KAAcpG,KAAK,CAACqG,GAAN,CAAUF,GAAV,EAAeZ,KAAf,KAAuBvF,KAAK,CAACqG,GAAN,CAAUD,GAAV,EAAeb,KApkB5D;;AAAA,SAskBbT,gBAtkBa,GAskBOO,KAAD,IAAWrF,KAAK,CAACqG,GAAN,CAAUhB,KAAV,EAAiBE,KAAjB,KAA2BvF,KAAK,CAAC6F,IAAN,EAtkB5C;;AAAA,SAomBbzE,oBApmBa,GAomBU,MAAM;AAAE,WAAKJ,QAAL,CAAc;AAACG,QAAAA,SAAS,EAAE;AAACuD,UAAAA,IAAI,EAAE,IAAP;AAAaY,UAAAA,EAAE,EAAC,IAAhB;AAAsBC,UAAAA,KAAK,EAAC;AAA5B,SAAZ;AAA+CX,QAAAA,aAAa,EAAE;AAA9D,OAAd;AAAsF,KApmBxG;;AAAA,SA0rBb0B,kBA1rBa,GA0rBQ9D,MAAM,IAAI;AAC7BY,MAAAA,QAAQ,CAACmD,gBAAT,CAA0B,MAAI/D,MAA9B,EAAsCgE,OAAtC,CAA8CC,EAAE,IAAEA,EAAE,CAACrE,SAAH,CAAaI,MAAb,CAAoBA,MAApB,CAAlD;AACD,KA5rBY;;AAAA,SA8rBbE,oBA9rBa,GA8rBU,CAAC,GAAGgE,OAAJ,KAAgB;AACrCA,MAAAA,OAAO,CAACF,OAAR,CAAgB/F,CAAC,IAAI2C,QAAQ,CAACmD,gBAAT,CAA0B,MAAI9F,CAA9B,EAAiC+F,OAAjC,CAAyCC,EAAE,IAAEA,EAAE,CAACrE,SAAH,CAAaI,MAAb,CAAoB/B,CAApB,CAA7C,CAArB;AACD,KAhsBY;;AAAA,SAksBbkG,gBAlsBa,GAksBM,MAAM;AACtB,WAAKL,kBAAL,CAAwB,UAAxB;AACF,KApsBY;;AAAA,SA+sBbM,gBA/sBa,GA+sBM,CAACC,YAAY,GAACC,SAAd,KAA4B;AAC7C,UAAI7D,YAAY,GAAI4D,YAAY,KAAGC,SAAhB,GAA6B,KAAKlG,KAAL,CAAWqC,YAAxC,GAAuD4D,YAA1E;AACA,WAAKnE,oBAAL,CAA0B,UAA1B,EAAsC,WAAtC;;AACA,UAAG1C,KAAK,CAAC+G,QAAN,EAAH,EAAoB;AAClB,YAAIpF,MAAM,GAAGyB,QAAQ,CAACC,cAAT,CAAwBrD,KAAK,CAACgH,QAAN,EAAxB,CAAb;AACArF,QAAAA,MAAM,CAACS,SAAP,CAAiBC,GAAjB,CAAqB,WAArB;AAEA,YAAG,CAACY,YAAJ,EAAkB;AAClBjD,QAAAA,KAAK,CAACiH,KAAN,CAAY;AAACC,UAAAA,OAAO,EAAC;AAAT,SAAZ,EAA4BV,OAA5B,CAAoCW,IAAI,IAAE;AACxC,cAAIC,GAAG,GAAGhE,QAAQ,CAACC,cAAT,CAAwB8D,IAAI,CAAC7B,EAA7B,CAAV;AACA8B,UAAAA,GAAG,CAAChF,SAAJ,CAAcC,GAAd,CAAkB,UAAlB;AACA+E,UAAAA,GAAG,CAACC,KAAJ,CAAUC,WAAV,CAAsBjH,aAAtB,EAAqC,MAArC;AACD,SAJD;AAKA;AAED;;AACD,UAAG,CAAC4C,YAAJ,EAAkB;AAClB,UAAIsE,OAAO,GAAGvH,KAAK,CAACwH,mBAAN,CAA0B,IAA1B,EAAgC,IAAhC,EAAsC,KAAtC,CAAd;;AAEA,WAAI,IAAI,CAAC7F,MAAD,EAAS8F,KAAT,CAAR,IAA2BC,MAAM,CAACC,OAAP,CAAeJ,OAAf,CAA3B,EAAmD;AACjD,YAAGE,KAAK,CAACG,CAAN,GAAQ,CAAR,IAAWH,KAAK,CAACI,CAAN,GAAQ,CAAtB,EAAwB;AACtB,cAAIT,GAAG,GAAGhE,QAAQ,CAACC,cAAT,CAAwB1B,MAAxB,CAAV;AACAyF,UAAAA,GAAG,CAAChF,SAAJ,CAAcC,GAAd,CAAkB,UAAlB;AACA,cAAIyF,KAAK,GAAG,KAAKC,QAAL,CAAcN,KAAK,CAACG,CAApB,EAAsBH,KAAK,CAACI,CAA5B,CAAZ;AACAT,UAAAA,GAAG,CAACC,KAAJ,CAAUC,WAAV,CAAsBjH,aAAtB,EAAqCyH,KAAK,GAAC,GAA3C;AACD;AACF;AACF,KA1uBY;;AAGX,SAAKlH,KAAL,GAAa;AACXC,MAAAA,aAAa,EAAE,CADJ;AAEX+D,MAAAA,aAAa,EAAE,KAFJ;AAGX9D,MAAAA,WAAW,EAAE,CAACd,KAAK,CAACgI,GAAN,EAAD,CAHF;AAGiB;AAC5BC,MAAAA,OAAO,EAAE,KAJE;AAKX3D,MAAAA,OAAO,EAAE,EALE;AAKE;AACb4D,MAAAA,WAAW,EAAE,IANF;AAMQ;AACnBhH,MAAAA,KAAK,EAAE,KAPI;AAQX+B,MAAAA,YAAY,EAAE,IARH;AASXkF,MAAAA,QAAQ,EAAE,KATC;AAUXC,MAAAA,OAAO,EAAE,KAVE;AAWXC,MAAAA,MAAM,EAAE,EAXG;AAYXlF,MAAAA,WAAW,EAAE,IAZF;AAaXhC,MAAAA,SAAS,EAAE;AACTuD,QAAAA,IAAI,EAAE,IADG;AAETY,QAAAA,EAAE,EAAE,IAFK;AAGTC,QAAAA,KAAK,EAAE;AAHE,OAbA;AAkBXf,MAAAA,QAAQ,EAAE;AAlBC,KAAb;AAoBD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACE8D,EAAAA,MAAM,GAAE;AACN;AACAtI,IAAAA,KAAK,CAACuI,IAAN,CAAW,KAAK3H,KAAL,CAAWE,WAAX,CAAuB,KAAKF,KAAL,CAAWC,aAAlC,CAAX;AACA,QAAI2H,WAAW,GAAGxI,KAAK,CAAC6F,IAAN,EAAlB;AACA,QAAI4C,GAAG,GAAG,KAAK7H,KAAL,CAAWqH,OAAX,GAAqBS,KAAK,CAACC,SAAN,CAAgBC,OAAhB,CAAwBC,IAAxB,CAA6B7I,KAAK,CAAC8I,KAAN,GAAcC,IAAd,EAA7B,CAArB,GAA0E/I,KAAK,CAAC8I,KAAN,GAAcC,IAAd,EAApF;AACA,QAAIC,WAAW,GAAG,KAAKpI,KAAL,CAAWqH,OAAX,GAAqBhI,QAAQ,CAAC2I,OAAT,EAArB,GAA0C3I,QAA5D;AAEA,QAAIgJ,cAAc,GAAG,CAAC,OAAD,EAAU,MAAV,CAArB;AACA,QAAIC,CAAC,GAAG,CAAR;AACA,QAAId,OAAO,GAAG,KAAKxH,KAAL,CAAWwH,OAAzB;AACA,wBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACE;AAAI,QAAA,EAAE,EAAC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAIE;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA,gCACE;AAAK,UAAA,EAAE,EAAElI,QAAT;AAAmB,UAAA,SAAS,EAAC,YAA7B;AAAA,oBAEIuI,GAAG,CAACU,GAAJ,CAAQ,CAACxH,MAAD,EAASL,CAAT,KAAa;AACnB,mBAAOK,MAAM,gBAEb;AACE,cAAA,UAAU,EAAE,KAAKmB,eADnB;AAEE,cAAA,WAAW,EAAE,KAAKC,gBAFpB;AAGE,cAAA,MAAM,EAAE,KAAKN,WAHf,CAIE;AAJF;AAKE,cAAA,EAAE,EAAEuG,WAAW,CAAC1H,CAAD,CALjB;AAME,+BAAe0H,WAAW,CAAC1H,CAAD,CAN5B;AAOE,4BAAYA,CAPd;AASE,cAAA,SAAS,EAAG,UAAS2H,cAAc,CAACC,CAAC,GAAC,CAAH,CAAM,EAT3C;AAAA,sCAUI;AAAK,gBAAA,SAAS,EAAC,WAAf;AAAA,wCACE;AAAK,kBAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,wBADF,eAEE;AAAK,kBAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,wBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,sBAVJ,eAcI;AACE,gBAAA,SAAS,EAAG,SAAQ,KAAKhD,SAAL,CAAevE,MAAM,CAAC4D,KAAtB,CAA6B,IAAG5D,MAAM,CAACyH,IAAK,EADlE;AAEE,gBAAA,SAAS,EAAC,MAFZ;AAGE,iCAAeJ,WAAW,CAAC1H,CAAD,CAH5B;AAIE,gBAAA,WAAW,EAAE,KAAKI,gBAJpB;AAKE,gBAAA,SAAS,EAAE,KAAKa,cALlB;AAME,gBAAA,OAAO,EAAE,KAAKsC;AANhB;AAAA;AAAA;AAAA;AAAA,sBAdJ;AAAA,eAQOmE,WAAW,CAAC1H,CAAD,CARlB;AAAA;AAAA;AAAA;AAAA,oBAFa,gBA0Bb;AACE;AACA,+BAAe0H,WAAW,CAAC1H,CAAD,CAF5B;AAGE,cAAA,EAAE,EAAE0H,WAAW,CAAC1H,CAAD,CAHjB;AAIE,4BAAYA,CAJd;AAKE,cAAA,UAAU,EAAE,KAAKwB,eALnB;AAME,cAAA,YAAY,EAAE,KAAKvB,iBANrB;AAOE,cAAA,WAAW,EAAE,KAAKwB,gBAPpB;AAQE,cAAA,OAAO,EAAE,KAAK0B,WARhB;AASE,cAAA,MAAM,EAAE,KAAKhC,WATf;AAWE,cAAA,SAAS,EAAC,QAXZ;AAAA,qCAYI;AAAK,gBAAA,SAAS,EAAC,WAAf;AAAA,wCACE;AAAK,kBAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,wBADF,eAEE;AAAK,kBAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,wBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAZJ,eAUOuG,WAAW,CAAC1H,CAAD,CAVlB;AAAA;AAAA;AAAA;AAAA,oBA1BA;AA2CH,WA5CC;AAFJ;AAAA;AAAA;AAAA;AAAA,gBADF,EAmDG,KAAKV,KAAL,CAAWO,SAAX,CAAqBuD,IAArB,gBACC,QAAC,eAAD;AACE,UAAA,OAAO,EAAE,KAAKU,gBADhB;AAEE,UAAA,IAAI,EAAE,KAAKxE,KAAL,CAAWO,SAAX,CAAqBuD,IAF7B;AAGE,UAAA,EAAE,EAAE,KAAK9D,KAAL,CAAWO,SAAX,CAAqBmE,EAH3B;AAIE,UAAA,KAAK,EAAE,KAAK1E,KAAL,CAAWO,SAAX,CAAqBoE;AAJ9B;AAAA;AAAA;AAAA;AAAA,gBADD,GAQK,EA3DR,eA8DE;AAAA,kCACE,QAAC,KAAD;AACE,YAAA,OAAO,EAAE,KAAKnB,SADhB;AAEE,YAAA,aAAa,EAAE,KAAKxD,KAAL,CAAWC,aAF5B;AAGE,YAAA,KAAK,EAAE,KAAKD,KAAL,CAAW0D,OAHpB;AAIE,YAAA,WAAW,EAAEkE,WAJf;AAKE,YAAA,MAAM,EAAE,KAAK5H,KAAL,CAAWyH,MALrB;AAME,YAAA,WAAW,EAAE,KAAKzH,KAAL,CAAWyI,WAN1B;AAOE,YAAA,WAAW,EAAE,KAAKzI,KAAL,CAAW0I;AAP1B;AAAA;AAAA;AAAA;AAAA,kBADF,eAWI;AAAK,YAAA,SAAS,EAAC,OAAf;AAAA,uBACIlB,OAAO,iBACL;AAAK,cAAA,SAAS,EAAC,SAAf;AAAA,sCACE;AAAK,gBAAA,SAAS,EAAC,aAAf;AAAA,0BAA8BA,OAAO,CAACiB,WAAR,GAAsBjB,OAAO,CAACiB,WAA9B,GAA4C;AAA1E;AAAA;AAAA;AAAA;AAAA,sBADF,eAGE;AAAK,gBAAA,SAAS,EAAC,aAAf;AAAA,0BAA8BjB,OAAO,CAACkB,WAAR,GAAsBlB,OAAO,CAACkB,WAA9B,GAA4C;AAA1E;AAAA;AAAA;AAAA;AAAA,sBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFN,EASI,KAAK1I,KAAL,CAAWyH,MAAX,iBACE;AAAK,cAAA,SAAS,EAAC,QAAf;AAAA,8BAA0B,KAAKzH,KAAL,CAAWyH,MAArC;AAAA;AAAA;AAAA;AAAA;AAAA,oBAVN;AAAA;AAAA;AAAA;AAAA;AAAA,kBAXJ,eAyBI;AAAK,YAAA,SAAS,EAAC,kBAAf;AAAA,oCACI,QAAC,WAAD;AACE,cAAA,MAAM,EAAC,YADT;AAEE,cAAA,OAAO,EAAC,WAFV;AAGE,cAAA,OAAO,EAAE,KAAKpE;AAHhB;AAAA;AAAA;AAAA;AAAA,oBADJ,eAMI,QAAC,WAAD;AACE,cAAA,MAAM,EAAC,aADT;AAEE,cAAA,OAAO,EAAC,kBAFV;AAGE,cAAA,KAAK,EAAE,KAAKuB,aAAL,CAAmB,KAAK5E,KAAL,CAAW4D,QAA9B,CAHT;AAIE,cAAA,OAAO,EAAE,KAAKD;AAJhB;AAAA;AAAA;AAAA;AAAA,oBANJ,eAYI,QAAC,gBAAD;AACE,cAAA,IAAI,EAAE,CAAC,aAAD,EAAgB,aAAhB,CADR;AAEE,cAAA,WAAW,EAAE,CAFf;AAGE,cAAA,OAAO,EAAE,KAAKrB;AAHhB;AAAA;AAAA;AAAA;AAAA,oBAZJ,eAgBI,QAAC,gBAAD;AACE,cAAA,IAAI,EAAE,CAAC,oBAAD,EAAuB,oBAAvB,CADR;AAEE,cAAA,WAAW,EAAE,CAFf;AAGE,cAAA,OAAO,EAAE,KAAKF;AAHhB;AAAA;AAAA;AAAA;AAAA,oBAhBJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBAzBJ,eAiDK;AAAA,oCACC;AAAA,qEAA8B;AAAG,gBAAA,GAAG,EAAC,iBAAP;AAAyB,gBAAA,IAAI,EAAC,0DAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAA9B;AAAA;AAAA;AAAA;AAAA;AAAA,oBADD,eAEC;AAAA,4DAAqB;AAAG,gBAAA,IAAI,EAAC,aAAR;AAAsB,gBAAA,GAAG,EAAC,SAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAArB;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFD,eAGC;AAAA,mDAAY;AAAG,gBAAA,IAAI,EAAG,8BAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAZ;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHD;AAAA;AAAA;AAAA;AAAA;AAAA,kBAjDL;AAAA;AAAA;AAAA;AAAA;AAAA,gBA9DF;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF,EA8HG,KAAKpC,KAAL,CAAWM,KAAX,gBACC,QAAC,KAAD;AACG,QAAA,KAAK,EAAE,KAAKN,KAAL,CAAWM;AADrB;AAAA;AAAA;AAAA;AAAA,cADD,GAIG,EAlIN;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAuID;;AAEDqI,EAAAA,iBAAiB,GAAE;AACjBnG,IAAAA,QAAQ,CAACoG,gBAAT,CAA0B,SAA1B,EAAqC,KAAKhJ,cAA1C,EADiB,CAEjB;;AACA,QAAG,KAAKI,KAAL,CAAWqC,YAAd,EAA4B,KAAK2D,gBAAL;AAC7B;AAGD;AACF;AACA;;;AACE6C,EAAAA,qBAAqB,CAACC,SAAD,EAAYC,SAAZ,EAAsB;AACzC,QAAG,KAAK/I,KAAL,CAAWuC,WAAX,KAAyBwG,SAAS,CAACxG,WAAtC,EAAmD,OAAO,KAAP;;AACnD,QAAG,KAAKvC,KAAL,CAAWqC,YAAX,KAA0B0G,SAAS,CAAC1G,YAAvC,EAAoD;AAClD,WAAK2D,gBAAL,CAAsB+C,SAAS,CAAC1G,YAAhC;AACA,aAAO,KAAP;AACD;;AACD,WAAO,IAAP;AACD;AAED;AACF;AACA;;;AACE2G,EAAAA,kBAAkB,GAAG;AACnB,QAAG,KAAKhJ,KAAL,CAAWC,aAAX,GAAyB,CAA5B,EAA8B;AAAE;AAC9B,WAAKyF,kBAAL,CAAwB,aAAxB;;AACA,UAAG;AACD,aAAKuD,eAAL,CAAqB,KAAKjJ,KAAL,CAAW0D,OAAX,CAAmB,KAAK1D,KAAL,CAAWC,aAAX,GAAyB,CAA5C,EAA+CyE,EAApE;AACD,OAFD,CAEC,OAAMwE,GAAN,EAAU;AACTtI,QAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0C,KAAKb,KAAL,CAAWC,aAArD;AACAW,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6B,KAAKb,KAAL,CAAW0D,OAAX,CAAmB,KAAK1D,KAAL,CAAWC,aAAX,GAAyB,CAA5C,CAA7B;AACAW,QAAAA,OAAO,CAACuI,KAAR,CAAc,QAAd,EAAwBD,GAAxB;AACD;AACF;;AACD,QAAG,KAAKlJ,KAAL,CAAWqC,YAAd,EAA4B,KAAK2D,gBAAL;AAC7B;AAED;AACF;AACA;AACA;AACA;;;AAgGEoD,EAAAA,qBAAqB,CAACC,GAAD,EAAMC,GAAN,EAAW;AAC9BD,IAAAA,GAAG,GAAGE,IAAI,CAACC,IAAL,CAAUH,GAAV,CAAN;AACAC,IAAAA,GAAG,GAAGC,IAAI,CAACE,KAAL,CAAWH,GAAX,CAAN;AACA,WAAOC,IAAI,CAACE,KAAL,CAAWF,IAAI,CAACG,MAAL,MAAiBJ,GAAG,GAAGD,GAAN,GAAY,CAA7B,IAAkCA,GAA7C,CAAP,CAH8B,CAG4B;AAC3D;;AAuJD;AACF;AACA;AACA;AACA;;AAEE;AACF;AACA;AACEzF,EAAAA,QAAQ,CAAC+F,KAAD,EAAQC,GAAR,EAAY;AAClB,MAAED,KAAF;;AACA,QAAGA,KAAK,IAAEC,GAAP,IAAc,CAAC,KAAK5J,KAAL,CAAW4D,QAA7B,EAAsC;AACpC,WAAKxD,QAAL,CAAc;AAACwD,QAAAA,QAAQ,EAAC;AAAV,OAAd;AACA,aAAO,KAAP;AACD;;AACD,SAAKxD,QAAL,CAAc;AAACH,MAAAA,aAAa,EAAE0J;AAAhB,KAAd;AACAE,IAAAA,UAAU,CAAC,MAAM,KAAKjG,QAAL,CAAc+F,KAAd,EAAqBC,GAArB,CAAP,EAAkCrK,cAAlC,CAAV;AACD;;AAID8E,EAAAA,iBAAiB,CAACD,GAAD,EAAK;AACpBzB,IAAAA,KAAK,CAACyB,GAAD,CAAL,CACGxB,IADH,CACQC,GAAG,IAAIA,GAAG,CAACK,IAAJ,EADf,EAEGN,IAFH,CAEQC,GAAG,IAAI,KAAKyB,OAAL,CAAazB,GAAb,CAFf;AAGD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEyB,EAAAA,OAAO,CAACwF,GAAD,EAAK;AACV,QAAIC,WAAW,GAAG3K,KAAK,CAAC4K,QAAN,CAAeF,GAAf,CAAlB;AACA,QAAIG,OAAO,GAAG7K,KAAK,CAAC8K,MAAN,EAAd;AACA,QAAI1C,OAAO,GAAG,EAAd;;AAEA,QAAGyC,OAAO,CAACE,KAAX,EAAiB;AACf,UAAInH,OAAO,GAAGiH,OAAO,CAACG,UAAR,GAAsB,IAAGH,OAAO,CAACG,UAAW,KAAIH,OAAO,CAACE,KAAM,EAA9D,GAAkEF,OAAO,CAACE,KAAxF;AACA3C,MAAAA,OAAO,CAACiB,WAAR,GAAsBzF,OAAtB;AACD;;AAAA,QAAGiH,OAAO,CAACI,KAAX,EAAiB;AAChB,UAAIrH,OAAO,GAAGiH,OAAO,CAACK,UAAR,GAAsB,IAAGL,OAAO,CAACK,UAAW,KAAIL,OAAO,CAACI,KAAM,EAA9D,GAAkEJ,OAAO,CAACI,KAAxF;AACA7C,MAAAA,OAAO,CAACkB,WAAR,GAAsB1F,OAAtB;AACD;;AAED,QAAIyE,MAAM,GAAGwC,OAAO,CAACM,MAAR,GAAiB,aAAaN,OAAO,CAACM,MAAtC,GAA+C,EAA5D;AACA,QAAGN,OAAO,CAACO,WAAX,EAAwB/C,MAAM,IAAK,KAAIwC,OAAO,CAACO,WAAY,GAAnC;;AAExB,QAAGT,WAAH,EAAe;AACb,UAAIrG,OAAO,GAAGtE,KAAK,CAACsE,OAAN,CAAc;AAAC4C,QAAAA,OAAO,EAAC;AAAT,OAAd,CAAd;AACA,UAAImE,WAAW,GAAG,EAAlB;AACArL,MAAAA,KAAK,CAACsL,KAAN;AACA,UAAIxK,WAAW,GAAG,CAACd,KAAK,CAACgI,GAAN,EAAD,CAAlB;AACA1D,MAAAA,OAAO,CAACkC,OAAR,CAAgB,CAAC/F,CAAD,EAAIa,CAAJ,KAAQ;AACtBtB,QAAAA,KAAK,CAACmH,IAAN,CAAW1G,CAAX;AACAK,QAAAA,WAAW,CAACyK,IAAZ,CAAiBvL,KAAK,CAACgI,GAAN,EAAjB;AACAqD,QAAAA,WAAW,CAAC/J,CAAD,CAAX,GAAiB;AAACoD,UAAAA,IAAI,EAAEjE,CAAC,CAACiE,IAAT;AAAeY,UAAAA,EAAE,EAAC7E,CAAC,CAAC6E,EAApB;AAAwBkG,UAAAA,GAAG,EAAC/K,CAAC,CAAC+K;AAA9B,SAAjB;AACD,OAJD;AAKAxL,MAAAA,KAAK,CAACuI,IAAN,CAAWzH,WAAW,CAAC,CAAD,CAAtB;AACA,WAAKE,QAAL,CAAc;AAACsD,QAAAA,OAAO,EAAE+G,WAAV;AAAuBvK,QAAAA,WAAvB;AAAoCoH,QAAAA,WAAW,EAAEwC,GAAjD;AAAsD7J,QAAAA,aAAa,EAAE,CAArE;AAAwEwH,QAAAA,MAAxE;AAAgFD,QAAAA;AAAhF,OAAd;AAED,KAbD,MAaM5G,OAAO,CAACC,GAAR,CAAYkJ,WAAZ;AACP;;AAEDxF,EAAAA,OAAO,CAAC6C,GAAD,EAAK;AACV,QAAI2C,WAAW,GAAG3K,KAAK,CAACuI,IAAN,CAAWP,GAAX,CAAlB;AACA,QAAIlH,WAAW,GAAG,CAACd,KAAK,CAACgI,GAAN,EAAD,CAAlB;AACA,QAAI1D,OAAO,GAAG,EAAd;AACA,SAAKtD,QAAL,CAAc;AAACF,MAAAA,WAAD;AAAcwD,MAAAA,OAAd;AAAuBzD,MAAAA,aAAa,EAAE;AAAtC,KAAd;AACD,GAviByB,CAyiB1B;;;AAKA;AACA;AACA;AACA;AACA;AAEAkH,EAAAA,QAAQ,CAACH,CAAD,EAAIC,CAAJ,EAAM;AACZ,QAAGD,CAAC,KAAG,CAAJ,IAAOC,CAAC,KAAG,CAAd,EAAiB,OAAO,CAAP;AACjB,QAAI4D,GAAG,GAAG7D,CAAC,GAAGC,CAAd;AACA,QAAI6D,UAAU,GAAG9D,CAAC,GAAC6D,GAAF,GAAM,GAAvB;AACA,WAAOC,UAAP;AACD;;AAEDC,EAAAA,gBAAgB,CAAC/D,CAAD,EAAIC,CAAJ,EAAM;AACpB,QAAGD,CAAC,KAAG,CAAP,EAAU,OAAO,CAAP;AACV,QAAGC,CAAC,KAAG,CAAP,EAAU,OAAO,GAAP;AACV,QAAI4D,GAAG,GAAG7D,CAAC,GAAGC,CAAd;AACA,QAAI6D,UAAU,GAAG,MAAI9D,CAAC,GAAC6D,GAAF,GAAM,GAA3B;AACA,WAAOC,UAAP;AACD;;AAgBDE,EAAAA,mBAAmB,CAACjK,MAAD,EAAQ;AAAE,WAAQA,MAAM,IAAE,CAAR,IAAWA,MAAM,IAAE,CAApB,IAAyBA,MAAM,IAAE,EAAR,IAAYA,MAAM,IAAE,EAApD;AAA0D;;AAEvFkK,EAAAA,gBAAgB,CAAClK,MAAD,EAAQ;AAAE,WAAOmK,MAAM,CAACnK,MAAM,CAACoK,MAAP,CAAc,CAAd,CAAD,CAAb;AAAkC;;AAE5DC,EAAAA,mBAAmB,CAACrK,MAAD,EAAS4D,KAAT,EAAe;AAChC,WAAOA,KAAK,KAAG,GAAR,GAAc,KAAKsG,gBAAL,CAAsBlK,MAAtB,KAA+B,CAA7C,GAAiD,KAAKkK,gBAAL,CAAsBlK,MAAtB,KAA+B,CAAvF;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEsK,EAAAA,QAAQ,CAACtK,MAAD,EAAQ;AACd,QAAGmK,MAAM,CAACnK,MAAD,CAAN,GAAe,CAAf,KAAmB,CAAtB,EAAyB,OAAO,CAAP;AACzB,QAAGmK,MAAM,CAACnK,MAAD,CAAN,GAAe,CAAf,KAAmB,CAAtB,EAAyB,OAAO,CAAP;AACzB,WAAO,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AAGEuK,EAAAA,mBAAmB,CAACxH,IAAD,EAAOY,EAAP,EAAWC,KAAX,EAAiB;AAAE,SAAKvE,QAAL,CAAc;AAACG,MAAAA,SAAS,EAAE;AAACuD,QAAAA,IAAD;AAAOY,QAAAA,EAAP;AAAWC,QAAAA;AAAX;AAAZ,KAAd;AAAgD;;AAKtFlE,EAAAA,cAAc,GAAE;AACd,QAAI8K,cAAc,GAAGnM,KAAK,CAACiH,KAAN,CAAY;AAACC,MAAAA,OAAO,EAAC;AAAT,KAAZ,CAArB;AACA,QAAIC,IAAI,GAAGgF,cAAc,CAAC,KAAKC,YAAL,CAAkBD,cAAc,CAACpL,MAAjC,CAAD,CAAzB;AACA,SAAK8B,OAAL,CAAasE,IAAI,CAACzC,IAAlB,EAAwByC,IAAI,CAAC7B,EAA7B;AACD;;AAED8G,EAAAA,YAAY,CAAClC,GAAD,EAAM;AAChB,WAAOC,IAAI,CAACE,KAAL,CAAWF,IAAI,CAACG,MAAL,KAAgBJ,GAA3B,CAAP;AACD;AAGD;AACF;AACA;AACA;AACA;;;AACErH,EAAAA,OAAO,CAAC6B,IAAD,EAAOY,EAAP,EAAW+G,SAAS,GAAG,KAAvB,EAA6B;AAClC,QAAIvL,WAAW,GAAG,CAAC,GAAG,KAAKF,KAAL,CAAWE,WAAf,CAAlB;AACA,QAAIwD,OAAO,GAAGoD,MAAM,CAAC4E,MAAP,CAAc,EAAd,EAAkB,KAAK1L,KAAL,CAAW0D,OAA7B,CAAd;AACA,QAAIiI,OAAO,GAAG;AAAC7H,MAAAA,IAAD;AAAOY,MAAAA;AAAP,KAAd;;AAEA,QAAG,KAAK1E,KAAL,CAAWC,aAAX,GAAyB,KAAKD,KAAL,CAAWE,WAAX,CAAuBC,MAAnD,EAA0D;AAAE;AAC1DD,MAAAA,WAAW,GAAGA,WAAW,CAAC6E,KAAZ,CAAkB,CAAlB,EAAqB,KAAK/E,KAAL,CAAWC,aAAX,GAAyB,CAA9C,CAAd;AACA,UAAIwK,WAAW,GAAG,EAAlB;;AACA,WAAI,IAAI,CAACmB,GAAD,EAAM/E,KAAN,CAAR,IAAwBC,MAAM,CAACC,OAAP,CAAerD,OAAf,CAAxB,EAAgD;AAC9C,YAAGkI,GAAG,IAAE,KAAK5L,KAAL,CAAWC,aAAnB,EAAkC;AAClCwK,QAAAA,WAAW,CAACmB,GAAD,CAAX,GAAmB/E,KAAnB;AACD;;AACCnD,MAAAA,OAAO,GAAGoD,MAAM,CAAC4E,MAAP,CAAc,EAAd,EAAkBjB,WAAlB,CAAV;AACH;;AAED,QAAGgB,SAAH,EAAcE,OAAO,CAACpL,SAAR,GAAoBkL,SAApB,CAAd,KACI;AACF,UAAG,KAAKL,mBAAL,CAAyB1G,EAAzB,EAA6BtF,KAAK,CAAC6F,IAAN,EAA7B,KAA8C7F,KAAK,CAACqG,GAAN,CAAU3B,IAAV,EAAgB0E,IAAhB,KAAyB,GAA1E,EAA8E;AAC5E,YAAG,KAAKxI,KAAL,CAAWO,SAAX,CAAqBuD,IAArB,KAA4B,IAA/B,EAAoC;AAClC,eAAKwH,mBAAL,CAAyBxH,IAAzB,EAA+BY,EAA/B,EAAmC,KAAKY,SAAL,CAAelG,KAAK,CAAC6F,IAAN,EAAf,CAAnC;AACA;AACD,SAHD,MAGK;AACH0G,UAAAA,OAAO,CAACpL,SAAR,GAAoBkL,SAApB;AACD;AACF;AACF;AAED,QAAI5I,GAAG,GAAGzD,KAAK,CAACmH,IAAN,CAAWoF,OAAX,CAAV;;AAEA,QAAG9I,GAAH,EAAO;AACL3C,MAAAA,WAAW,CAACyK,IAAZ,CAAiBvL,KAAK,CAACgI,GAAN,EAAjB;AACA1D,MAAAA,OAAO,CAAC,KAAK1D,KAAL,CAAWC,aAAZ,CAAP,GAAoC;AAAC6D,QAAAA,IAAI,EAAE6H,OAAO,CAAC7H,IAAf;AAAqBY,QAAAA,EAAE,EAAEiH,OAAO,CAACjH,EAAjC;AAAqCkG,QAAAA,GAAG,EAAE/H,GAAG,CAAC+H;AAA9C,OAApC;;AACA,UAAGxL,KAAK,CAACqI,MAAN,EAAH,EAAkB;AAAE;AAClB,aAAKrH,QAAL,CAAcC,SAAS,KACrB;AAACJ,UAAAA,aAAa,EAAEI,SAAS,CAACJ,aAAV,GAAwB,CAAxC;AAA2CyD,UAAAA,OAA3C;AAAoDxD,UAAAA,WAApD;AAAiEuH,UAAAA,MAAM,EAAErI,KAAK,CAACqI,MAAN;AAAzE,SADqB,CAAvB;AAGA;AACD;;AACD,WAAKrH,QAAL,CAAcC,SAAS,KACrB;AAACJ,QAAAA,aAAa,EAAEI,SAAS,CAACJ,aAAV,GAAwB,CAAxC;AAA2CyD,QAAAA,OAA3C;AAAoDxD,QAAAA;AAApD,OADqB,CAAvB;AAGA,aAAO2C,GAAG,CAAC+H,GAAX;AACD,KAbD,MAaK;AACHhK,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAA0BgC,GAAtC;AACA,aAAO,KAAP;AACD;AACF,GA9qByB,CAgrB1B;;AAEA;AACF;AACA;AACA;AACA;;;AAGEnB,EAAAA,cAAc,CAAC+C,KAAD,EAAO;AACnBrF,IAAAA,KAAK,CAACiH,KAAN,CAAY;AAACtF,MAAAA,MAAM,EAAC0D,KAAR;AAAe6B,MAAAA,OAAO,EAAC;AAAvB,KAAZ,EAA0CV,OAA1C,CAAkDW,IAAI,IAAE;AACtD/D,MAAAA,QAAQ,CAACC,cAAT,CAAwB8D,IAAI,CAAC7B,EAA7B,EAAiClD,SAAjC,CAA2CC,GAA3C,CAA+C,UAA/C;AACD,KAFD;AAGD;;AAEDwH,EAAAA,eAAe,CAAClI,MAAD,EAAQ;AACrByB,IAAAA,QAAQ,CAACC,cAAT,CAAwB1B,MAAxB,EAAgCS,SAAhC,CAA0CC,GAA1C,CAA8C,aAA9C;AACD;;AAjsByB;;AAsvB5B,eAAe/B,GAAf","sourcesContent":["import './App.css';\nimport React, { Component } from 'react';\nimport Moves from './components/Moves/Moves';\n// import Square from './components/Square/Square'\nimport PopUp from './components/PopUp/PopUp';\n// import Button from './components/Button/Button';\nimport ToggleTextButton from './components/ToggleTextButton/ToggleTextButton';\nimport ImageButton from './components/ImageButton/ImageButton';\nimport PGNDialog from './components/PGNDialog/PGNDialog';\nimport GamesList from './components/GamesList/GamesList';\nimport PromotionPrompt from './components/PromotionPrompt/PromotionPrompt';\n// import Squares from './components/Squares/Squares';\nimport Draggable from 'react-draggable';\n\nimport * as ChessJS from 'chess.js';\nconst Chess = typeof ChessJS === \"function\" ? ChessJS : ChessJS.Chess;\nconst chess = new Chess();\n\n// const SQUARES = {\n//     a8:   0, b8:   1, c8:   2, d8:   3, e8:   4, f8:   5, g8:   6, h8:   7,\n//     a7:  16, b7:  17, c7:  18, d7:  19, e7:  20, f7:  21, g7:  22, h7:  23,\n//     a6:  32, b6:  33, c6:  34, d6:  35, e6:  36, f6:  37, g6:  38, h6:  39,\n//     a5:  48, b5:  49, c5:  50, d5:  51, e5:  52, f5:  53, g5:  54, h5:  55,\n//     a4:  64, b4:  65, c4:  66, d4:  67, e4:  68, f4:  69, g4:  70, h4:  71,\n//     a3:  80, b3:  81, c3:  82, d3:  83, e3:  84, f3:  85, g3:  86, h3:  87,\n//     a2:  96, b2:  97, c2:  98, d2:  99, e2: 100, f2: 101, g2: 102, h2: 103,\n//     a1: 112, b1: 113, c1: 114, d1: 115, e1: 116, f1: 117, g1: 118, h1: 119\n//   };\n\nconst squareID = [\"a8\", \"b8\", \"c8\", \"d8\", \"e8\", \"f8\", \"g8\", \"h8\", \"a7\", \"b7\", \"c7\", \"d7\", \"e7\", \"f7\", \"g7\", \"h7\", \"a6\", \"b6\", \"c6\", \"d6\", \"e6\", \"f6\", \"g6\", \"h6\", \"a5\", \"b5\", \"c5\", \"d5\", \"e5\", \"f5\", \"g5\", \"h5\", \"a4\", \"b4\", \"c4\", \"d4\", \"e4\", \"f4\", \"g4\", \"h4\", \"a3\", \"b3\", \"c3\", \"d3\", \"e3\", \"f3\", \"g3\", \"h3\", \"a2\", \"b2\", \"c2\", \"d2\", \"e2\", \"f2\", \"g2\", \"h2\", \"a1\", \"b1\", \"c1\", \"d1\", \"e1\", \"f1\", \"g1\", \"h1\"];\nconst BOARD_ID = 'chessboard'; \nconst AUTOPLAY_SPEED = 500; \nconst SQUARE_SIZE = 100;\nconst CONTROL_CLASS = '--control'; // Variable in CSS for storing the ratio of attackers/defenders on a square \n\n\nclass App extends Component {\n\n  /*\n  ----------------------------------------------------------------------------------------------------------------------------------\n  ------------------------------------------------------------ REACT ---------------------------------------------------------------\n  ----------------------------------------------------------------------------------------------------------------------------------\n  */\n\n\n  constructor(){\n    super();\n\n    this.state = {\n      selected_move: 0,\n      piece_clicked: false,\n      fen_history: [chess.fen()], // all moves, each represented by fen \n      flipped: false,\n      history: {}, // Single moves, each with from and to-squares and in SAN format \n      loaded_game: null, //PGN of loaded game \n      popUp: false, \n      show_control: true,\n      weighted: false,\n      players: false,\n      result: '',\n      show_pieces: true,\n      promotion: {\n        from: null,\n        to: null,\n        color: null\n      },\n      autoplay: false\n    };  \n  }\n\n  /**\n   * \n   * Each render gets every piece from chess.js. Pieces are rendered as children into the squares \n   * Board control is realized through the .square-bg children\n   * List of played moves is passed to the Moves-component, which also displays game results \n   * \n   **/\n  render(){\n    // let arr = this.state.flipped ? chess.board().flat().reverse() : chess.board().flat();\n    chess.load(this.state.fen_history[this.state.selected_move]);\n    let colorToMove = chess.turn();\n    let arr = this.state.flipped ? Array.prototype.reverse.call(chess.board().flat()) : chess.board().flat();\n    let squares_ids = this.state.flipped ? squareID.reverse() : squareID;\n\n    let square_classes = ['light', 'dark'];\n    let c = 0; \n    let players = this.state.players;\n    return(\n      <div className='container'>\n        <h1 id=\"title\">\n          visual chess\n        </h1>\n        <div className=\"main\"> \n          <div id={BOARD_ID} className='chessboard'> \n            {\n              arr.map((square, i)=>{\n                return square \n                ? \n                <div \n                  onDragOver={this.dragOverHandler} \n                  onDragLeave={this.dragLeaveHandler} \n                  onDrop={this.dropHandler} \n                  // data-square={SQUARES[squares_ids[i]]}\n                  id={squares_ids[i]}\n                  data-position={squares_ids[i]}\n                  data-count={i}\n                  key={squares_ids[i]} \n                  className={`square ${square_classes[c%2]}`}> \n                    <div className='square-bg'>\n                      <div className='control-dark' /> \n                      <div className='control-light' />\n                    </div> \n                    <div \n                      className={`piece ${this.colorConv(square.color)} ${square.type}`}\n                      draggable='true'\n                      data-position={squares_ids[i]}\n                      onDragStart={this.dragStartHandler}\n                      onDragEnd={this.dragEndHandler}\n                      onClick={this.handlePieceClick}\n                    />  \n                </div>\n                : \n                <div \n                  // data-square={SQUARES[squares_ids[i]]}\n                  data-position={squares_ids[i]}\n                  id={squares_ids[i]}\n                  data-count={i}\n                  onDragOver={this.dragOverHandler} \n                  onTouchStart={this.touchStartHandler}\n                  onDragLeave={this.dragLeaveHandler} \n                  onClick={this.handleClick} \n                  onDrop={this.dropHandler} \n                  key={squares_ids[i]} \n                  className='square'> \n                    <div className='square-bg'>\n                      <div className='control-dark' /> \n                      <div className='control-light' />\n                    </div> \n                </div>         \n            })\n          }\n          </div>\n\n          {this.state.promotion.from ? \n            <PromotionPrompt \n              onClick={this.promotionHandler}\n              from={this.state.promotion.from}\n              to={this.state.promotion.to}\n              color={this.state.promotion.color}\n\n              />\n              : ''\n          }\n\n          <aside>\n            <Moves \n              onClick={this.moveClick} \n              selected_move={this.state.selected_move}\n              moves={this.state.history}\n              colorToMove={colorToMove}\n              result={this.state.result}\n              whiteplayer={this.state.whiteplayer}\n              blackplayer={this.state.blackplayer}\n              />\n\n              <div className=\"cards\">\n                { players && \n                    <div className=\"players\"> \n                      <div className=\"whiteplayer\">{players.whiteplayer ? players.whiteplayer : 'Anonymous'}</div> \n                      {/*<div className=\"separator\"> – </div>*/}\n                      <div className=\"blackplayer\">{players.blackplayer ? players.blackplayer : 'Anonymous'}</div>\n                    </div>\n                }\n\n                { this.state.result && \n                    <div className=\"result\"> {this.state.result} </div> \n                } \n              </div>\n              \n              <div className=\"button_container\">\n                  <ImageButton \n                    button='pgn_button' \n                    altText='Enter PGN'\n                    onClick={this.pgnClick}\n                  />\n                  <ImageButton \n                    button='play_button' \n                    altText='Turn Autoplay on'\n                    state={this.toggleConvert(this.state.autoplay)}\n                    onClick={this.handleAutoplayClick}  \n                    />\n                  <ToggleTextButton \n                    text={['Hide Pieces', 'Show Pieces']} \n                    initialText={0}\n                    onClick={this.handleHideClick} />\n                  <ToggleTextButton \n                    text={['Hide Board Control', 'Show Board Control']} \n                    initialText={0}\n                    onClick={this.handleControlClick} />\n              </div>\n\n              \n\n              {<footer> \n                <p>created using (a modified) <a alt=\"Chess.JS Github\" href=\"https://github.com/jhlywa/chess.js/blob/master/README.md\">chess.js</a></p>\n                <p>piece design from <a href=\"lichess.org\" alt=\"Lichess\">lichess.org</a></p>\n                <p>contact: <a href = \"mailto: quirschnei@gmail.com\">quirschnei@gmail.com</a></p>\n              </footer>}\n           \n          </aside>\n         \n          \n        </div>\n\n        {this.state.popUp ?  \n          <PopUp\n             props={this.state.popUp}\n          />  \n          : ''}\n\n      </div> \n    );\n  } \n  \n  componentDidMount(){\n    document.addEventListener(\"keydown\", this.keyDownHandler);\n    // document.addEventListener('click')\n    if(this.state.show_control) this.showBoardControl();\n  }\n\n\n  /**\n   * If show/hide pieces or show/hide Board control are triggered, no need to re-render (changes are done through DOM / CSS) \n   **/\n  shouldComponentUpdate(nextProps, nextState){\n    if(this.state.show_pieces!==nextState.show_pieces) return false;\n    if(this.state.show_control!==nextState.show_control){\n      this.showBoardControl(nextState.show_control);\n      return false; \n    }\n    return true;\n  }\n\n  /**\n   * Highlights last move and calls showBoardControl after render \n   **/\n  componentDidUpdate() {\n    if(this.state.selected_move>0){ // For highlighting the last move\n      this.removeClassFromAll('highlighted');\n      try{\n        this.highlightSquare(this.state.history[this.state.selected_move-1].to);\n      }catch(err){\n        console.log('Error highlighting move!');\n        console.log('this.state.selected_move: ', this.state.selected_move);\n        console.log('History entry', this.state.history[this.state.selected_move-1]);\n        console.error('Error:', err);\n      }\n    }\n    if(this.state.show_control) this.showBoardControl();\n  }\n\n  /*\n  ----------------------------------------------------------------------------------------------------------------------------------\n  ---------------------------------------------------- EVENT HANLDERS --------------------------------------------------------------\n  ----------------------------------------------------------------------------------------------------------------------------------\n  */\n  \n  keyDownHandler = (e)=>{\n    switch(e.keyCode){\n      case 39: // Right arrow \n        e.preventDefault();\n        if(this.state.selected_move+1<=this.state.fen_history.length-1){ \n          this.setState(prevState=>({selected_move: prevState.selected_move+1}));                \n        }\n        break;\n      case 37: // Left arrow \n        e.preventDefault();\n        if(this.state.selected_move>=1){\n          this.setState(prevState=>({selected_move: prevState.selected_move-1}));\n        }\n        break;\n      case 27: // esc \n        e.preventDefault(); \n        if(this.state.popUp){\n          this.setState({popUp: false});\n        } else if(this.state.promotion){\n          this.closePromotionPrompt();\n        }\n        break;\n      case 78: // n - makes one random move \n        e.preventDefault(); \n        this.makeRandomMove();\n        break; \n      case 77: // m - makes 25 random moves \n        e.preventDefault(); \n        for(let i=0;i<25;i++){\n          this.makeRandomMove(); \n        }\n        break;\n        case 75: // k \n          e.preventDefault(); \n\n        break;\n      default: break; \n    }\n  }\n\n  touchStartHandler = (e) => {\n    console.log('touchStartHandler');\n  }\n\n  dragStartHandler = (e) => { // e: dragEvent\n    console.log('dragStart');\n    let square = e.target.dataset.position;\n    e.dataTransfer.effectAllowed = \"all\"\n    e.dataTransfer.dropEffect = \"move\";\n    e.dataTransfer.setData(\"text/plain\", square);\n    requestAnimationFrame(function () {\n      e.target.classList.add('hide');\n    });\n    this.highlightMoves(square);   \n  }\n\n  dragEndHandler = (e) =>{\n    e.preventDefault();\n    requestAnimationFrame(function () {\n      e.target.classList.remove('hide');\n    }); \n  }\n\n  dropHandler = (e) => {\n    e.preventDefault();\n    let target = e.target.dataset.position;\n     requestAnimationFrame(function () {\n      e.target.classList.remove('dragover');\n    });\n    this.removeClassesFromAll('dragover', 'moveable'); \n    let origin = e.dataTransfer.getData('text/plain');\n    if(this.newMove(origin, target)){\n      this.removeClassesFromAll('moveable', 'active');\n    }\n  }\n\n  dragOverHandler = (e) => {\n    e.preventDefault(e);\n    requestAnimationFrame(function () {\n      e.target.classList.add('dragover');\n    });\n  }\n  \n  dragLeaveHandler = (e) => {\n    e.preventDefault(); \n    requestAnimationFrame(function () {\n      e.target.classList.remove('dragover');\n    }); \n  }\n\n  handleControlClick = () => {  \n    this.setState(prevState=> ({show_control: !prevState.show_control}));  \n  }\n\n  getRandomIntInclusive(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1) + min); //The maximum is inclusive and the minimum is inclusive\n  }\n\n  handleHideClick = () => {\n    if(this.state.show_pieces){\n      document.getElementById('chessboard').classList.add('hidepieces');\n      this.setState({show_pieces: false});\n    }else{\n      document.getElementById('chessboard').classList.remove('hidepieces');\n      this.setState({show_pieces: true});\n    }\n    \n    // console.log(chess.boardFull());\n  }\n\n  serverClickStudy = () => {\n    // this.loadPGNfromServer('https://lichess.org/study/WtwmeX4m/FzpbQLUx', {\n    //   credentials: 'same-origin',\n    //   Access-Control-Allow-Credentials\n    //   mode: 'same-origin'\n    // });\n    fetch('http://localhost:3001/game?all=true')\n      .then(res => res.json())\n      .then(res => {\n        let closePopup = this.closePopup;\n        // console.log(res);\n        \n        this.setState({popUp: {\n            content: <GamesList games={res} closePopup={closePopup} />, \n            closePopup}\n        });\n      });\n  }\n\n  serverClick = () => {\n    this.setState({popUp: {text: 'Enter URL', textarea_class: 'url', closePopup: this.closeAndLoad}});\n  }\n\n  pgnClick = () =>{\n    this.setState({popUp: {content: <PGNDialog closePopup={this.closePopup} />, closePopup: this.closePopup}});\n  }\n\n  handleFENClick = () => {\n    this.setState({popUp: {text: 'Enter FEN', textarea_class: 'pgn', closePopup: this.closePopupFEN}});\n  }\n\n  moveClick = (number) => {\n    if(number===999) number=this.state.history.length; // Last move \n    else if(number>this.state.history.length || number<0) return;  \n    this.setState({selected_move:number});\n  }\n\n  /**\n   * Calls the recursive autoplay function or updates state to stop autoplay-execution \n   **/\n  handleAutoplayClick = () => {\n    if(!this.state.autoplay){ \n      this.setState(state => ({\n        autoplay: !state.autoplay \n      }), ()=>this.autoplay(this.state.selected_move, this.state.history.length));\n    }else{\n      this.setState(state => ({\n        autoplay: !state.autoplay \n      }));\n    }\n    \n  }\n\n  /**\n   * Click-Listener for squares, calls newMove function \n   **/\n  handleClick = (e) => {\n    if(this.state.promotion.from){\n      this.closePromotionPrompt(); \n      return;\n    }\n\n    let square = e.target.dataset.position;\n    let clicked = this.state.piece_clicked; \n\n    if(clicked){\n      if(this.newMove(clicked, square)){\n        this.removeClassesFromAll('moveable', 'active');\n        this.setState({piece_clicked: false});\n      }else{\n        console.log('Error in handleClick');\n      }\n    }\n  }\n\n  /**\n   * Click-Listener for pieces\n   **/\n  handlePieceClick = (e) => {\n    if(this.state.promotion.from){\n      this.closePromotionPrompt(); \n      return;\n    }\n\n\n    let square = e.target.dataset.position;\n    let clicked = this.state.piece_clicked;\n    if(square===clicked){\n      this.removeClassesFromAll('active', 'moveable');\n      this.setState({piece_clicked: null});\n      return; \n    }\n    if(!clicked){\n      if(this.pieceIsTurnColor(square)){\n        document.getElementById(square).classList.add('active');\n        this.highlightMoves(square);\n        this.setState({piece_clicked: square});\n      }\n    }else{\n      this.removeClassesFromAll('active', 'moveable');\n      if(this.squaresOfSameColor(square, clicked)){ // If another piece of the same color is clicked, switch to that piece being active  \n          document.getElementById(square).classList.add('active');\n          this.highlightMoves(square);\n          this.setState({piece_clicked: square});\n      }else{ // Capture \n        if(this.newMove(clicked, square)){\n          this.setState({piece_clicked: null});\n        }\n      }\n    }\n  }\n\n  closeAndLoad = (url) => {\n    this.setState({popUp: false});\n    if(url){\n      this.loadPGNfromServer('https://lichess.org/game/export/'+url);\n    };\n  }\n\n  closePopup = (text) => {\n    this.setState({popUp: false});\n    if(text) this.loadPGN(text);\n  }\n\n  closePopupFEN = (text) => {\n    if(text) this.loadFEN(text);\n    this.setState({popUp: false});\n  }\n\n  /**\n   * Called by the PromotionPromt-component, passes clicked option to newMove function and \n   **/\n  promotionHandler = (piece, from, to) => {\n    this.setState({promotion: {from: null, to:null, color:null}});\n    this.newMove(from, to, piece);\n  }\n\n  /*\n  ----------------------------------------------------------------------------------------------------------------------------------\n  ----------------------------------------------------        UTILITY        -------------------------------------------------------\n  ----------------------------------------------------------------------------------------------------------------------------------\n  */\n\n  /**\n   * Recursive method, goes through all played moves, as long as uninterrupted by state \n   **/\n  autoplay(point, end){\n    ++point;\n    if(point>=end || !this.state.autoplay){\n      this.setState({autoplay:false});\n      return false;\n    } \n    this.setState({selected_move: point});\n    setTimeout(() => this.autoplay(point, end), AUTOPLAY_SPEED);\n  }\n\n  toggleConvert = (toggle) => toggle ? 'on' : 'off';  \n\n  loadPGNfromServer(url){\n    fetch(url)\n      .then(res => res.text())\n      .then(res => this.loadPGN(res));\n  }\n\n  /**\n   * Loads a proveded PGN (format to save chess-games)\n   * Passes it to chess.js and extracts titles and names of players and game result (if available) to display\n   * Loads moves into state (history and fen_history), as chess.js does not have an option to browse through \n   * the move history \n   * Afterwards, chess.js is reset to the starting position \n   **/\n  loadPGN(pgn){\n    let load_result = chess.load_pgn(pgn);\n    let headers = chess.header(); \n    let players = {};\n\n    if(headers.Black){\n      let content = headers.BlackTitle ? `[${headers.BlackTitle}] ${headers.Black}` : headers.Black; \n      players.whiteplayer = content; \n    }if(headers.White){\n      let content = headers.WhiteTitle ? `[${headers.WhiteTitle}] ${headers.White}` : headers.White; \n      players.blackplayer = content;   \n    }\n\n    let result = headers.Result ? 'Result: ' + headers.Result : '';\n    if(headers.Termination) result += ` (${headers.Termination})`; \n    \n    if(load_result){\n      let history = chess.history({verbose:true});\n      let new_history = {}; \n      chess.reset();\n      let fen_history = [chess.fen()];\n      history.forEach((e, i)=>{\n        chess.move(e);\n        fen_history.push(chess.fen());\n        new_history[i] = {from: e.from, to:e.to, san:e.san};\n      });\n      chess.load(fen_history[0]);\n      this.setState({history: new_history, fen_history, loaded_game: pgn, selected_move: 0, result, players});\n\n    }else console.log(load_result);\n  }\n\n  loadFEN(fen){\n    let load_result = chess.load(fen);\n    let fen_history = [chess.fen()];\n    let history = {}; \n    this.setState({fen_history, history, selected_move: 0});\n  }\n\n  // If square is of format piece-square, remove piece (e.g. ba8 => a8) \n  cleanUpSquare = (square) => square.length>2 ? square.slice(1) : square;\n\n  getOtherChessColor = () => chess.turn() === chess.WHITE ? chess.BLACK : chess.WHITE;\n  \n  // removeEnPassantFromFen = (fen) => {\n  //    var tokens = fen.split(/\\s+/);\n  //    tokens[3] = '-';\n  //    return tokens.join(' ');\n  // }\n\n  getRatio(w, b){\n    if(w===0&&b===0) return 0;  \n    let sum = w + b; \n    let whiteshare = w/sum*100; \n    return whiteshare; \n  }\n\n  getWeightedRatio(w, b){\n    if(w===0) return 0; \n    if(b===0) return 100;\n    let sum = w + b; \n    let whiteshare = 100-w/sum*100; \n    return whiteshare; \n  }\n\n  getColorToMoveByMoveNumber = (number) => number%2===0 ? 1 : -1; \n\n  squareColorConv = color => {\n    if(color==='light') return 'w'; \n    else if(color==='dark') return 'b';\n    return false; \n  }\n\n  colorConv = color => color==='w' ? 'white' : 'black';\n\n  squaresOfSameColor = (one, two) => chess.get(one).color===chess.get(two).color;\n\n  pieceIsTurnColor = (piece) => chess.get(piece).color === chess.turn();\n\n  isOnFirstOrLastRank(square){ return (square>=0&&square<=7)||(square>=56&&square<=63); }\n\n  getRowFromSquare(square){ return Number(square.charAt(1)); }\n\n  isOnPromotionSquare(square, color){\n    return color==='w' ? this.getRowFromSquare(square)==8 : this.getRowFromSquare(square)==1; \n  }\n\n  /**\n   * return 1 ... left Edge, \n   * 2 ... right edge \n   * 0 ... not on edge\n  **/\n  isOnEdge(square){\n    if(Number(square)%8===0) return 1; \n    if(Number(square)%7===0) return 2; \n    return 0; \n  }\n\n  /*\n  ----------------------------------------------------------------------------------------------------------------------------------\n  ----------------------------------------------------     CHESS STUFF    ----------------------------------------------------------\n  ----------------------------------------------------------------------------------------------------------------------------------\n  */\n\n\n  openPromotionPrompt(from, to, color){ this.setState({promotion: {from, to, color}}); }\n\n  closePromotionPrompt = () => { this.setState({promotion: {from: null, to:null, color:null}, piece_clicked: false}); }\n\n\n  makeRandomMove(){\n    let possible_moves = chess.moves({verbose:true});\n    let move = possible_moves[this.getRandomInt(possible_moves.length)]; \n    this.newMove(move.from, move.to)\n  }\n\n  getRandomInt(max) {\n    return Math.floor(Math.random() * max);\n  }\n\n\n  /**\n   * Method for handling new moves. Updates history (overrides if necessary) \n   * Checks for promotion (if a pawn reaches a respective square)\n   * otherwise passes move to chess.js and updates state \n   **/\n  newMove(from, to, promoteTo = false){\n    let fen_history = [...this.state.fen_history]; \n    let history = Object.assign({}, this.state.history);\n    let options = {from, to}; \n\n    if(this.state.selected_move<this.state.fen_history.length){ // Override if a previous move was selected\n      fen_history = fen_history.slice(0, this.state.selected_move+1);\n      let new_history = {}; \n      for(let [key, value] of Object.entries(history)){\n        if(key>=this.state.selected_move) break; \n        new_history[key] = value; \n      }\n        history = Object.assign({}, new_history);\n    }\n\n    if(promoteTo) options.promotion = promoteTo;\n    else{\n      if(this.isOnPromotionSquare(to, chess.turn()) && chess.get(from).type === 'p'){\n        if(this.state.promotion.from===null){ \n          this.openPromotionPrompt(from, to, this.colorConv(chess.turn()));\n          return;\n        }else{\n          options.promotion = promoteTo;\n        } \n      }\n    }\n\n    let res = chess.move(options);\n    \n    if(res){\n      fen_history.push(chess.fen());\n      history[this.state.selected_move] = {from: options.from, to: options.to, san: res.san};\n      if(chess.result()){ // If game over (for any reason)  \n        this.setState(prevState => (\n          {selected_move: prevState.selected_move+1, history, fen_history, result: chess.result()}\n        ));\n        return; \n      }\n      this.setState(prevState => (\n        {selected_move: prevState.selected_move+1, history, fen_history}\n      ));\n      return res.san; \n    }else{\n      console.log('Error making new move: '+res);\n      return false; \n    } \n  }\n\n  // switchColor = () => this.state.colorToMove === 1 ? -1 : 1;\n\n  /*\n  ----------------------------------------------------------------------------------------------------------------------------------\n  ----------------------------------------------------         DOM            ------------------------------------------------------\n  ----------------------------------------------------------------------------------------------------------------------------------\n  */\n\n\n  highlightMoves(piece){\n    chess.moves({square:piece, verbose:true}).forEach(move=>{\n      document.getElementById(move.to).classList.add('moveable');\n    });\n  }\n\n  highlightSquare(square){\n    document.getElementById(square).classList.add('highlighted');\n  }\n\n  removeClassFromAll = remove => {\n    document.querySelectorAll('.'+remove).forEach(el=>el.classList.remove(remove));\n  }\n\n  removeClassesFromAll = (...classes) => {\n    classes.forEach(e => document.querySelectorAll('.'+e).forEach(el=>el.classList.remove(e)));\n  }\n\n  hideBoardControl = () => {\n     this.removeClassFromAll('attacked');\n  }\n\n  /**\n   * Shows which squares are controlled how much by which color\n   * First removes all \n   * If a king is currently in check, only available moves (including blocks) are highlighted\n   * Otherwise calls the defended_pieces_all funtion from chess.js, which returns the number of attackers \n   * and defenders for each square. \n   * The ratio for each square is calculated and displayed by updating the respective variable in CSS for\n   * each square.  \n   **/\n  showBoardControl = (control_flag=undefined) => { \n    let show_control = (control_flag===undefined) ? this.state.show_control : control_flag;\n    this.removeClassesFromAll('attacked', 'kingcheck');\n    if(chess.in_check()){\n      let square = document.getElementById(chess.get_king());\n      square.classList.add('kingcheck');\n\n      if(!show_control) return; \n      chess.moves({verbose:true}).forEach(move=>{\n        let dom = document.getElementById(move.to);\n        dom.classList.add('attacked');\n        dom.style.setProperty(CONTROL_CLASS, '100%');\n      });\n      return;\n\n    }\n    if(!show_control) return; \n    let control = chess.defended_pieces_all(true, true, false);\n\n    for(let [square, value] of Object.entries(control)){\n      if(value.w>0||value.b>0){ \n        let dom = document.getElementById(square);\n        dom.classList.add('attacked');\n        let ratio = this.getRatio(value.w,value.b);\n        dom.style.setProperty(CONTROL_CLASS, ratio+'%');\n      }\n    } \n  }  \n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}