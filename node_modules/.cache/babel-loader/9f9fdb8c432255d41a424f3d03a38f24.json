{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports[\"default\"] = exports.GameValidation = void 0;\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/promise\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/createClass\"));\n\nvar _boardValidation = require(\"./boardValidation\");\n\nvar _piece = require(\"./piece\");\n/**\n\tGameValidation is the 3rd phase of validation for the game\n\tand is intended to support Game level events. Examples of Game\n\tscope validation include Check, Checkmate, 3-fold position\n\trepetition and pawn promotion.\n*/\n\n\nvar GameValidation = /*#__PURE__*/function () {\n  function GameValidation(game) {\n    (0, _classCallCheck2[\"default\"])(this, GameValidation);\n    this.game = game;\n  }\n\n  (0, _createClass2[\"default\"])(GameValidation, [{\n    key: \"findKingSquare\",\n    value: function findKingSquare(side) {\n      var i = 0,\n          squares = this.game.board.getSquares(side);\n\n      for (i = 0; i < squares.length; i++) {\n        if (squares[i].piece.type === _piece.PieceType.King) {\n          return squares[i];\n        }\n      }\n    }\n  }, {\n    key: \"isRepetition\",\n    value: function isRepetition() {\n      var hash = '',\n          hashCount = [],\n          i = 0; // analyze 3-fold repetition (draw)\n\n      for (i = 0; i < this.game.moveHistory.length; i++) {\n        hash = this.game.moveHistory[i].hashCode;\n        hashCount[hash] = hashCount[hash] ? hashCount[hash] + 1 : 1;\n        /* eslint no-magic-numbers: 0 */\n\n        if (hashCount[hash] === 3) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"start\",\n    value: function start(callback) {\n      // ensure callback is set\n      callback = callback || function (err, result) {\n        return new _promise[\"default\"](function (resolve, reject) {\n          if (err) {\n            return reject(err);\n          }\n\n          return resolve(result);\n        });\n      };\n\n      var kingSquare = null,\n          result = {\n        isCheck: false,\n        isCheckmate: false,\n        isFiftyMoveDraw: false,\n        isRepetition: false,\n        isStalemate: false,\n        validMoves: []\n      },\n          setResult = function setResult(v, result, isKingAttacked) {\n        return function (err, validMoves) {\n          if (err) {\n            return callback(err);\n          }\n\n          result.isCheck = isKingAttacked && validMoves.length > 0;\n          result.isCheckmate = isKingAttacked && validMoves.length === 0;\n          result.isStalemate = !isKingAttacked && validMoves.length === 0;\n          result.isRepetition = v.isRepetition();\n          result.validMoves = validMoves;\n          return callback(null, result);\n        };\n      },\n          v = _boardValidation.BoardValidation.create(this.game);\n\n      if (this.game) {\n        // find current side king square\n        kingSquare = this.findKingSquare(this.game.getCurrentSide()); // find valid moves\n\n        return v.start(setResult(this, result, v.isSquareAttacked(kingSquare)));\n      } else {\n        return callback(new Error('game is invalid'));\n      }\n    }\n  }], [{\n    key: \"create\",\n    value: function create(game) {\n      return new GameValidation(game);\n    }\n  }]);\n  return GameValidation;\n}();\n\nexports.GameValidation = GameValidation;\nvar _default = {\n  GameValidation: GameValidation\n};\nexports[\"default\"] = _default;","map":{"version":3,"sources":["gameValidation.js"],"names":["GameValidation","game","side","i","squares","PieceType","hash","hashCount","callback","reject","resolve","kingSquare","result","isCheck","isCheckmate","isFiftyMoveDraw","isRepetition","isStalemate","validMoves","setResult","isKingAttacked","v","BoardValidation"],"mappings":"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","sourcesContent":["/**\n\tGameValidation is the 3rd phase of validation for the game\n\tand is intended to support Game level events. Examples of Game\n\tscope validation include Check, Checkmate, 3-fold position\n\trepetition and pawn promotion.\n*/\nimport { BoardValidation } from './boardValidation';\nimport { PieceType } from './piece';\n\nexport class GameValidation {\n\tconstructor (game) {\n\t\tthis.game = game;\n\t}\n\n\tstatic create (game) {\n\t\treturn new GameValidation(game);\n\t}\n\n\tfindKingSquare (side) {\n\t\tlet\n\t\t\ti = 0,\n\t\t\tsquares = this.game.board.getSquares(side);\n\n\t\tfor (i = 0; i < squares.length; i++) {\n\t\t\tif (squares[i].piece.type === PieceType.King) {\n\t\t\t\treturn squares[i];\n\t\t\t}\n\t\t}\n\t}\n\n\tisRepetition () {\n\t\tlet\n\t\t\thash = '',\n\t\t\thashCount = [],\n\t\t\ti = 0;\n\n\t\t// analyze 3-fold repetition (draw)\n\t\tfor (i = 0; i < this.game.moveHistory.length; i++) {\n\t\t\thash = this.game.moveHistory[i].hashCode;\n\t\t\thashCount[hash] = hashCount[hash] ? hashCount[hash] + 1 : 1;\n\n\t\t\t/* eslint no-magic-numbers: 0 */\n\t\t\tif (hashCount[hash] === 3) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tstart (callback) {\n\t\t// ensure callback is set\n\t\tcallback = callback || ((err, result) => new Promise((resolve, reject) => {\n\t\t\tif (err) {\n\t\t\t\treturn reject(err);\n\t\t\t}\n\n\t\t\treturn resolve(result);\n\t\t}));\n\n\t\tlet\n\t\t\tkingSquare = null,\n\t\t\tresult = {\n\t\t\t\tisCheck : false,\n\t\t\t\tisCheckmate : false,\n\t\t\t\tisFiftyMoveDraw : false,\n\t\t\t\tisRepetition : false,\n\t\t\t\tisStalemate : false,\n\t\t\t\tvalidMoves : []\n\t\t\t},\n\t\t\tsetResult = (v, result, isKingAttacked) => {\n\t\t\t\treturn (err, validMoves) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treturn callback(err);\n\t\t\t\t\t}\n\n\t\t\t\t\tresult.isCheck = isKingAttacked && validMoves.length > 0;\n\t\t\t\t\tresult.isCheckmate = isKingAttacked && validMoves.length === 0;\n\t\t\t\t\tresult.isStalemate = !isKingAttacked && validMoves.length === 0;\n\t\t\t\t\tresult.isRepetition = v.isRepetition();\n\t\t\t\t\tresult.validMoves = validMoves;\n\n\t\t\t\t\treturn callback(null, result);\n\t\t\t\t};\n\t\t\t},\n\t\t\tv = BoardValidation.create(this.game);\n\n\t\tif (this.game) {\n\t\t\t// find current side king square\n\t\t\tkingSquare = this.findKingSquare(this.game.getCurrentSide());\n\n\t\t\t// find valid moves\n\t\t\treturn v.start(setResult(this, result, v.isSquareAttacked(kingSquare)));\n\t\t} else {\n\t\t\treturn callback(new Error('game is invalid'));\n\t\t}\n\t}\n}\n\nexport default { GameValidation };\n"]},"metadata":{},"sourceType":"script"}