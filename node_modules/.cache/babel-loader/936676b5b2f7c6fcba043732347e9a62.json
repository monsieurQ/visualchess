{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/q/Documents/WebDocuments/chess/front/src/App.js\";\nimport './App.css';\nimport React, { Component } from 'react';\nimport Moves from './components/Moves/Moves'; // import Square from './components/Square/Square'\n\nimport PopUp from './components/PopUp/PopUp';\nimport Button from './components/Button/Button';\nimport ToggleTextButton from './components/ToggleTextButton/ToggleTextButton';\nimport ImageButton from './components/ImageButton/ImageButton';\nimport PGNDialog from './components/PGNDialog/PGNDialog';\nimport GamesList from './components/GamesList/GamesList';\nimport PromotionPrompt from './components/PromotionPrompt/PromotionPrompt'; // import Squares from './components/Squares/Squares';\n\nimport Draggable from 'react-draggable';\nimport * as ChessJS from 'chess.js';\nconst Chess = typeof ChessJS === \"function\" ? ChessJS : ChessJS.Chess;\nconst chess = new Chess();\nconst CASTLING = ['0', 'O'];\nconst squareID = [\"a8\", \"b8\", \"c8\", \"d8\", \"e8\", \"f8\", \"g8\", \"h8\", \"a7\", \"b7\", \"c7\", \"d7\", \"e7\", \"f7\", \"g7\", \"h7\", \"a6\", \"b6\", \"c6\", \"d6\", \"e6\", \"f6\", \"g6\", \"h6\", \"a5\", \"b5\", \"c5\", \"d5\", \"e5\", \"f5\", \"g5\", \"h5\", \"a4\", \"b4\", \"c4\", \"d4\", \"e4\", \"f4\", \"g4\", \"h4\", \"a3\", \"b3\", \"c3\", \"d3\", \"e3\", \"f3\", \"g3\", \"h3\", \"a2\", \"b2\", \"c2\", \"d2\", \"e2\", \"f2\", \"g2\", \"h2\", \"a1\", \"b1\", \"c1\", \"d1\", \"e1\", \"f1\", \"g1\", \"h1\"];\nconst SQUARES = {\n  a8: 0,\n  b8: 1,\n  c8: 2,\n  d8: 3,\n  e8: 4,\n  f8: 5,\n  g8: 6,\n  h8: 7,\n  a7: 16,\n  b7: 17,\n  c7: 18,\n  d7: 19,\n  e7: 20,\n  f7: 21,\n  g7: 22,\n  h7: 23,\n  a6: 32,\n  b6: 33,\n  c6: 34,\n  d6: 35,\n  e6: 36,\n  f6: 37,\n  g6: 38,\n  h6: 39,\n  a5: 48,\n  b5: 49,\n  c5: 50,\n  d5: 51,\n  e5: 52,\n  f5: 53,\n  g5: 54,\n  h5: 55,\n  a4: 64,\n  b4: 65,\n  c4: 66,\n  d4: 67,\n  e4: 68,\n  f4: 69,\n  g4: 70,\n  h4: 71,\n  a3: 80,\n  b3: 81,\n  c3: 82,\n  d3: 83,\n  e3: 84,\n  f3: 85,\n  g3: 86,\n  h3: 87,\n  a2: 96,\n  b2: 97,\n  c2: 98,\n  d2: 99,\n  e2: 100,\n  f2: 101,\n  g2: 102,\n  h2: 103,\n  a1: 112,\n  b1: 113,\n  c1: 114,\n  d1: 115,\n  e1: 116,\n  f1: 117,\n  g1: 118,\n  h1: 119\n};\n/*\nrnbqkbnr/pp2p1Pp/2p5/8/8/8/PPpP1PPP/RNBQKBNR w KQkq - 0 1\n  => PROMOTION TEST white\n\nrnbqkbnr/pp2p1Pp/2p5/8/8/8/PPpP1PPP/RNBQKBNR b KQkq - 0 1\n  => PROMOTION TEST black\n\n\n7 move game  -> R0Nz054g \n36 move game -> u2qos9uM \n60 move game -> 0amFRLRg \n\n\n\nBUG!!!!!! \n\nPromotion wenn man einfach irgendein piece aktiveret (klickt), und dann einen \"promotion square \" anklickt \n--> Ã¶ffnet promotion (muss zuerst ein legal move sein!)\n\n*/\n\nconst BOARD_ID = 'chessboard';\nconst AUTOPLAY_SPEED = 500;\nconst SQUARE_SIZE = 100;\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.handleEvalClick = () => {// let pgn = \"1. d4 d5 2. c4 c6 3. Nf3 Nf6 4. Nc3 e6 5. e3 Nbd7 6. Bd3 dxc4 7. Bxc4 b5 8. Bd3 Bd6 9. O-O O-O 10. Qc2 Bb7 11. a3 Rc8 12. Ng5 c5 13. Nxh7 Ng4 14. f4 cxd4 15. exd4 Bc5 16. Be2 Nde5 17. Bxg4 Bxd4+ 18. Kh1 Nxg4 19. Nxf8 f5 20. Ng6 Qf6 21. h3 Qxg6 22. Qe2 Qh5 23. Qd3 Be3 0-1\";\n      // this.loadPGN(pgn);\n      // if(chess.in_check()) console.log(chess.get_kings());\n    };\n\n    this.keyDownHandler = e => {\n      switch (e.keyCode) {\n        case 39:\n          // Right arrow \n          e.preventDefault();\n\n          if (this.state.selected_move + 1 <= this.state.fen_history.length - 1) {\n            // this.setState(prevState=>({selected_move: prevState.selected_move+1}), this.showBoardControl());  \n            this.setState(prevState => ({\n              selected_move: prevState.selected_move + 1\n            })); // this.removeClassFromAll('selected');\n            // document.getElementById('m'+this.state.selected_move+1).classList.add('selected');\n          }\n\n          break;\n\n        case 37:\n          // Left arrow \n          e.preventDefault();\n\n          if (this.state.selected_move >= 1) {\n            this.setState(prevState => ({\n              selected_move: prevState.selected_move - 1\n            })); // this.setState(prevState=>({selected_move: prevState.selected_move-1}), this.showBoardControl());\n            // this.removeClassFromAll('selected');\n            // document.getElementById('m'+this.state.selected_move-1).classList.add('selected');\n          }\n\n          break;\n\n        case 27:\n          // esc \n          e.preventDefault();\n\n          if (this.state.popUp) {\n            this.setState({\n              popUp: false\n            });\n          }\n\n          break;\n\n        case 78:\n          e.preventDefault();\n          this.makeRandomMove();\n          break;\n\n        case 77:\n          e.preventDefault();\n\n          for (let i = 0; i < 25; i++) {\n            this.makeRandomMove();\n          }\n\n          break;\n\n        case 75:\n          e.preventDefault();\n          console.log(document.getElementById('moves_table').scrollTop);\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.dragStartHandler = e => {\n      // e: dragEvent, i: original square of dragged piece\n      let square = e.target.dataset.position;\n      e.dataTransfer.effectAllowed = \"all\";\n      e.dataTransfer.dropEffect = \"move\";\n      e.dataTransfer.setData(\"text/plain\", square);\n      requestAnimationFrame(function () {\n        e.target.classList.add('hide');\n      });\n      this.highlightMoves(square);\n    };\n\n    this.dragEndHandler = e => {\n      e.preventDefault();\n      requestAnimationFrame(function () {\n        e.target.classList.remove('hide');\n      });\n    };\n\n    this.dropHandler = e => {\n      e.preventDefault();\n      let target = e.target.dataset.position;\n      requestAnimationFrame(function () {\n        e.target.classList.remove('dragover');\n      });\n      this.removeClassesFromAll('dragover', 'moveable');\n      let origin = e.dataTransfer.getData('text/plain');\n\n      if (this.newMove(origin, target)) {\n        this.removeClassesFromAll('moveable', 'active');\n      }\n    };\n\n    this.dragOverHandler = e => {\n      e.preventDefault(e);\n      requestAnimationFrame(function () {\n        e.target.classList.add('dragover');\n      });\n    };\n\n    this.dragLeaveHandler = e => {\n      e.preventDefault();\n      requestAnimationFrame(function () {\n        e.target.classList.remove('dragover');\n      });\n    };\n\n    this.handleControlClick = () => {\n      this.setState(prevState => ({\n        showControl: !prevState.showControl\n      }));\n    };\n\n    this.handleGamesClick = () => {\n      fetch('http://localhost:3000/test', {\n        method: 'GET'\n      }).then(res => res.text()).then(res => {\n        this.loadGames(res, '###');\n      });\n    };\n\n    this.handleFlipClick = () => {\n      // this.setState({flipped: true});\n      let gumbodumbo = document.documentElement;\n      let p = this.getRandomIntInclusive(0, 100);\n      gumbodumbo.style.setProperty('--trial-bottom', p + '%');\n      gumbodumbo.style.setProperty('--trial-top', 100 - p + '%');\n    };\n\n    this.handleHideClick = () => {\n      if (this.state.showPieces) {\n        document.getElementById('chessboard').classList.add('hidepieces');\n        this.setState({\n          showPieces: false\n        });\n      } else {\n        document.getElementById('chessboard').classList.remove('hidepieces');\n        this.setState({\n          showPieces: true\n        });\n      } // console.log(chess.boardFull());\n\n    };\n\n    this.serverClickStudy = () => {\n      // this.loadPGNfromServer('https://lichess.org/study/WtwmeX4m/FzpbQLUx', {\n      //   credentials: 'same-origin',\n      //   Access-Control-Allow-Credentials\n      //   mode: 'same-origin'\n      // });\n      fetch('http://localhost:3001/game?all=true').then(res => res.json()).then(res => {\n        let closePopup = this.closePopup; // console.log(res);\n\n        this.setState({\n          popUp: {\n            content: /*#__PURE__*/_jsxDEV(GamesList, {\n              games: res,\n              closePopup: closePopup\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 459,\n              columnNumber: 22\n            }, this),\n            closePopup\n          }\n        });\n      });\n    };\n\n    this.serverClick = () => {\n      this.setState({\n        popUp: {\n          text: 'Enter URL',\n          textarea_class: 'url',\n          closePopup: this.closeAndLoad\n        }\n      });\n    };\n\n    this.pgnClick = () => {\n      this.setState({\n        popUp: {\n          content: /*#__PURE__*/_jsxDEV(PGNDialog, {\n            closePopup: this.closePopup\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 470,\n            columnNumber: 37\n          }, this),\n          closePopup: this.closePopup\n        }\n      });\n    };\n\n    this.handleFENClick = () => {\n      this.setState({\n        popUp: {\n          text: 'Enter FEN',\n          textarea_class: 'pgn',\n          closePopup: this.closePopupFEN\n        }\n      });\n    };\n\n    this.moveClick = number => {\n      // this.setState({colorToMove: chess.turn(), selected_move:number+1}, this.showBoardControl());\n      if (number == 999) number = this.state.history.length;else {\n        if (number > this.state.history.length || number < 0) return;\n      }\n      this.setState({\n        selected_move: number\n      });\n    };\n\n    this.handleAutoplayClick = () => {\n      if (!this.state.autoplay) {\n        this.setState(state => ({\n          autoplay: !state.autoplay\n        }), () => this.autoplay(this.state.selected_move, this.state.history.length));\n      } else {\n        this.setState(state => ({\n          autoplay: !state.autoplay\n        }));\n      }\n    };\n\n    this.handleClick = e => {\n      let square = e.target.dataset.position;\n      let clicked = this.state.piece_clicked;\n\n      if (clicked) {\n        if (this.newMove(clicked, square)) {\n          this.removeClassesFromAll('moveable', 'active');\n          this.setState({\n            piece_clicked: false\n          }); // this.showBoardControl();\n        } else {\n          console.log('Error in handleClick'); // this.removeClassFromAll('active'); \n          // this.setState({piece_clicked: false })\n        }\n      }\n    };\n\n    this.handlePieceClick = e => {\n      let square = e.target.dataset.position;\n      let clicked = this.state.piece_clicked;\n\n      if (square == clicked) {\n        this.removeClassesFromAll('active', 'moveable');\n        this.setState({\n          piece_clicked: null\n        });\n        return;\n      }\n\n      if (!clicked) {\n        if (this.pieceIsTurnColor(square)) {\n          document.getElementById(square).classList.add('active');\n          this.highlightMoves(square);\n          this.setState({\n            piece_clicked: square\n          });\n        }\n      } else {\n        this.removeClassesFromAll('active', 'moveable');\n\n        if (this.squaresOfSameColor(square, clicked)) {\n          // Wenn selbfarbiges, anderes piece gedrÃ¼ckt \n          document.getElementById(square).classList.add('active');\n          this.highlightMoves(square);\n          this.setState({\n            piece_clicked: square\n          });\n        } else {\n          // Capture \n          if (this.newMove(clicked, square)) {\n            this.setState({\n              piece_clicked: null\n            }); // this.showBoardControl();\n          }\n        }\n      }\n    };\n\n    this.closeAndLoad = url => {\n      this.setState({\n        popUp: false\n      });\n\n      if (url) {\n        this.loadPGNfromServer('https://lichess.org/game/export/' + url);\n      }\n\n      ;\n    };\n\n    this.closePopup = text => {\n      this.setState({\n        popUp: false\n      });\n      if (text) this.loadPGN(text);\n    };\n\n    this.closePopupFEN = text => {\n      if (text) this.loadFEN(text);\n      this.setState({\n        popUp: false\n      });\n    };\n\n    this.promotionHandler = (piece, from, to) => {\n      this.setState({\n        promotion: {\n          from: null,\n          to: null,\n          color: null\n        }\n      });\n      this.newMove(from, to, piece);\n    };\n\n    this.toggleConvert = toggle => toggle ? 'on' : 'off';\n\n    this.cleanUpSquare = square => square.length > 2 ? square.slice(1) : square;\n\n    this.moveIsPawnMove = move => move.length === 3 && move.charAt(0).toLowerCase() === 'p';\n\n    this.getOtherChessColor = () => chess.turn() === chess.WHITE ? chess.BLACK : chess.WHITE;\n\n    this.getColorToMoveByMoveNumber = number => number % 2 === 0 ? 1 : -1;\n\n    this.squareColorConv = color => {\n      if (color === 'light') return 'w';else if (color === 'dark') return 'b';\n      return false;\n    };\n\n    this.colorConv = color => color === 'w' ? 'white' : 'black';\n\n    this.squaresOfSameColor = (one, two) => chess.get(one).color === chess.get(two).color;\n\n    this.pieceIsTurnColor = piece => chess.get(piece).color === chess.turn();\n\n    this.removeClassFromAll = remove => {\n      document.querySelectorAll('.' + remove).forEach(el => el.classList.remove(remove));\n    };\n\n    this.removeClassesFromAll = (...classes) => {\n      classes.forEach(e => document.querySelectorAll('.' + e).forEach(el => el.classList.remove(e)));\n    };\n\n    this.hideBoardControl = () => {\n      this.removeClassFromAll('attacked');\n    };\n\n    this.showBoardControl = (control_flag = undefined) => {\n      let showControl = control_flag === undefined ? this.state.showControl : control_flag;\n      this.removeClassesFromAll('attacked', 'kingcheck');\n\n      if (chess.in_check()) {\n        let square = document.getElementById(chess.get_king());\n        square.classList.add('kingcheck');\n        if (!showControl) return;\n        let controlClass = `--${chess.turn()}-control}`;\n        chess.moves({\n          verbose: true\n        }).forEach(move => {\n          let dom = document.getElementById(move.to);\n          dom.classList.add('attacked');\n          dom.style.setProperty(controlClass, '100%');\n        });\n        return;\n      }\n\n      if (!showControl) return;\n      let control = chess.defended_pieces_all(true, true, false);\n\n      for (let [square, value] of Object.entries(control)) {\n        if (value.w > 0 || value.b > 0) {\n          let dom = document.getElementById(square);\n          dom.classList.add('attacked');\n          if (this.state.weighted) dom.style.setProperty('--separator', this.getWeightedRatio(value.w, value.b) + '%'); // else dom.style.setProperty('--separator', this.getRatio(value.w,value.b)+'%');\n          // let ratio = this.getWeightedRatio(value.w,value.b);\n\n          let ratio = this.getRatio(value.w, value.b);\n          dom.style.setProperty('--w-control', ratio + '%');\n          dom.style.setProperty('--b-control', 100 - ratio + '%'); // dom.style.setProperty('--trial-top', 100-ratio+'%');\n        }\n      }\n    };\n\n    this.moveIsPawnMove = this.moveIsPawnMove.bind(this);\n    this.state = {\n      selected_move: 0,\n      piece_clicked: false,\n      // board: chess.board().flat(),\n      history: [],\n      // single moves \n      fen_history: [chess.fen()],\n      // all moves, each represented by fen \n      flipped: false,\n      loaded_game: null,\n      //PGN of loaded game \n      popUp: false,\n      showControl: true,\n      weighted: false,\n      showGames: false,\n      players: false,\n      result: '',\n      showPieces: true,\n      promotion: {\n        from: null,\n        to: null,\n        color: null\n      },\n      autoplay: false\n    };\n  }\n\n  render() {\n    // let arr = this.state.flipped ? chess.board().flat().reverse() : chess.board().flat();\n    chess.load(this.state.fen_history[this.state.selected_move]);\n    let colorToMove = chess.turn();\n    let arr = this.state.flipped ? Array.prototype.reverse.call(chess.board().flat()) : chess.board().flat();\n    let squares_ids = this.state.flipped ? squareID.reverse() : squareID;\n    let square_classes = ['light', 'dark'];\n    let c = 0;\n    let players = this.state.players;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        id: \"title\",\n        children: \"visual chess\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"chessboard\",\n          className: \"chessboard\",\n          children: arr.map((square, i) => {\n            {\n              /*return square \n              ? \n              <div \n                onDragOver={this.dragOverHandler} \n                onDragLeave={this.dragLeaveHandler} \n                onDrop={this.dropHandler} \n                data-square={SQUARES[squares_ids[i]]}\n                id={squares_ids[i]}\n                data-position={squares_ids[i]}\n                key={squares_ids[i]} \n                className='square'> \n                  <div \n                    className={`piece ${this.colorConv(square.color)} ${square.type}`}\n                    draggable='true'\n                    data-position={squares_ids[i]}\n                    onDragStart={this.dragStartHandler}\n                    onDragEnd={this.dragEndHandler}\n                    onClick={this.handlePieceClick}\n                  />\n              </div>\n              : \n              <div \n                data-square={SQUARES[squares_ids[i]]}\n                data-position={squares_ids[i]}\n                id={squares_ids[i]}\n                onDragOver={this.dragOverHandler} \n                onDragLeave={this.dragLeaveHandler} \n                onClick={this.handleClick} \n                onDrop={this.dropHandler} \n                key={squares_ids[i]} \n                className='square' \n              />;*/\n            }\n            return square ? /*#__PURE__*/_jsxDEV(\"div\", {\n              onDragOver: this.dragOverHandler,\n              onDragLeave: this.dragLeaveHandler,\n              onDrop: this.dropHandler,\n              \"data-square\": SQUARES[squares_ids[i]],\n              id: squares_ids[i],\n              \"data-position\": squares_ids[i],\n              \"data-count\": i,\n              className: `square ${square_classes[c % 2]}`,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"square-bg\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"control-dark\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 154,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"control-light\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 155,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: `piece ${this.colorConv(square.color)} ${square.type}`,\n                draggable: \"true\",\n                \"data-position\": squares_ids[i],\n                onDragStart: this.dragStartHandler,\n                onDragEnd: this.dragEndHandler,\n                onClick: this.handlePieceClick\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 157,\n                columnNumber: 21\n              }, this)]\n            }, squares_ids[i], true, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              \"data-square\": SQUARES[squares_ids[i]],\n              \"data-position\": squares_ids[i],\n              id: squares_ids[i],\n              \"data-count\": i,\n              onDragOver: this.dragOverHandler,\n              onDragLeave: this.dragLeaveHandler,\n              onClick: this.handleClick,\n              onDrop: this.dropHandler,\n              className: \"square\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"square-bg\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"control-dark\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 179,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"control-light\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 180,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 178,\n                columnNumber: 21\n              }, this)\n            }, squares_ids[i], false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), this.state.promotion.from ? /*#__PURE__*/_jsxDEV(PromotionPrompt, {\n          onClick: this.promotionHandler,\n          from: this.state.promotion.from,\n          to: this.state.promotion.to,\n          color: this.state.promotion.color\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 13\n        }, this) : '', /*#__PURE__*/_jsxDEV(\"aside\", {\n          children: [/*#__PURE__*/_jsxDEV(Moves, {\n            onClick: this.moveClick,\n            selected_move: this.state.selected_move,\n            moves: this.state.history,\n            colorToMove: colorToMove,\n            result: this.state.result,\n            whiteplayer: this.state.whiteplayer,\n            blackplayer: this.state.blackplayer\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"cards\",\n            children: [players && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"players\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"whiteplayer\",\n                children: players.whiteplayer ? players.whiteplayer : 'Anonymous'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 212,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"blackplayer\",\n                children: players.blackplayer ? players.blackplayer : 'Anonymous'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 214,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 21\n            }, this), this.state.result && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"result\",\n              children: [\" \", this.state.result, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"button_container\",\n            children: [/*#__PURE__*/_jsxDEV(ImageButton, {\n              button: \"pgn_button\",\n              altText: \"Enter PGN\",\n              onClick: this.pgnClick\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(ImageButton, {\n              button: \"play_button\",\n              altText: \"Turn Autoplay on\",\n              state: this.toggleConvert(this.state.autoplay),\n              onClick: this.handleAutoplayClick\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(ToggleTextButton, {\n              text: ['Hide Pieces', 'Show Pieces'],\n              initialText: 0,\n              onClick: this.handleHideClick\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(ToggleTextButton, {\n              text: ['Hide Board Control', 'Show Board Control'],\n              initialText: 0,\n              onClick: this.handleControlClick\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"created using (a modified) \", /*#__PURE__*/_jsxDEV(\"a\", {\n                alt: \"Chess.JS Github\",\n                href: \"https://github.com/jhlywa/chess.js/blob/master/README.md\",\n                children: \"chess.js\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 248,\n                columnNumber: 47\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"piece design from \", /*#__PURE__*/_jsxDEV(\"a\", {\n                href: \"lichess.org\",\n                alt: \"Lichess\",\n                children: \"lichess.org\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 249,\n                columnNumber: 38\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"contact: \", /*#__PURE__*/_jsxDEV(\"a\", {\n                href: \"mailto: quirschnei@gmail.com\",\n                children: \"quirschnei@gmail.com\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 250,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 16\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), this.state.popUp ? /*#__PURE__*/_jsxDEV(PopUp, {\n        props: this.state.popUp\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 11\n      }, this) : '']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this);\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.keyDownHandler);\n    if (this.state.showControl) this.showBoardControl();\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.showPieces !== nextState.showPieces) return false; // if(this.state.piece_clicked!==nextState.piece_clicked) return false;\n\n    if (this.state.showControl !== nextState.showControl) {\n      // console.log('shouldComponentUpdate, previousState: '+this.state.showControl+', nextState: '+nextState.showControl);\n      // this.hideBoardControl();\n      this.showBoardControl(nextState.showControl);\n      return false;\n    }\n\n    if (this.state.selected_move !== nextState.selected_move) {\n      document.getElementById('moves_table').scrollTop = Math.floor(nextState.selected_move / 2) * 20;\n      return true;\n    }\n\n    return true;\n  }\n\n  componentDidUpdate() {\n    if (this.state.selected_move > 0) {\n      // For highlighting the last move\n      this.removeClassFromAll('highlighted');\n\n      try {\n        this.highlightSquare(this.convertMoveToSquare(this.state.history[this.state.selected_move - 1]));\n      } catch (err) {\n        console.log('Error highlighting move!');\n        console.log('this.state.selected_move: ', this.state.selected_move);\n        console.log('history-move: ', this.state.history[this.state.selected_move - 1]);\n        console.log('convertedSquare', this.convertMoveToSquare(this.state.history[this.state.selected_move - 1]));\n        console.error('Error:', err);\n      }\n    }\n\n    if (this.state.showControl) this.showBoardControl();\n  }\n  /*\n  ----------------------------------------------------------------------------------------------------------------------------------\n  ---------------------------------------------------- EVENT HANLDERS --------------------------------------------------------------\n  ----------------------------------------------------------------------------------------------------------------------------------\n  */\n\n\n  getRandomIntInclusive(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1) + min); //The maximum is inclusive and the minimum is inclusive\n  }\n\n  /*\n  ----------------------------------------------------------------------------------------------------------------------------------\n  ----------------------------------------------------        UTILITY        -------------------------------------------------------\n  ----------------------------------------------------------------------------------------------------------------------------------\n  */\n\n  /*\n    If either of the players are specified (through a loaded PGN), but one isn't convert that one to \"Anonymous\"\n    else simply return the tags\n  */\n  // createPlayerTags(whiteplayer, blackplayer){\n  //   if(whiteplayer && blackplayer) return [whiteplayer, blackplayer]; \n  //   if(whiteplayer || blackplayer){\n  //     whiteplayer = whiteplayer || 'Anonymous'; \n  //     blackplayer = blackplayer || 'Anonymous'; \n  //   }\n  //   return {whiteplayer, blackplayer};  \n  // }\n  convertMoveToSquare(move) {\n    if (CASTLING.includes(move.charAt(0))) return chess.get_other_king();\n    return move.slice(-1) === '#' || move.slice(-1) === '+' ? move.slice(-3, -1) : move.slice(-2);\n  }\n\n  autoplay(point, end) {\n    ++point;\n\n    if (point > end || !this.state.autoplay) {\n      this.setState({\n        autoplay: false\n      });\n      return false;\n    }\n\n    this.setState({\n      selected_move: point\n    });\n    setTimeout(() => this.autoplay(point, end), AUTOPLAY_SPEED);\n  }\n\n  loadPGNfromServer(url) {\n    fetch(url).then(res => res.text()).then(res => this.loadPGN(res));\n  }\n\n  loadPGN(pgn) {\n    let r = chess.load_pgn(pgn);\n    let headers = chess.header();\n    let board = document.getElementById(BOARD_ID);\n    let players = {};\n\n    if (headers.Black) {\n      let content = headers.BlackTitle ? `[${headers.BlackTitle}]` + ' ' + headers.Black : headers.Black;\n      board.dataset.blackplayer = content;\n      players.whiteplayer = content; // board.classList.add('blackplayer');\n    } else board.classList.remove('blackplayer');\n\n    if (headers.White) {\n      let content = headers.WhiteTitle ? `[${headers.WhiteTitle}]` + ' ' + headers.White : headers.White;\n      board.dataset.whiteplayer = content;\n      players.blackplayer = content; // board.classList.add('whiteplayer');\n    } else board.classList.remove('whiteplayer');\n\n    let result = headers.Result ? 'Result: ' + headers.Result : '';\n    if (headers.Termination) result += ` (${headers.Termination})`;\n\n    if (r) {\n      let history = chess.history();\n      chess.reset();\n      let fen_history = [chess.fen()];\n      history.forEach(e => {\n        chess.move(e);\n        fen_history.push(chess.fen());\n      }); // let fen_history = history.map(e => {\n      //   chess.move(e);\n      //   return chess.fen();   \n      // });\n\n      chess.load(fen_history[0]); // this.setState({history, fen_history, loaded_game: pgn, selected_move: 0}, this.showBoardControl());\n\n      this.setState({\n        history,\n        fen_history,\n        loaded_game: pgn,\n        selected_move: 0,\n        result,\n        players\n      });\n    } else console.log(r);\n  }\n\n  loadFEN(fen) {\n    let r = chess.load(fen);\n    let fen_history = [chess.fen()];\n    let history = [];\n    this.setState({\n      fen_history,\n      selected_move: 0\n    });\n  } // If square is of format piece-square, remove piece (e.g. ba8 => a8) \n\n\n  // removeEnPassantFromFen = (fen) => {\n  //    var tokens = fen.split(/\\s+/);\n  //    tokens[3] = '-';\n  //    return tokens.join(' ');\n  // }\n  getRatio(w, b) {\n    if (w === 0 && b === 0) return 0;\n    let sum = w + b;\n    let whiteshare = w / sum * 100;\n    return whiteshare;\n  }\n\n  getWeightedRatio(w, b) {\n    if (w == 0) return 0;\n    if (b == 0) return 100;\n    let sum = w + b;\n    let whiteshare = 100 - w / sum * 100;\n    return whiteshare;\n  }\n\n  // diagonalPawnMoves(square, color){\n  //   if(this.isOnFirstOrLastRank(square)) return false; \n  //   let moves = [];\n  //   let [l, r] = color==='w' ? [-9, -7] : [7, 9];\n  //   switch(this.isOnEdge(square)){\n  //     case 0:\n  //       moves.push(squareID[square+l], squareID[square+r]);\n  //       break;\n  //     case 1: \n  //       moves.push(squareID[square+r]);\n  //       break;\n  //     case 2: \n  //       moves.push(squareID[square+l]);\n  //       break;\n  //     default: moves.push(squareID[square+l], squareID[square+r]);\n  //       break; \n  //   }\n  //   return moves;\n  // }\n  isOnFirstOrLastRank(square) {\n    return square >= 0 && square <= 7 || square >= 56 && square <= 63;\n  }\n\n  getRowFromSquare(square) {\n    return square.charAt(1);\n  }\n\n  isOnPromotionSquare(square, color) {\n    return color == 'w' ? this.getRowFromSquare(square) == 8 : this.getRowFromSquare(square) == 1;\n  }\n  /*\n  return 1 ... left Edge, \n         2 ... right edge \n         0 ... not on edge\n  */\n\n\n  isOnEdge(square) {\n    // if([0,8,16,24,32,40,48,56].includes(square)) return 1;\n    if (Number(square) % 8 === 0) return 1; // if([7,15,23,31,39,47,55,63].includes(square)) return 2; \n\n    if (Number(square) % 7 === 0) return 2;\n    return 0;\n  }\n  /*\n  ----------------------------------------------------------------------------------------------------------------------------------\n  ----------------------------------------------------     CHESS STUFF    ----------------------------------------------------------\n  ----------------------------------------------------------------------------------------------------------------------------------\n  */\n\n\n  openPromotionPrompt(from, to, color) {\n    this.setState({\n      promotion: {\n        from,\n        to,\n        color\n      }\n    }, () => {\n      let promotion = document.querySelector('.promotion_prompt');\n      let rect = document.getElementById(this.state.promotion.to).getBoundingClientRect();\n      let color = this.state.promotion.color;\n      promotion.style.left = rect.left + 'px';\n      promotion.style.top = color == 'black' ? `${rect.top - 3 * SQUARE_SIZE}px` : `${rect.top}px`;\n    });\n  }\n\n  makeRandomMove() {\n    let possible_moves = chess.moves({\n      verbose: true\n    });\n    let move = possible_moves[this.getRandomInt(possible_moves.length)];\n    this.newMove(move.from, move.to);\n  }\n\n  getRandomInt(max) {\n    return Math.floor(Math.random() * max);\n  }\n\n  newMove(from, to, promoteTo = false) {\n    let fen_history = [...this.state.fen_history];\n    let history = [...this.state.history];\n    let options = {\n      from,\n      to\n    };\n\n    if (this.state.selected_move < this.state.history.length) {\n      // Override if a previous move was selected\n      history = history.slice(0, this.state.selected_move);\n      fen_history = fen_history.slice(0, this.state.selected_move + 1);\n    }\n\n    if (promoteTo) options.promotion = promoteTo;else {\n      if (this.isOnPromotionSquare(to, chess.turn()) && chess.get(from).type == 'p') {\n        // options.promotion = 'q';\n        if (this.state.promotion.from == null) {\n          this.openPromotionPrompt(from, to, this.colorConv(chess.turn()), this.newMove);\n          return;\n        } else {\n          options.promotion = promoteTo;\n        }\n      }\n    }\n    let res = chess.move(options);\n\n    if (res) {\n      fen_history.push(chess.fen());\n      history.push(res.san);\n\n      if (chess.result()) {\n        this.setState(prevState => ({\n          selected_move: prevState.selected_move + 1,\n          history,\n          fen_history,\n          result: chess.result()\n        }));\n        return;\n      }\n\n      this.setState(prevState => ({\n        selected_move: prevState.selected_move + 1,\n        history,\n        fen_history\n      }));\n      return res.san;\n    } else {\n      console.log('Error making new move: ' + res);\n      return false;\n    }\n  } // switchColor = () => this.state.colorToMove === 1 ? -1 : 1;\n\n  /*\n  ----------------------------------------------------------------------------------------------------------------------------------\n  ----------------------------------------------------         DOM            ------------------------------------------------------\n  ----------------------------------------------------------------------------------------------------------------------------------\n  */\n\n\n  highlightMoves(piece) {\n    chess.moves({\n      square: piece,\n      verbose: true\n    }).forEach(move => {\n      document.getElementById(move.to).classList.add('moveable');\n    });\n  }\n\n  highlightSquare(square) {\n    document.getElementById(square).classList.add('highlighted');\n  }\n\n  /*showBoardControl_old = () => { \n    let squares = this.initSquares();\n    let turn = chess.turn(); \n    let other_turn = this.getOtherChessColor();\n     let defends_other = chess.defended_pieces(other_turn, true, true);\n    // console.log('defends_other', defends_other);\n    // console.log(chess.boardFull());\n     let defends = chess.defended_pieces(turn, true, true);\n    // console.log('defends', defends);\n      // Defends = object, only own color  \n    // keys: defended squares/pieces  (format e.g. 'bc8' or 'c2')\n    // values: defending square/piece (format e.g. 'pd7')\n    for (let [key, value] of Object.entries(defends)){ \n      key = this.cleanUpSquare(key);  //check whether key is square or piece \n      if(value.length>0){\n        try{\n          // squares[key][turn] += value.filter(move => !this.moveIsPawnMove(move)).length;\n          // squares[square][turn].push(value.map(e=>e.slice(1)));\n          squares[key][turn]+=value.length;\n        }catch(err){\n          console.error('Error', err);\n          console.log(` Vars: value: ${value}, key: ${key} `);\n        }\n      } \n    } \n    for (let [key, value] of Object.entries(defends_other)){\n      // console.log(`value: ${value}, key: ${key}, moveIsPawnMove: ${this.moveIsPawnMove(value)}`);\n      key = this.cleanUpSquare(key);  //check whether key is square or piece \n      if(value.length>0){\n        // let square = key.slice(1);\n        try{\n          // squares[key][other_turn] += value.filter(move => !this.moveIsPawnMove(move)).length;\n          // squares[square][turn].push(value.map(e=>e.slice(1)));\n          squares[key][other_turn]+=value.length;\n        }catch(err){\n          console.error('Error', err);\n          console.log(` Vars: value: ${value}, key: ${key} `);\n        }\n      } \n    }\n    // console.log(squares);\n     this.removeClassFromAll('attacked');\n    for (let [square, value] of Object.entries(squares)) {\n      if(value.w>0||value.b>0){ \n        let dom = document.getElementById(square);\n        dom.classList.add('attacked');\n        dom.style.setProperty('--separator', this.getRatio(value.w,value.b)+'%');\n      }\n    }\n  }*/\n  loadGames(text, separator) {\n    let split = text.split(separator);\n    this.loadPGN(split[0]);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/q/Documents/WebDocuments/chess/front/src/App.js"],"names":["React","Component","Moves","PopUp","Button","ToggleTextButton","ImageButton","PGNDialog","GamesList","PromotionPrompt","Draggable","ChessJS","Chess","chess","CASTLING","squareID","SQUARES","a8","b8","c8","d8","e8","f8","g8","h8","a7","b7","c7","d7","e7","f7","g7","h7","a6","b6","c6","d6","e6","f6","g6","h6","a5","b5","c5","d5","e5","f5","g5","h5","a4","b4","c4","d4","e4","f4","g4","h4","a3","b3","c3","d3","e3","f3","g3","h3","a2","b2","c2","d2","e2","f2","g2","h2","a1","b1","c1","d1","e1","f1","g1","h1","BOARD_ID","AUTOPLAY_SPEED","SQUARE_SIZE","App","constructor","handleEvalClick","keyDownHandler","e","keyCode","preventDefault","state","selected_move","fen_history","length","setState","prevState","popUp","makeRandomMove","i","console","log","document","getElementById","scrollTop","dragStartHandler","square","target","dataset","position","dataTransfer","effectAllowed","dropEffect","setData","requestAnimationFrame","classList","add","highlightMoves","dragEndHandler","remove","dropHandler","removeClassesFromAll","origin","getData","newMove","dragOverHandler","dragLeaveHandler","handleControlClick","showControl","handleGamesClick","fetch","method","then","res","text","loadGames","handleFlipClick","gumbodumbo","documentElement","p","getRandomIntInclusive","style","setProperty","handleHideClick","showPieces","serverClickStudy","json","closePopup","content","serverClick","textarea_class","closeAndLoad","pgnClick","handleFENClick","closePopupFEN","moveClick","number","history","handleAutoplayClick","autoplay","handleClick","clicked","piece_clicked","handlePieceClick","pieceIsTurnColor","squaresOfSameColor","url","loadPGNfromServer","loadPGN","loadFEN","promotionHandler","piece","from","to","promotion","color","toggleConvert","toggle","cleanUpSquare","slice","moveIsPawnMove","move","charAt","toLowerCase","getOtherChessColor","turn","WHITE","BLACK","getColorToMoveByMoveNumber","squareColorConv","colorConv","one","two","get","removeClassFromAll","querySelectorAll","forEach","el","classes","hideBoardControl","showBoardControl","control_flag","undefined","in_check","get_king","controlClass","moves","verbose","dom","control","defended_pieces_all","value","Object","entries","w","b","weighted","getWeightedRatio","ratio","getRatio","bind","fen","flipped","loaded_game","showGames","players","result","render","load","colorToMove","arr","Array","prototype","reverse","call","board","flat","squares_ids","square_classes","c","map","type","whiteplayer","blackplayer","componentDidMount","addEventListener","shouldComponentUpdate","nextProps","nextState","Math","floor","componentDidUpdate","highlightSquare","convertMoveToSquare","err","error","min","max","ceil","random","includes","get_other_king","point","end","setTimeout","pgn","r","load_pgn","headers","header","Black","BlackTitle","White","WhiteTitle","Result","Termination","reset","push","sum","whiteshare","isOnFirstOrLastRank","getRowFromSquare","isOnPromotionSquare","isOnEdge","Number","openPromotionPrompt","querySelector","rect","getBoundingClientRect","left","top","possible_moves","getRandomInt","promoteTo","options","san","separator","split"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, { Component } from 'react';\nimport Moves from './components/Moves/Moves';\n// import Square from './components/Square/Square'\nimport PopUp from './components/PopUp/PopUp';\nimport Button from './components/Button/Button';\nimport ToggleTextButton from './components/ToggleTextButton/ToggleTextButton';\nimport ImageButton from './components/ImageButton/ImageButton';\nimport PGNDialog from './components/PGNDialog/PGNDialog';\nimport GamesList from './components/GamesList/GamesList';\nimport PromotionPrompt from './components/PromotionPrompt/PromotionPrompt';\n// import Squares from './components/Squares/Squares';\nimport Draggable from 'react-draggable';\nimport * as ChessJS from 'chess.js';\n\nconst Chess = typeof ChessJS === \"function\" ? ChessJS : ChessJS.Chess;\nconst chess = new Chess();\n\nconst CASTLING = ['0', 'O'];\n\nconst squareID = [\"a8\", \"b8\", \"c8\", \"d8\", \"e8\", \"f8\", \"g8\", \"h8\", \"a7\", \"b7\", \"c7\", \"d7\", \"e7\", \"f7\", \"g7\", \"h7\", \"a6\", \"b6\", \"c6\", \"d6\", \"e6\", \"f6\", \"g6\", \"h6\", \"a5\", \"b5\", \"c5\", \"d5\", \"e5\", \"f5\", \"g5\", \"h5\", \"a4\", \"b4\", \"c4\", \"d4\", \"e4\", \"f4\", \"g4\", \"h4\", \"a3\", \"b3\", \"c3\", \"d3\", \"e3\", \"f3\", \"g3\", \"h3\", \"a2\", \"b2\", \"c2\", \"d2\", \"e2\", \"f2\", \"g2\", \"h2\", \"a1\", \"b1\", \"c1\", \"d1\", \"e1\", \"f1\", \"g1\", \"h1\"];\nconst SQUARES = {\n    a8:   0, b8:   1, c8:   2, d8:   3, e8:   4, f8:   5, g8:   6, h8:   7,\n    a7:  16, b7:  17, c7:  18, d7:  19, e7:  20, f7:  21, g7:  22, h7:  23,\n    a6:  32, b6:  33, c6:  34, d6:  35, e6:  36, f6:  37, g6:  38, h6:  39,\n    a5:  48, b5:  49, c5:  50, d5:  51, e5:  52, f5:  53, g5:  54, h5:  55,\n    a4:  64, b4:  65, c4:  66, d4:  67, e4:  68, f4:  69, g4:  70, h4:  71,\n    a3:  80, b3:  81, c3:  82, d3:  83, e3:  84, f3:  85, g3:  86, h3:  87,\n    a2:  96, b2:  97, c2:  98, d2:  99, e2: 100, f2: 101, g2: 102, h2: 103,\n    a1: 112, b1: 113, c1: 114, d1: 115, e1: 116, f1: 117, g1: 118, h1: 119\n  };\n\n\n\n/*\nrnbqkbnr/pp2p1Pp/2p5/8/8/8/PPpP1PPP/RNBQKBNR w KQkq - 0 1\n  => PROMOTION TEST white\n\nrnbqkbnr/pp2p1Pp/2p5/8/8/8/PPpP1PPP/RNBQKBNR b KQkq - 0 1\n  => PROMOTION TEST black\n\n\n7 move game  -> R0Nz054g \n36 move game -> u2qos9uM \n60 move game -> 0amFRLRg \n\n\n\nBUG!!!!!! \n\nPromotion wenn man einfach irgendein piece aktiveret (klickt), und dann einen \"promotion square \" anklickt \n--> Ã¶ffnet promotion (muss zuerst ein legal move sein!)\n\n*/\n\nconst BOARD_ID = 'chessboard'; \nconst AUTOPLAY_SPEED = 500; \nconst SQUARE_SIZE = 100;\n\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.moveIsPawnMove = this.moveIsPawnMove.bind(this);\n    this.state = {\n      selected_move: 0,\n      piece_clicked: false,\n      // board: chess.board().flat(),\n      history: [], // single moves \n      fen_history: [chess.fen()], // all moves, each represented by fen \n      flipped: false,\n      loaded_game: null, //PGN of loaded game \n      popUp: false, \n      showControl: true,\n      weighted: false,\n      showGames: false,\n      players: false,\n      result: '',\n      showPieces: true,\n      promotion: {\n        from: null,\n        to: null,\n        color: null\n      },\n      autoplay: false\n    };  \n  }\n\n  render(){\n    // let arr = this.state.flipped ? chess.board().flat().reverse() : chess.board().flat();\n    chess.load(this.state.fen_history[this.state.selected_move]);\n    let colorToMove = chess.turn();\n    let arr = this.state.flipped ? Array.prototype.reverse.call(chess.board().flat()) : chess.board().flat();\n    let squares_ids = this.state.flipped ? squareID.reverse() : squareID;\n\n    let square_classes = ['light', 'dark'];\n    let c = 0; \n    let players = this.state.players;\n    return(\n      <div className='container'>\n        <h1 id=\"title\">\n          visual chess\n        </h1>\n        <div className=\"main\"> \n          <div id=\"chessboard\" className='chessboard'> \n            {\n              arr.map((square, i)=>{\n                {\n                /*return square \n                ? \n                <div \n                  onDragOver={this.dragOverHandler} \n                  onDragLeave={this.dragLeaveHandler} \n                  onDrop={this.dropHandler} \n                  data-square={SQUARES[squares_ids[i]]}\n                  id={squares_ids[i]}\n                  data-position={squares_ids[i]}\n                  key={squares_ids[i]} \n                  className='square'> \n                    <div \n                      className={`piece ${this.colorConv(square.color)} ${square.type}`}\n                      draggable='true'\n                      data-position={squares_ids[i]}\n                      onDragStart={this.dragStartHandler}\n                      onDragEnd={this.dragEndHandler}\n                      onClick={this.handlePieceClick}\n                    />\n                </div>\n                : \n                <div \n                  data-square={SQUARES[squares_ids[i]]}\n                  data-position={squares_ids[i]}\n                  id={squares_ids[i]}\n                  onDragOver={this.dragOverHandler} \n                  onDragLeave={this.dragLeaveHandler} \n                  onClick={this.handleClick} \n                  onDrop={this.dropHandler} \n                  key={squares_ids[i]} \n                  className='square' \n              />;*/}\n              return square \n                ? \n                <div \n                  onDragOver={this.dragOverHandler} \n                  onDragLeave={this.dragLeaveHandler} \n                  onDrop={this.dropHandler} \n                  data-square={SQUARES[squares_ids[i]]}\n                  id={squares_ids[i]}\n                  data-position={squares_ids[i]}\n                  data-count={i}\n                  key={squares_ids[i]} \n                  className={`square ${square_classes[c%2]}`}> \n                    <div className='square-bg'>\n                      <div className='control-dark' /> \n                      <div className='control-light' />\n                    </div> \n                    <div \n                      className={`piece ${this.colorConv(square.color)} ${square.type}`}\n                      draggable='true'\n                      data-position={squares_ids[i]}\n                      onDragStart={this.dragStartHandler}\n                      onDragEnd={this.dragEndHandler}\n                      onClick={this.handlePieceClick}\n                    />  \n                </div>\n                : \n                <div \n                  data-square={SQUARES[squares_ids[i]]}\n                  data-position={squares_ids[i]}\n                  id={squares_ids[i]}\n                  data-count={i}\n                  onDragOver={this.dragOverHandler} \n                  onDragLeave={this.dragLeaveHandler} \n                  onClick={this.handleClick} \n                  onDrop={this.dropHandler} \n                  key={squares_ids[i]} \n                  className='square'> \n                    <div className='square-bg'>\n                      <div className='control-dark' /> \n                      <div className='control-light' />\n                    </div> \n                </div>         \n            })\n          }\n          </div>\n\n          {this.state.promotion.from ? \n            <PromotionPrompt \n              onClick={this.promotionHandler}\n              from={this.state.promotion.from}\n              to={this.state.promotion.to}\n              color={this.state.promotion.color}\n\n              />\n              : ''\n          }\n\n          <aside>\n            <Moves \n              onClick={this.moveClick} \n              selected_move={this.state.selected_move}\n              moves={this.state.history}\n              colorToMove={colorToMove}\n              result={this.state.result}\n              whiteplayer={this.state.whiteplayer}\n              blackplayer={this.state.blackplayer}\n              />\n\n              <div className=\"cards\">\n                { players && \n                    <div className=\"players\"> \n                      <div className=\"whiteplayer\">{players.whiteplayer ? players.whiteplayer : 'Anonymous'}</div> \n                      {/*<div className=\"separator\"> â </div>*/}\n                      <div className=\"blackplayer\">{players.blackplayer ? players.blackplayer : 'Anonymous'}</div>\n                    </div>\n                }\n\n                { this.state.result && \n                    <div className=\"result\"> {this.state.result} </div> \n                } \n              </div>\n              \n              <div className=\"button_container\">\n                  <ImageButton \n                    button='pgn_button' \n                    altText='Enter PGN'\n                    onClick={this.pgnClick}\n                  />\n                  <ImageButton \n                    button='play_button' \n                    altText='Turn Autoplay on'\n                    state={this.toggleConvert(this.state.autoplay)}\n                    onClick={this.handleAutoplayClick}  \n                    />\n                  <ToggleTextButton \n                    text={['Hide Pieces', 'Show Pieces']} \n                    initialText={0}\n                    onClick={this.handleHideClick} />\n                  <ToggleTextButton \n                    text={['Hide Board Control', 'Show Board Control']} \n                    initialText={0}\n                    onClick={this.handleControlClick} />\n              </div>\n\n              \n\n              {<footer> \n                <p>created using (a modified) <a alt=\"Chess.JS Github\" href=\"https://github.com/jhlywa/chess.js/blob/master/README.md\">chess.js</a></p>\n                <p>piece design from <a href=\"lichess.org\" alt=\"Lichess\">lichess.org</a></p>\n                <p>contact: <a href = \"mailto: quirschnei@gmail.com\">quirschnei@gmail.com</a></p>\n              </footer>}\n           \n          </aside>\n         \n          \n        </div>\n\n        {this.state.popUp ?  \n          <PopUp\n             props={this.state.popUp}\n          />  \n          : ''}\n\n      </div> \n    );\n  } \n  \n  componentDidMount(){\n    document.addEventListener(\"keydown\", this.keyDownHandler);\n    if(this.state.showControl) this.showBoardControl();\n  }\n\n\n  shouldComponentUpdate(nextProps, nextState){\n    if(this.state.showPieces!==nextState.showPieces) return false;\n    // if(this.state.piece_clicked!==nextState.piece_clicked) return false;\n    if(this.state.showControl!==nextState.showControl){\n      // console.log('shouldComponentUpdate, previousState: '+this.state.showControl+', nextState: '+nextState.showControl);\n      // this.hideBoardControl();\n      this.showBoardControl(nextState.showControl);\n      return false; \n    }\n    if(this.state.selected_move!==nextState.selected_move){\n      document.getElementById('moves_table').scrollTop = Math.floor(nextState.selected_move/2)*20;\n      return true;\n    }\n    return true;\n  }\n\n  componentDidUpdate() {\n    if(this.state.selected_move>0){ // For highlighting the last move\n      this.removeClassFromAll('highlighted');\n      try{\n        this.highlightSquare(this.convertMoveToSquare(this.state.history[this.state.selected_move-1]));\n      }catch(err){\n        console.log('Error highlighting move!');\n        console.log('this.state.selected_move: ', this.state.selected_move);\n        console.log('history-move: ', this.state.history[this.state.selected_move-1]);\n        console.log('convertedSquare', this.convertMoveToSquare(this.state.history[this.state.selected_move-1]));\n        console.error('Error:', err);\n      }\n    }\n    if(this.state.showControl) this.showBoardControl();\n  }\n\n  /*\n  ----------------------------------------------------------------------------------------------------------------------------------\n  ---------------------------------------------------- EVENT HANLDERS --------------------------------------------------------------\n  ----------------------------------------------------------------------------------------------------------------------------------\n  */\n  \n  handleEvalClick = () => {    \n    // let pgn = \"1. d4 d5 2. c4 c6 3. Nf3 Nf6 4. Nc3 e6 5. e3 Nbd7 6. Bd3 dxc4 7. Bxc4 b5 8. Bd3 Bd6 9. O-O O-O 10. Qc2 Bb7 11. a3 Rc8 12. Ng5 c5 13. Nxh7 Ng4 14. f4 cxd4 15. exd4 Bc5 16. Be2 Nde5 17. Bxg4 Bxd4+ 18. Kh1 Nxg4 19. Nxf8 f5 20. Ng6 Qf6 21. h3 Qxg6 22. Qe2 Qh5 23. Qd3 Be3 0-1\";\n    // this.loadPGN(pgn);\n\n    // if(chess.in_check()) console.log(chess.get_kings());\n  }\n\n  keyDownHandler = (e)=>{\n    switch(e.keyCode){\n      case 39: // Right arrow \n        e.preventDefault();\n        if(this.state.selected_move+1<=this.state.fen_history.length-1){ \n          // this.setState(prevState=>({selected_move: prevState.selected_move+1}), this.showBoardControl());  \n          this.setState(prevState=>({selected_move: prevState.selected_move+1}));                \n          // this.removeClassFromAll('selected');\n          // document.getElementById('m'+this.state.selected_move+1).classList.add('selected');\n        }\n        break;\n      case 37: // Left arrow \n        e.preventDefault();\n        if(this.state.selected_move>=1){\n          this.setState(prevState=>({selected_move: prevState.selected_move-1}));\n          // this.setState(prevState=>({selected_move: prevState.selected_move-1}), this.showBoardControl());\n          // this.removeClassFromAll('selected');\n          // document.getElementById('m'+this.state.selected_move-1).classList.add('selected');\n        }\n        break;\n      case 27: // esc \n        e.preventDefault(); \n        if(this.state.popUp){\n          this.setState({popUp: false});\n        }\n        break;\n      case 78: \n        e.preventDefault(); \n        this.makeRandomMove();\n        break; \n      case 77: \n        e.preventDefault(); \n        for(let i=0;i<25;i++){\n          this.makeRandomMove(); \n        }\n        break;\n        case 75: \n          e.preventDefault(); \n          console.log(document.getElementById('moves_table').scrollTop);\n        break;\n      default: break; \n    }\n  }\n\n  dragStartHandler = (e) => { // e: dragEvent, i: original square of dragged piece\n    let square = e.target.dataset.position;\n    e.dataTransfer.effectAllowed = \"all\"\n    e.dataTransfer.dropEffect = \"move\";\n    e.dataTransfer.setData(\"text/plain\", square);\n    requestAnimationFrame(function () {\n      e.target.classList.add('hide');\n    });\n    this.highlightMoves(square);   \n  }\n\n  dragEndHandler = (e) =>{\n    e.preventDefault();\n    requestAnimationFrame(function () {\n      e.target.classList.remove('hide');\n    }); \n  }\n\n  dropHandler = (e) => {\n    e.preventDefault();\n    let target = e.target.dataset.position;\n     requestAnimationFrame(function () {\n      e.target.classList.remove('dragover');\n    });\n    this.removeClassesFromAll('dragover', 'moveable'); \n    let origin = e.dataTransfer.getData('text/plain');\n    if(this.newMove(origin, target)){\n      this.removeClassesFromAll('moveable', 'active');\n    }\n  }\n\n  dragOverHandler = (e) => {\n    e.preventDefault(e);\n    requestAnimationFrame(function () {\n      e.target.classList.add('dragover');\n    });\n  }\n  \n  dragLeaveHandler = (e) => {\n    e.preventDefault(); \n    requestAnimationFrame(function () {\n      e.target.classList.remove('dragover');\n    }); \n  }\n\n  handleControlClick = () => {  \n    this.setState(prevState=> ({showControl: !prevState.showControl}));  \n  }\n\n  handleGamesClick = () => {\n    fetch('http://localhost:3000/test', {method:'GET'})\n      .then(res => res.text())\n      .then(res => {\n        this.loadGames(res, '###');\n      });\n  }\n\n  getRandomIntInclusive(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1) + min); //The maximum is inclusive and the minimum is inclusive\n  }\n\n  handleFlipClick = () => {\n    // this.setState({flipped: true});\n    let gumbodumbo = document.documentElement;\n    let p = this.getRandomIntInclusive(0, 100);\n    gumbodumbo.style.setProperty('--trial-bottom', p+'%');\n    gumbodumbo.style.setProperty('--trial-top', 100 -p+'%');\n  }\n\n  handleHideClick = () => {\n    if(this.state.showPieces){\n      document.getElementById('chessboard').classList.add('hidepieces');\n      this.setState({showPieces: false});\n    }else{\n      document.getElementById('chessboard').classList.remove('hidepieces');\n      this.setState({showPieces: true});\n    }\n    \n    // console.log(chess.boardFull());\n  }\n\n  serverClickStudy = () => {\n    // this.loadPGNfromServer('https://lichess.org/study/WtwmeX4m/FzpbQLUx', {\n    //   credentials: 'same-origin',\n    //   Access-Control-Allow-Credentials\n    //   mode: 'same-origin'\n    // });\n    fetch('http://localhost:3001/game?all=true')\n      .then(res => res.json())\n      .then(res => {\n        let closePopup = this.closePopup;\n        // console.log(res);\n        \n        this.setState({popUp: {\n            content: <GamesList games={res} closePopup={closePopup} />, \n            closePopup}\n        });\n      });\n  }\n\n  serverClick = () => {\n    this.setState({popUp: {text: 'Enter URL', textarea_class: 'url', closePopup: this.closeAndLoad}});\n  }\n\n  pgnClick = () =>{\n    this.setState({popUp: {content: <PGNDialog closePopup={this.closePopup} />, closePopup: this.closePopup}});\n  }\n\n  handleFENClick = () => {\n    this.setState({popUp: {text: 'Enter FEN', textarea_class: 'pgn', closePopup: this.closePopupFEN}});\n  }\n\n  moveClick = (number) => {\n    // this.setState({colorToMove: chess.turn(), selected_move:number+1}, this.showBoardControl());\n    if(number==999) number=this.state.history.length;\n    else{\n      if(number>this.state.history.length || number<0) return;  \n    }\n    this.setState({selected_move:number});\n  }\n\n  handleAutoplayClick = () => {\n    if(!this.state.autoplay){ \n      this.setState(state => ({\n        autoplay: !state.autoplay \n      }), ()=>this.autoplay(this.state.selected_move, this.state.history.length));\n    }else{\n      this.setState(state => ({\n        autoplay: !state.autoplay \n      }));\n    }\n    \n  }\n\n  handleClick = (e) => {\n    let square = e.target.dataset.position;\n    let clicked = this.state.piece_clicked; \n\n    if(clicked){\n      if(this.newMove(clicked, square)){\n        this.removeClassesFromAll('moveable', 'active');\n        this.setState({piece_clicked: false});\n        // this.showBoardControl();\n      }else{\n        console.log('Error in handleClick');\n        // this.removeClassFromAll('active'); \n        // this.setState({piece_clicked: false })\n      }\n    }\n  }\n\n  handlePieceClick = (e) => {\n    let square = e.target.dataset.position;\n    let clicked = this.state.piece_clicked;\n    if(square==clicked){\n      this.removeClassesFromAll('active', 'moveable');\n      this.setState({piece_clicked: null});\n      return; \n    }\n    if(!clicked){\n      if(this.pieceIsTurnColor(square)){\n        document.getElementById(square).classList.add('active');\n        this.highlightMoves(square);\n        this.setState({piece_clicked: square});\n      }\n    }else{\n      this.removeClassesFromAll('active', 'moveable');\n      if(this.squaresOfSameColor(square, clicked)){ // Wenn selbfarbiges, anderes piece gedrÃ¼ckt \n          document.getElementById(square).classList.add('active');\n          this.highlightMoves(square);\n          this.setState({piece_clicked: square});\n      }else{ // Capture \n        if(this.newMove(clicked, square)){\n          this.setState({piece_clicked: null});\n          // this.showBoardControl();\n        }\n      }\n    }\n  }\n\n  closeAndLoad = (url) => {\n    this.setState({popUp: false});\n    if(url){\n      this.loadPGNfromServer('https://lichess.org/game/export/'+url);\n    };\n  }\n\n  closePopup = (text) => {\n    this.setState({popUp: false});\n    if(text) this.loadPGN(text);\n  }\n\n  closePopupFEN = (text) => {\n    if(text) this.loadFEN(text);\n    this.setState({popUp: false});\n  }\n\n  promotionHandler = (piece, from, to) => {\n    this.setState({promotion: {from: null, to:null, color:null}});\n    this.newMove(from, to, piece);\n  }\n\n  /*\n  ----------------------------------------------------------------------------------------------------------------------------------\n  ----------------------------------------------------        UTILITY        -------------------------------------------------------\n  ----------------------------------------------------------------------------------------------------------------------------------\n  */\n\n\n  /*\n    If either of the players are specified (through a loaded PGN), but one isn't convert that one to \"Anonymous\"\n    else simply return the tags\n  */\n  // createPlayerTags(whiteplayer, blackplayer){\n  //   if(whiteplayer && blackplayer) return [whiteplayer, blackplayer]; \n  //   if(whiteplayer || blackplayer){\n  //     whiteplayer = whiteplayer || 'Anonymous'; \n  //     blackplayer = blackplayer || 'Anonymous'; \n  //   }\n  //   return {whiteplayer, blackplayer};  \n  // }\n\n  convertMoveToSquare(move){ \n    if(CASTLING.includes(move.charAt(0))) return chess.get_other_king();       \n    return move.slice(-1) === '#'|| move.slice(-1) === '+' ? move.slice(-3,-1) : move.slice(-2); \n  }\n\n  autoplay(point, end){\n    ++point;\n    if(point>end || !this.state.autoplay){\n      this.setState({autoplay:false});\n      return false;\n    } \n    this.setState({selected_move: point});\n    setTimeout(() => this.autoplay(point, end), AUTOPLAY_SPEED);\n  }\n\n  toggleConvert = (toggle) => toggle ? 'on' : 'off';  \n\n  loadPGNfromServer(url){\n    fetch(url)\n      .then(res => res.text())\n      .then(res => this.loadPGN(res));\n  }\n\n  loadPGN(pgn){\n    let r = chess.load_pgn(pgn);\n    let headers = chess.header(); \n    let board = document.getElementById(BOARD_ID);\n    let players = {};\n    if(headers.Black){\n      let content = headers.BlackTitle ? `[${headers.BlackTitle}]` + ' ' + headers.Black : headers.Black; \n      board.dataset.blackplayer = content;\n      players.whiteplayer = content; \n      // board.classList.add('blackplayer');\n    }else board.classList.remove('blackplayer');\n    if(headers.White){\n      let content = headers.WhiteTitle ? `[${headers.WhiteTitle}]` + ' ' + headers.White : headers.White; \n      board.dataset.whiteplayer = content;\n      players.blackplayer = content;   \n      // board.classList.add('whiteplayer');\n    }else board.classList.remove('whiteplayer');\n    let result = headers.Result ? 'Result: ' + headers.Result : '';\n    if(headers.Termination) result += ` (${headers.Termination})`; \n    if(r){\n      let history = chess.history(); \n      chess.reset();\n      let fen_history = [chess.fen()];\n      history.forEach(e=>{\n        chess.move(e);\n        fen_history.push(chess.fen());\n      });\n      // let fen_history = history.map(e => {\n      //   chess.move(e);\n      //   return chess.fen();   \n      // });\n      chess.load(fen_history[0]);\n      // this.setState({history, fen_history, loaded_game: pgn, selected_move: 0}, this.showBoardControl());\n      this.setState({history, fen_history, loaded_game: pgn, selected_move: 0, result, players});\n\n    }else console.log(r);\n  }\n\n  loadFEN(fen){\n    let r = chess.load(fen);\n    let fen_history = [chess.fen()];\n    let history = [];\n    this.setState({fen_history, selected_move: 0});\n    \n\n  }\n\n  // If square is of format piece-square, remove piece (e.g. ba8 => a8) \n  cleanUpSquare = (square) => square.length>2 ? square.slice(1) : square;\n\n  moveIsPawnMove = (move) => move.length===3 && move.charAt(0).toLowerCase()==='p'; \n\n  getOtherChessColor = () => chess.turn() === chess.WHITE ? chess.BLACK : chess.WHITE;\n  \n  // removeEnPassantFromFen = (fen) => {\n  //    var tokens = fen.split(/\\s+/);\n  //    tokens[3] = '-';\n  //    return tokens.join(' ');\n  // }\n\n  getRatio(w, b){\n    if(w===0&&b===0) return 0;  \n    let sum = w + b; \n    let whiteshare = w/sum*100; \n    return whiteshare; \n  }\n\n  getWeightedRatio(w, b){\n    if(w==0) return 0; \n    if(b==0) return 100;\n    let sum = w + b; \n    let whiteshare = 100-w/sum*100; \n    return whiteshare; \n  }\n\n  getColorToMoveByMoveNumber = (number) => number%2===0 ? 1 : -1; \n\n  squareColorConv = color => {\n    if(color==='light') return 'w'; \n    else if(color==='dark') return 'b';\n    return false; \n  }\n\n  colorConv = color => color==='w' ? 'white' : 'black';\n\n  squaresOfSameColor = (one, two) => chess.get(one).color===chess.get(two).color;\n\n  pieceIsTurnColor = (piece) => chess.get(piece).color === chess.turn();\n\n\n  // diagonalPawnMoves(square, color){\n  //   if(this.isOnFirstOrLastRank(square)) return false; \n  //   let moves = [];\n  //   let [l, r] = color==='w' ? [-9, -7] : [7, 9];\n  //   switch(this.isOnEdge(square)){\n  //     case 0:\n  //       moves.push(squareID[square+l], squareID[square+r]);\n  //       break;\n  //     case 1: \n  //       moves.push(squareID[square+r]);\n  //       break;\n  //     case 2: \n  //       moves.push(squareID[square+l]);\n  //       break;\n  //     default: moves.push(squareID[square+l], squareID[square+r]);\n  //       break; \n  //   }\n  //   return moves;\n  // }\n\n  isOnFirstOrLastRank(square){ return (square>=0&&square<=7)||(square>=56&&square<=63); }\n\n  getRowFromSquare(square){ return square.charAt(1); }\n\n  isOnPromotionSquare(square, color){\n    return color=='w' ? this.getRowFromSquare(square)==8 : this.getRowFromSquare(square)==1; \n  }\n\n  /*\n  return 1 ... left Edge, \n         2 ... right edge \n         0 ... not on edge\n  */\n  isOnEdge(square){\n    // if([0,8,16,24,32,40,48,56].includes(square)) return 1;\n    if(Number(square)%8===0) return 1;\n    // if([7,15,23,31,39,47,55,63].includes(square)) return 2; \n    if(Number(square)%7===0) return 2; \n    return 0; \n  }\n\n  /*\n  ----------------------------------------------------------------------------------------------------------------------------------\n  ----------------------------------------------------     CHESS STUFF    ----------------------------------------------------------\n  ----------------------------------------------------------------------------------------------------------------------------------\n  */\n\n\n  openPromotionPrompt(from, to, color){\n    this.setState({promotion: {from, to, color}}, () => {\n      let promotion = document.querySelector('.promotion_prompt'); \n      let rect = document.getElementById(this.state.promotion.to).getBoundingClientRect();\n      let color = this.state.promotion.color; \n      promotion.style.left = rect.left+'px';\n      promotion.style.top = color=='black' ? `${rect.top-3*SQUARE_SIZE}px` : `${rect.top}px`;\n    });\n  }\n\n\n  makeRandomMove(){\n    let possible_moves = chess.moves({verbose:true});\n    let move = possible_moves[this.getRandomInt(possible_moves.length)]; \n    this.newMove(move.from, move.to)\n  }\n\n  getRandomInt(max) {\n    return Math.floor(Math.random() * max);\n  }\n\n  newMove(from, to, promoteTo = false){\n    let fen_history = [...this.state.fen_history]; \n    let history = [...this.state.history];\n    let options = {from, to}; \n\n    if(this.state.selected_move<this.state.history.length){ // Override if a previous move was selected\n      history = history.slice(0, this.state.selected_move);\n      fen_history = fen_history.slice(0, this.state.selected_move+1); \n    }\n\n    if(promoteTo) options.promotion = promoteTo;\n    else{\n      if(this.isOnPromotionSquare(to, chess.turn()) && chess.get(from).type == 'p'){\n        // options.promotion = 'q';\n        if(this.state.promotion.from==null){ \n          this.openPromotionPrompt(from, to, this.colorConv(chess.turn()), this.newMove);\n          return;\n        }else{\n          options.promotion = promoteTo;\n        } \n      }\n    }\n\n    let res = chess.move(options);\n    \n    if(res){\n      fen_history.push(chess.fen());\n      history.push(res.san);\n      if(chess.result()){\n        this.setState(prevState => (\n          {selected_move: prevState.selected_move+1, history, fen_history, result: chess.result()}\n        ));\n        return; \n      }\n      this.setState(prevState => (\n        {selected_move: prevState.selected_move+1, history, fen_history}\n      ));\n      return res.san; \n    }else{\n      console.log('Error making new move: '+res);\n      return false; \n    } \n  }\n\n  // switchColor = () => this.state.colorToMove === 1 ? -1 : 1;\n\n  /*\n  ----------------------------------------------------------------------------------------------------------------------------------\n  ----------------------------------------------------         DOM            ------------------------------------------------------\n  ----------------------------------------------------------------------------------------------------------------------------------\n  */\n\n\n  highlightMoves(piece){\n    chess.moves({square:piece, verbose:true}).forEach(move=>{\n      document.getElementById(move.to).classList.add('moveable');\n    });\n  }\n\n  highlightSquare(square){\n    document.getElementById(square).classList.add('highlighted');\n  }\n\n  removeClassFromAll = remove => {\n    document.querySelectorAll('.'+remove).forEach(el=>el.classList.remove(remove));\n  }\n\n  removeClassesFromAll = (...classes) => {\n    classes.forEach(e => document.querySelectorAll('.'+e).forEach(el=>el.classList.remove(e)));\n  }\n\n  hideBoardControl = () => {\n     this.removeClassFromAll('attacked');\n  }\n\n  showBoardControl = (control_flag=undefined) => { \n    let showControl = (control_flag===undefined) ? this.state.showControl : control_flag;\n    this.removeClassesFromAll('attacked', 'kingcheck');\n    if(chess.in_check()){\n      let square = document.getElementById(chess.get_king());\n      square.classList.add('kingcheck');\n\n      if(!showControl) return; \n      let controlClass = `--${chess.turn()}-control}`;\n      chess.moves({verbose:true}).forEach(move=>{\n        let dom = document.getElementById(move.to);\n        dom.classList.add('attacked');\n        dom.style.setProperty(controlClass, '100%');\n      });\n      return;\n\n    }\n    if(!showControl) return; \n    let control = chess.defended_pieces_all(true, true, false);\n\n    for(let [square, value] of Object.entries(control)){\n      if(value.w>0||value.b>0){ \n        let dom = document.getElementById(square);\n        dom.classList.add('attacked');\n        if(this.state.weighted) dom.style.setProperty('--separator', this.getWeightedRatio(value.w,value.b)+'%');\n        // else dom.style.setProperty('--separator', this.getRatio(value.w,value.b)+'%');\n        // let ratio = this.getWeightedRatio(value.w,value.b);\n        let ratio = this.getRatio(value.w,value.b);\n\n        dom.style.setProperty('--w-control', ratio+'%');\n        dom.style.setProperty('--b-control', 100-ratio+'%');\n        // dom.style.setProperty('--trial-top', 100-ratio+'%');\n      }\n    } \n  }\n\n\n\n  /*showBoardControl_old = () => { \n    let squares = this.initSquares();\n    let turn = chess.turn(); \n    let other_turn = this.getOtherChessColor();\n\n    let defends_other = chess.defended_pieces(other_turn, true, true);\n    // console.log('defends_other', defends_other);\n    // console.log(chess.boardFull());\n\n    let defends = chess.defended_pieces(turn, true, true);\n    // console.log('defends', defends);\n\n\n    // Defends = object, only own color  \n    // keys: defended squares/pieces  (format e.g. 'bc8' or 'c2')\n    // values: defending square/piece (format e.g. 'pd7')\n    for (let [key, value] of Object.entries(defends)){ \n      key = this.cleanUpSquare(key);  //check whether key is square or piece \n      if(value.length>0){\n        try{\n          // squares[key][turn] += value.filter(move => !this.moveIsPawnMove(move)).length;\n          // squares[square][turn].push(value.map(e=>e.slice(1)));\n          squares[key][turn]+=value.length;\n        }catch(err){\n          console.error('Error', err);\n          console.log(` Vars: value: ${value}, key: ${key} `);\n        }\n      } \n    } \n    for (let [key, value] of Object.entries(defends_other)){\n      // console.log(`value: ${value}, key: ${key}, moveIsPawnMove: ${this.moveIsPawnMove(value)}`);\n      key = this.cleanUpSquare(key);  //check whether key is square or piece \n      if(value.length>0){\n        // let square = key.slice(1);\n        try{\n          // squares[key][other_turn] += value.filter(move => !this.moveIsPawnMove(move)).length;\n          // squares[square][turn].push(value.map(e=>e.slice(1)));\n          squares[key][other_turn]+=value.length;\n        }catch(err){\n          console.error('Error', err);\n          console.log(` Vars: value: ${value}, key: ${key} `);\n        }\n      } \n    }\n    // console.log(squares);\n\n    this.removeClassFromAll('attacked');\n    for (let [square, value] of Object.entries(squares)) {\n      if(value.w>0||value.b>0){ \n        let dom = document.getElementById(square);\n        dom.classList.add('attacked');\n        dom.style.setProperty('--separator', this.getRatio(value.w,value.b)+'%');\n      }\n    }\n  }*/\n\n  loadGames(text, separator){\n    let split = text.split(separator);\n\n    this.loadPGN(split[0]);\n  }\n\n  \n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}