{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _Reflect$construct = require(\"@babel/runtime-corejs2/core-js/reflect/construct\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports[\"default\"] = exports.Rook = exports.Queen = exports.Pawn = exports.Knight = exports.King = exports.Bishop = exports.Piece = exports.SideType = exports.PieceType = void 0;\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/getPrototypeOf\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/createClass\"));\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = (0, _getPrototypeOf2[\"default\"])(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor;\n      result = _Reflect$construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return (0, _possibleConstructorReturn2[\"default\"])(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false;\n  if (_Reflect$construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(_Reflect$construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n\tThe Piece is a definition of a piece that can be played on the board.\n\n\tThe uid property of the Piece is not intended to be durable across\n\tsessions, but only to uniquely identify the piece on the board. Right\n\tnow the property is used by board.getSquareByPiece as pieces are not\n\totherwise uniquely identifiable (i.e. getSquareByPiece(Pawn) would\n\treturn the first square found with a Pawn on it rather than the exact\n\tsquare intended). Additionally, the uid of the Piece is used in\n\tBoardValidation to ensure there is correllation between the piece and\n\tvalid squares to which the piece can move.\n*/\n// types\n\n\nvar PieceType = {\n  Bishop: 'bishop',\n  King: 'king',\n  Knight: 'knight',\n  Pawn: 'pawn',\n  Queen: 'queen',\n  Rook: 'rook'\n};\nexports.PieceType = PieceType;\nvar SideType = {\n  Black: {\n    name: 'black'\n  },\n  White: {\n    name: 'white'\n  }\n};\nexports.SideType = SideType;\n\nvar Piece = /*#__PURE__*/function () {\n  function Piece(side, notation) {\n    (0, _classCallCheck2[\"default\"])(this, Piece);\n    this.moveCount = 0;\n    this.notation = notation;\n    this.side = side;\n    this.type = null;\n  }\n\n  (0, _createClass2[\"default\"])(Piece, null, [{\n    key: \"createBishop\",\n    value: function createBishop(side) {\n      return new Bishop(side);\n    }\n  }, {\n    key: \"createKing\",\n    value: function createKing(side) {\n      return new King(side);\n    }\n  }, {\n    key: \"createKnight\",\n    value: function createKnight(side) {\n      return new Knight(side);\n    }\n  }, {\n    key: \"createPawn\",\n    value: function createPawn(side) {\n      return new Pawn(side);\n    }\n  }, {\n    key: \"createQueen\",\n    value: function createQueen(side) {\n      return new Queen(side);\n    }\n  }, {\n    key: \"createRook\",\n    value: function createRook(side) {\n      return new Rook(side);\n    }\n  }]);\n  return Piece;\n}();\n\nexports.Piece = Piece;\n\nvar Bishop = /*#__PURE__*/function (_Piece) {\n  (0, _inherits2[\"default\"])(Bishop, _Piece);\n\n  var _super = _createSuper(Bishop);\n\n  function Bishop(side) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, Bishop);\n    _this = _super.call(this, side, 'B');\n    _this.type = PieceType.Bishop;\n    return _this;\n  }\n\n  return Bishop;\n}(Piece);\n\nexports.Bishop = Bishop;\n\nvar King = /*#__PURE__*/function (_Piece2) {\n  (0, _inherits2[\"default\"])(King, _Piece2);\n\n  var _super2 = _createSuper(King);\n\n  function King(side) {\n    var _this2;\n\n    (0, _classCallCheck2[\"default\"])(this, King);\n    _this2 = _super2.call(this, side, 'K');\n    _this2.type = PieceType.King;\n    return _this2;\n  }\n\n  return King;\n}(Piece);\n\nexports.King = King;\n\nvar Knight = /*#__PURE__*/function (_Piece3) {\n  (0, _inherits2[\"default\"])(Knight, _Piece3);\n\n  var _super3 = _createSuper(Knight);\n\n  function Knight(side) {\n    var _this3;\n\n    (0, _classCallCheck2[\"default\"])(this, Knight);\n    _this3 = _super3.call(this, side, 'N');\n    _this3.type = PieceType.Knight;\n    return _this3;\n  }\n\n  return Knight;\n}(Piece);\n\nexports.Knight = Knight;\n\nvar Pawn = /*#__PURE__*/function (_Piece4) {\n  (0, _inherits2[\"default\"])(Pawn, _Piece4);\n\n  var _super4 = _createSuper(Pawn);\n\n  function Pawn(side) {\n    var _this4;\n\n    (0, _classCallCheck2[\"default\"])(this, Pawn);\n    _this4 = _super4.call(this, side, '');\n    _this4.type = PieceType.Pawn;\n    return _this4;\n  }\n\n  return Pawn;\n}(Piece);\n\nexports.Pawn = Pawn;\n\nvar Queen = /*#__PURE__*/function (_Piece5) {\n  (0, _inherits2[\"default\"])(Queen, _Piece5);\n\n  var _super5 = _createSuper(Queen);\n\n  function Queen(side) {\n    var _this5;\n\n    (0, _classCallCheck2[\"default\"])(this, Queen);\n    _this5 = _super5.call(this, side, 'Q');\n    _this5.type = PieceType.Queen;\n    return _this5;\n  }\n\n  return Queen;\n}(Piece);\n\nexports.Queen = Queen;\n\nvar Rook = /*#__PURE__*/function (_Piece6) {\n  (0, _inherits2[\"default\"])(Rook, _Piece6);\n\n  var _super6 = _createSuper(Rook);\n\n  function Rook(side) {\n    var _this6;\n\n    (0, _classCallCheck2[\"default\"])(this, Rook);\n    _this6 = _super6.call(this, side, 'R');\n    _this6.type = PieceType.Rook;\n    return _this6;\n  }\n\n  return Rook;\n}(Piece);\n\nexports.Rook = Rook;\nvar _default = {\n  Piece: Piece,\n  PieceType: PieceType,\n  SideType: SideType\n};\nexports[\"default\"] = _default;","map":{"version":3,"sources":["piece.js"],"names":["PieceType","Bishop","King","Knight","Pawn","Queen","Rook","SideType","Black","name","White","Piece","side"],"mappings":"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","sourcesContent":["/**\n\tThe Piece is a definition of a piece that can be played on the board.\n\n\tThe uid property of the Piece is not intended to be durable across\n\tsessions, but only to uniquely identify the piece on the board. Right\n\tnow the property is used by board.getSquareByPiece as pieces are not\n\totherwise uniquely identifiable (i.e. getSquareByPiece(Pawn) would\n\treturn the first square found with a Pawn on it rather than the exact\n\tsquare intended). Additionally, the uid of the Piece is used in\n\tBoardValidation to ensure there is correllation between the piece and\n\tvalid squares to which the piece can move.\n*/\n\n// types\nexport var PieceType = {\n\tBishop : 'bishop',\n\tKing : 'king',\n\tKnight : 'knight',\n\tPawn : 'pawn',\n\tQueen : 'queen',\n\tRook : 'rook'\n};\n\nexport var SideType = {\n\tBlack : { name : 'black' },\n\tWhite : { name : 'white' }\n};\n\nexport class Piece {\n\tconstructor (side, notation) {\n\t\tthis.moveCount = 0;\n\t\tthis.notation = notation;\n\t\tthis.side = side;\n\t\tthis.type = null;\n\t}\n\n\tstatic createBishop (side) {\n\t\treturn new Bishop(side);\n\t}\n\n\tstatic createKing (side) {\n\t\treturn new King(side);\n\t}\n\n\tstatic createKnight (side) {\n\t\treturn new Knight(side);\n\t}\n\n\tstatic createPawn (side) {\n\t\treturn new Pawn(side);\n\t}\n\n\tstatic createQueen (side) {\n\t\treturn new Queen(side);\n\t}\n\n\tstatic createRook (side) {\n\t\treturn new Rook(side);\n\t}\n}\n\nexport class Bishop extends Piece {\n\tconstructor (side) {\n\t\tsuper(side, 'B');\n\n\t\tthis.type = PieceType.Bishop;\n\t}\n}\n\nexport class King extends Piece {\n\tconstructor (side) {\n\t\tsuper(side, 'K');\n\n\t\tthis.type = PieceType.King;\n\t}\n}\n\nexport class Knight extends Piece {\n\tconstructor (side) {\n\t\tsuper(side, 'N');\n\n\t\tthis.type = PieceType.Knight;\n\t}\n}\n\nexport class Pawn extends Piece {\n\tconstructor (side) {\n\t\tsuper(side, '');\n\n\t\tthis.type = PieceType.Pawn;\n\t}\n}\n\nexport class Queen extends Piece {\n\tconstructor (side) {\n\t\tsuper(side, 'Q');\n\n\t\tthis.type = PieceType.Queen;\n\t}\n}\n\nexport class Rook extends Piece {\n\tconstructor (side) {\n\t\tsuper(side, 'R');\n\n\t\tthis.type = PieceType.Rook;\n\t}\n}\n\nexport default {\n\tPiece,\n\tPieceType,\n\tSideType\n};\n"]},"metadata":{},"sourceType":"script"}