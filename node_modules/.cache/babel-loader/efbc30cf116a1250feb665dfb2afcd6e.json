{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/q/Documents/WebDocuments/ChessReact/chess/src/App.js\";\nimport './App.css';\nimport React, { Component } from 'react'; // import Board from './components/Board/Board';\n\nimport Moves from './components/Moves/Moves';\nimport Square from './components/Square/Square'; // TYPES (negative values for black)\n// PAWN - 1 \n// BISHOP - 2 \n// KNIGHT - 3 \n// ROOK - 4\n// QUEEN - 5 \n// KING - 6 \n\nconst startingPosition = [-4, -2, -3, -5, -6, -3, -2, -4, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 4, 2, 3, 5, 6, 3, 2, 4];\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.populateSquares = position => {\n      let squares = [...this.state.positions[0]]; // position.forEach((item,i)=>{\n      //   squares[i] \n      // });\n\n      console.log(position[0]);\n    };\n\n    this.createSquares = position => {\n      let squares = [];\n      let piece_clicked = this.state.piece_clicked;\n      let click = this.handleClick;\n      let pClick = this.handlePieceClick;\n      let bgs = ['black', 'white'];\n      let tick = 0;\n      let counter = 0;\n      let onDrop = this.dropHandler;\n      position.forEach((square, index) => {\n        squares[index] = /*#__PURE__*/_jsxDEV(Square, {\n          pClick: pClick,\n          index: index,\n          onClick: click,\n          onDrop: onDrop,\n          classes: bgs[tick],\n          piece: square\n        }, 's' + index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 24\n        }, this);\n        counter++;\n        if (counter > 7) counter = 0;else tick = tick === 0 ? 1 : 0;\n      });\n      return squares;\n    };\n\n    this.moveClick = number => {\n      console.log('move clicked', number);\n      this.setState(prevState => ({\n        selectedMove: number\n      }));\n    };\n\n    this.handleClick = e => {\n      console.log(`handleClick, ${e} clicked`);\n      let clicked = this.state.piece_clicked;\n\n      if (clicked !== null) {\n        this.setState({\n          piece_clicked: null\n        }, this.newMove(clicked, e));\n      }\n    };\n\n    this.handlePieceClick = e => {\n      let clicked = this.state.piece_clicked;\n      if (clicked === null) this.setState({\n        piece_clicked: e\n      });else {\n        this.setState({\n          piece_clicked: null\n        }, this.newMove(clicked, e));\n      }\n    };\n\n    this.dropHandler = e => {\n      e.preventDefault();\n      e.target.classList.remove('dragover');\n      let target = e.target.dataset.position;\n      let origin = e.dataTransfer.getData(\"text/plain\");\n      this.newMove(origin, target);\n    };\n\n    this.state = {\n      currentMove: 0,\n      lastMove: null,\n      colorToMove: 1,\n      piece_clicked: null,\n      selectedMove: 0,\n      positions: [startingPosition] // squares: this.initSquares(startingPosition)\n\n    };\n  } // initSquares = (position) => {\n  //   let squares = [];\n  //   let piece_clicked = this.state.piece_clicked;\n  //   let click = this.handleClick;\n  //   let pClick = this.handlePieceClick;\n  //   let bgs = ['black', 'white'];\n  //   let tick = 0;\n  //   let counter = 0; \n  //   let onDrop = this.dropHandler;\n  //   position.forEach((square, index) => {\n  //     squares[index] = <Square key={'s'+index} pClick={pClick} index={index} onClick={click} onDrop={onDrop} classes={bgs[tick]} piece={0} />;\n  //     counter++; \n  //     if(counter>7) counter = 0; \n  //     else tick = (tick===0)? 1 : 0;\n  //   });\n  //   return squares; \n  // }\n\n\n  render() {\n    let position = this.state.positions[this.state.selectedMove];\n    this.populateSquares(position);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board\",\n        children: [\" \", this.createSquares(position), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"moves\",\n        children: [\" \", /*#__PURE__*/_jsxDEV(Moves, {\n          onClick: this.moveClick,\n          lastMove: this.state.lastMove\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 34\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this);\n  }\n\n  switchColor() {\n    return this.state.colorToMove === 1 ? -1 : 1;\n  }\n\n  getColor(square) {\n    return square < 0 ? -1 : 1;\n  }\n\n  hasPiece(square) {\n    return Math.abs(square) > 0;\n  }\n\n  newMove(from, to) {\n    let positions = JSON.parse(JSON.stringify(this.state.positions));\n    let old_position = Array.from(positions[positions.length - 1]);\n    let new_position = Array.from(old_position);\n    if (this.getColor(old_position[from]) !== this.state.colorToMove) return;\n\n    if (this.hasPiece(old_position[to])) {\n      if (this.getColor(old_position[from]) === this.getColor(old_position[to])) return;\n    }\n\n    let moved_piece = old_position[from];\n    new_position[to] = new_position[from];\n    new_position[from] = 0;\n    positions.push(new_position);\n    this.setState(prevState => ({\n      positions: positions,\n      lastMove: [prevState.currentMove, moved_piece, to],\n      currentMove: prevState.currentMove + 1,\n      selectedMove: prevState.selectedMove + 1,\n      colorToMove: this.switchColor()\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/q/Documents/WebDocuments/ChessReact/chess/src/App.js"],"names":["React","Component","Moves","Square","startingPosition","App","constructor","populateSquares","position","squares","state","positions","console","log","createSquares","piece_clicked","click","handleClick","pClick","handlePieceClick","bgs","tick","counter","onDrop","dropHandler","forEach","square","index","moveClick","number","setState","prevState","selectedMove","e","clicked","newMove","preventDefault","target","classList","remove","dataset","origin","dataTransfer","getData","currentMove","lastMove","colorToMove","render","switchColor","getColor","hasPiece","Math","abs","from","to","JSON","parse","stringify","old_position","Array","length","new_position","moved_piece","push"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, { Component } from 'react';\n// import Board from './components/Board/Board';\nimport Moves from './components/Moves/Moves';\nimport Square from './components/Square/Square';\n\n\n// TYPES (negative values for black)\n// PAWN - 1 \n// BISHOP - 2 \n// KNIGHT - 3 \n// ROOK - 4\n// QUEEN - 5 \n// KING - 6 \n\nconst startingPosition = \n[\n-4, -2, -3, -5, -6, -3, -2, -4,\n-1, -1, -1, -1, -1, -1, -1, -1,\n0, 0, 0, 0, 0, 0, 0, 0,\n0, 0, 0, 0, 0, 0, 0, 0,\n0, 0, 0, 0, 0, 0, 0, 0,\n0, 0, 0, 0, 0, 0, 0, 0,\n1, 1, 1, 1, 1, 1, 1, 1,\n4, 2, 3, 5, 6, 3, 2, 4\n];\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      currentMove: 0,\n      lastMove: null,\n      colorToMove: 1,\n      piece_clicked: null,\n      selectedMove: 0,\n      positions: [startingPosition],\n      // squares: this.initSquares(startingPosition)\n    };  \n  }\n\n  // initSquares = (position) => {\n  //   let squares = [];\n  //   let piece_clicked = this.state.piece_clicked;\n  //   let click = this.handleClick;\n  //   let pClick = this.handlePieceClick;\n  //   let bgs = ['black', 'white'];\n  //   let tick = 0;\n  //   let counter = 0; \n  //   let onDrop = this.dropHandler;\n  //   position.forEach((square, index) => {\n  //     squares[index] = <Square key={'s'+index} pClick={pClick} index={index} onClick={click} onDrop={onDrop} classes={bgs[tick]} piece={0} />;\n  //     counter++; \n  //     if(counter>7) counter = 0; \n  //     else tick = (tick===0)? 1 : 0;\n  //   });\n  //   return squares; \n  // }\n\n  populateSquares =  (position) => {\n    let squares = [...this.state.positions[0]];\n    // position.forEach((item,i)=>{\n    //   squares[i] \n    // });\n    console.log(position[0]);\n  }\n\n  createSquares = (position) => {\n    let squares = [];\n    let piece_clicked = this.state.piece_clicked;\n    let click = this.handleClick;\n    let pClick = this.handlePieceClick;\n    let bgs = ['black', 'white'];\n    let tick = 0;\n    let counter = 0; \n    let onDrop = this.dropHandler;\n    position.forEach((square, index) => {\n      squares[index] = <Square key={'s'+index} pClick={pClick} index={index} onClick={click} onDrop={onDrop} classes={bgs[tick]} piece={square} />;\n      counter++; \n      if(counter>7) counter = 0; \n      else tick = (tick===0)? 1 : 0;\n    });\n    return squares; \n  }\n\n  render(){\n    let position = this.state.positions[this.state.selectedMove];\n    this.populateSquares(position);\n    return(\n      <div className='container'>\n        <div className=\"board\"> {this.createSquares(position)} </div>\n        <div className='moves' > <Moves onClick={this.moveClick} lastMove={this.state.lastMove} /> </div>\n      </div> \n    );\n  } \n\n  moveClick = (number) => {\n    console.log('move clicked',number);\n    this.setState(prevState=>({\n      selectedMove: number\n    }));\n  }\n\n  handleClick = (e) => {\n    console.log(`handleClick, ${e} clicked`);\n    let clicked = this.state.piece_clicked; \n    if(clicked!==null){\n      this.setState({piece_clicked: null}, this.newMove(clicked, e));\n    }\n  }\n\n  handlePieceClick = (e) => {\n    let clicked = this.state.piece_clicked; \n    if(clicked===null) this.setState({piece_clicked: e})\n    else{\n      this.setState({piece_clicked: null}, this.newMove(clicked, e));\n    }\n  }\n\n  dropHandler = (e) => {\n    e.preventDefault();\n    e.target.classList.remove('dragover');\n    let target = e.target.dataset.position; \n    let origin = e.dataTransfer.getData(\"text/plain\");\n    this.newMove(origin, target)\n  };\n\n  switchColor(){ return this.state.colorToMove === 1 ? -1 : 1; }\n\n  getColor(square){ return square<0 ? -1 : 1; }\n\n  hasPiece(square){ return Math.abs(square)>0; }\n\n  newMove(from, to){\n    let positions = JSON.parse(JSON.stringify(this.state.positions));\n    let old_position = Array.from(positions[positions.length-1]);\n    let new_position = Array.from(old_position);\n    if(this.getColor(old_position[from])!==this.state.colorToMove) return; \n    if(this.hasPiece(old_position[to])){ \n      if(this.getColor(old_position[from])===this.getColor(old_position[to])) return; \n    }\n    let moved_piece = old_position[from];\n    new_position[to] = new_position[from];\n    new_position[from] = 0;\n\n    positions.push(new_position);\n\n    this.setState(prevState=>({\n      positions: positions,\n      lastMove: [prevState.currentMove, moved_piece, to],\n      currentMove: prevState.currentMove+1,\n      selectedMove: prevState.selectedMove+1,\n      colorToMove: this.switchColor() \n    }));\n  }\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}