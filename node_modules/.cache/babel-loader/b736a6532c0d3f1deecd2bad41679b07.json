{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/q/Documents/WebDocuments/chess/src/App.js\";\nimport './App.css';\nimport React, { Component } from 'react';\nimport Moves from './components/Moves/Moves'; // import Squares from './components/Squares/Squares';\n\nimport Draggable from 'react-draggable';\nimport * as ChessJS from 'chess.js';\nconst Chess = typeof ChessJS === \"function\" ? ChessJS : ChessJS.Chess;\nconst chess = new Chess();\nconst squareID = [\"a8\", \"b8\", \"c8\", \"d8\", \"e8\", \"f8\", \"g8\", \"h8\", \"a7\", \"b7\", \"c7\", \"d7\", \"e7\", \"f7\", \"g7\", \"h7\", \"a6\", \"b6\", \"c6\", \"d6\", \"e6\", \"f6\", \"g6\", \"h6\", \"a5\", \"b5\", \"c5\", \"d5\", \"e5\", \"f5\", \"g5\", \"h5\", \"a4\", \"b4\", \"c4\", \"d4\", \"e4\", \"f4\", \"g4\", \"h4\", \"a3\", \"b3\", \"c3\", \"d3\", \"e3\", \"f3\", \"g3\", \"h3\", \"a2\", \"b2\", \"c2\", \"d2\", \"e2\", \"f2\", \"g2\", \"h2\", \"a1\", \"b1\", \"c1\", \"d1\", \"e1\", \"f1\", \"g1\", \"h1\"]; // console.log(chess.board().flat().reverse());\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.colorConv = color => {\n      return color === 'w' ? 'white' : 'black';\n    };\n\n    this.dragOverHandler = e => {\n      e.preventDefault(e);\n      requestAnimationFrame(function () {\n        e.target.classList.add('dragover');\n      });\n    };\n\n    this.dragLeaveHandler = e => {\n      e.preventDefault();\n      requestAnimationFrame(function () {\n        e.target.classList.remove('dragover');\n      });\n    };\n\n    this.handleEvalClick = () => {\n      // console.log(this.state.history);\n      // fetch('https://www.chessgames.com/perl/nph-chesspgn?text=1&gid=2021103')\n      //   .then(response => response.json())\n      //   .then(response => console.log(response));\n      let pgn = \"1. d4 d5 2. c4 c6 3. Nf3 Nf6 4. Nc3 e6 5. e3 Nbd7 6. Bd3 dxc4 7. Bxc4 b5 8. Bd3 Bd6 9. O-O O-O 10. Qc2 Bb7 11. a3 Rc8 12. Ng5 c5 13. Nxh7 Ng4 14. f4 cxd4 15. exd4 Bc5 16. Be2 Nde5 17. Bxg4 Bxd4+ 18. Kh1 Nxg4 19. Nxf8 f5 20. Ng6 Qf6 21. h3 Qxg6 22. Qe2 Qh5 23. Qd3 Be3 0-1\";\n      this.loadPGN(pgn);\n    };\n\n    this.flipClick = () => {\n      this.setState({\n        flipped: true\n      });\n    };\n\n    this.dragStartHandler = (e, i) => {\n      e.dataTransfer.effectAllowed = \"all\";\n      e.dataTransfer.dropEffect = \"move\";\n      e.dataTransfer.setData(\"text/plain\", i);\n      requestAnimationFrame(function () {\n        e.target.classList.add('hide');\n      });\n      this.highlightMoves(i);\n    };\n\n    this.dragEndHandler = e => {\n      e.preventDefault();\n      requestAnimationFrame(function () {\n        e.target.classList.remove('hide');\n      });\n    };\n\n    this.dropHandler = (e, target) => {\n      e.preventDefault();\n      this.removeClassFromAll('dragover', 'moveable');\n      let origin = e.dataTransfer.getData('text/plain');\n      this.newMove(origin, target);\n    };\n\n    this.moveClick = number => {\n      console.log('move clicked', number);\n      console.log(this.state.fen_history); // chess.load(this.state.fen_history[number]);\n      // this.setState({colorToMove: chess.turn(), board: chess.board().flat()});\n    };\n\n    this.handleClick = square => {\n      let clicked = this.state.piece_clicked;\n\n      if (clicked) {\n        if (this.newMove(clicked, square)) {\n          this.removeClassesFromAll('moveable', 'active');\n          this.setState({\n            piece_clicked: false\n          });\n        } else {// this.removeClassFromAll('active'); \n          // this.setState({piece_clicked: false })\n        }\n      }\n    };\n\n    this.squareColorConv = color => {\n      if (color === 'light') return 'w';else if (color === 'dark') return 'b';\n    };\n\n    this.handlePieceClick = square => {\n      let clicked = this.state.piece_clicked;\n\n      if (!clicked) {\n        if (this.pieceIsTurnColor(square)) {\n          document.getElementById(square).classList.add('active');\n          this.highlightMoves(square);\n          this.setState({\n            piece_clicked: square\n          });\n        }\n      } else {\n        this.removeClassesFromAll('active', 'moveable');\n\n        if (this.squaresOfSameColor(square, clicked)) {\n          // Wenn selbfarbiges, anderes piece gedrÃ¼ckt \n          document.getElementById(square).classList.add('active');\n          this.highlightMoves(square);\n          this.setState({\n            piece_clicked: square\n          });\n        } else {\n          // Capture \n          if (this.newMove(clicked, square)) {\n            this.removeClassesFromAll('active', 'moveable');\n            this.setState({\n              piece_clicked: null\n            });\n          }\n        }\n      }\n    };\n\n    this.removeClassFromAll = remove => {\n      document.querySelectorAll('.' + remove).forEach(el => el.classList.remove(remove));\n    };\n\n    this.removeClassesFromAll = (...classes) => {\n      classes.forEach(e => document.querySelectorAll('.' + e).forEach(el => el.classList.remove(e)));\n    };\n\n    this.state = {\n      colorToMove: chess.turn(),\n      piece_clicked: false,\n      board: chess.board().flat(),\n      history: [],\n      // single moves \n      fen_history: [],\n      // moves in fen \n      flipped: false,\n      loaded_game: null\n    };\n  }\n\n  render() {\n    // let arr = this.state.flipped ? chess.board().flat().reverse() : chess.board().flat();\n    let arr = this.state.board;\n    let squares_ids = this.state.flipped ? squareID.reverse() : squareID;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board\",\n        children: arr.map((square, i) => {\n          return square ? /*#__PURE__*/_jsxDEV(\"div\", {\n            onDragOver: this.dragOverHandler,\n            onDragLeave: this.dragLeaveHandler,\n            onDrop: e => this.dropHandler(e, squareID[i]),\n            id: squares_ids[i],\n            className: \"square\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `piece ${this.colorConv(square.color)} ${square.type}`,\n              draggable: \"true\",\n              \"data-position\": squares_ids[i],\n              onDragStart: e => this.dragStartHandler(e, squares_ids[i]),\n              onDragEnd: () => this.dragEndHandler,\n              onClick: () => this.handlePieceClick(squares_ids[i])\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 19\n            }, this)\n          }, 'square' + i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            id: squares_ids[i],\n            onDragOver: this.dragOverHandler,\n            onDragLeave: this.dragLeaveHandler,\n            onClick: () => this.handleClick(squares_ids[i]),\n            onDrop: e => this.dropHandler(e, squares_ids[i]),\n            className: \"square\"\n          }, 'square' + i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"moves\",\n        children: /*#__PURE__*/_jsxDEV(Moves, {\n          onClick: this.moveClick,\n          moves: this.state.history,\n          colorToMove: this.state.colorToMove,\n          evalClick: this.handleEvalClick,\n          flip: this.flipClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this);\n  }\n\n  loadPGN(pgn) {\n    let positions = [];\n    let r = chess.load_pgn(pgn);\n\n    if (r) {\n      let history = chess.history();\n      chess.reset();\n      let fen_history = [chess.fen()];\n      history.forEach(e => {\n        chess.move(e);\n        fen_history.push(chess.fen());\n      }); // let fen_history = history.map(e => {\n      //   chess.move(e);\n      //   return chess.fen();   \n      // });\n\n      chess.load(fen_history[0]);\n      this.setState({\n        history,\n        fen_history,\n        loaded_game: pgn\n      });\n    } else alert(\"error\");\n  }\n\n  getColorToMoveByMoveNumber(number) {\n    return number % 2 === 0 ? 1 : -1;\n  }\n\n  squaresOfSameColor(one, two) {\n    return chess.get(one).color === chess.get(two).color;\n  }\n\n  highlightMoves(piece) {\n    chess.moves({\n      square: piece,\n      verbose: true\n    }).forEach(move => {\n      document.getElementById(move.to).classList.add('moveable');\n    });\n  }\n\n  pieceIsTurnColor(piece) {\n    return chess.get(piece).color === chess.turn();\n  }\n\n  newMove(from, to) {\n    let res = chess.move({\n      from,\n      to\n    });\n\n    if (res) {\n      let fen_history = [...this.state.fen_history];\n      fen_history.push(chess.fen());\n      this.setState({\n        history: chess.history(),\n        colorToMove: chess.turn(),\n        fen_history,\n        board: chess.board().flat()\n      });\n      return res.san;\n    } else return false;\n  }\n\n  switchColor() {\n    return this.state.colorToMove === 1 ? -1 : 1;\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/q/Documents/WebDocuments/chess/src/App.js"],"names":["React","Component","Moves","Draggable","ChessJS","Chess","chess","squareID","App","constructor","colorConv","color","dragOverHandler","e","preventDefault","requestAnimationFrame","target","classList","add","dragLeaveHandler","remove","handleEvalClick","pgn","loadPGN","flipClick","setState","flipped","dragStartHandler","i","dataTransfer","effectAllowed","dropEffect","setData","highlightMoves","dragEndHandler","dropHandler","removeClassFromAll","origin","getData","newMove","moveClick","number","console","log","state","fen_history","handleClick","square","clicked","piece_clicked","removeClassesFromAll","squareColorConv","handlePieceClick","pieceIsTurnColor","document","getElementById","squaresOfSameColor","querySelectorAll","forEach","el","classes","colorToMove","turn","board","flat","history","loaded_game","render","arr","squares_ids","reverse","map","type","positions","r","load_pgn","reset","fen","move","push","load","alert","getColorToMoveByMoveNumber","one","two","get","piece","moves","verbose","to","from","res","san","switchColor"],"mappings":";;AAAA,OAAO,WAAP;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,0BAAlB,C,CACA;;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,OAAO,KAAKC,OAAZ,MAAyB,UAAzB;AACA,MAAMC,KAAK,GAAG,OAAOD,OAAP,KAAmB,UAAnB,GAAgCA,OAAhC,GAA0CA,OAAO,CAACC,KAAhE;AACA,MAAMC,KAAK,GAAG,IAAID,KAAJ,EAAd;AAEA,MAAME,QAAQ,GAAG,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,IAA/B,EAAqC,IAArC,EAA2C,IAA3C,EAAiD,IAAjD,EAAuD,IAAvD,EAA6D,IAA7D,EAAmE,IAAnE,EAAyE,IAAzE,EAA+E,IAA/E,EAAqF,IAArF,EAA2F,IAA3F,EAAiG,IAAjG,EAAuG,IAAvG,EAA6G,IAA7G,EAAmH,IAAnH,EAAyH,IAAzH,EAA+H,IAA/H,EAAqI,IAArI,EAA2I,IAA3I,EAAiJ,IAAjJ,EAAuJ,IAAvJ,EAA6J,IAA7J,EAAmK,IAAnK,EAAyK,IAAzK,EAA+K,IAA/K,EAAqL,IAArL,EAA2L,IAA3L,EAAiM,IAAjM,EAAuM,IAAvM,EAA6M,IAA7M,EAAmN,IAAnN,EAAyN,IAAzN,EAA+N,IAA/N,EAAqO,IAArO,EAA2O,IAA3O,EAAiP,IAAjP,EAAuP,IAAvP,EAA6P,IAA7P,EAAmQ,IAAnQ,EAAyQ,IAAzQ,EAA+Q,IAA/Q,EAAqR,IAArR,EAA2R,IAA3R,EAAiS,IAAjS,EAAuS,IAAvS,EAA6S,IAA7S,EAAmT,IAAnT,EAAyT,IAAzT,EAA+T,IAA/T,EAAqU,IAArU,EAA2U,IAA3U,EAAiV,IAAjV,EAAuV,IAAvV,EAA6V,IAA7V,EAAmW,IAAnW,EAAyW,IAAzW,EAA+W,IAA/W,EAAqX,IAArX,EAA2X,IAA3X,CAAjB,C,CACA;;AAEA,MAAMC,GAAN,SAAkBP,SAAlB,CAA4B;AAC1BQ,EAAAA,WAAW,GAAE;AACX;;AADW,SAabC,SAba,GAaDC,KAAK,IAAI;AACnB,aAAOA,KAAK,KAAG,GAAR,GAAc,OAAd,GAAwB,OAA/B;AACD,KAfY;;AAAA,SAqEbC,eArEa,GAqEMC,CAAD,IAAO;AACvBA,MAAAA,CAAC,CAACC,cAAF,CAAiBD,CAAjB;AACAE,MAAAA,qBAAqB,CAAC,YAAY;AAChCF,QAAAA,CAAC,CAACG,MAAF,CAASC,SAAT,CAAmBC,GAAnB,CAAuB,UAAvB;AACD,OAFoB,CAArB;AAGD,KA1EY;;AAAA,SA4EbC,gBA5Ea,GA4EON,CAAD,IAAO;AACxBA,MAAAA,CAAC,CAACC,cAAF;AACAC,MAAAA,qBAAqB,CAAC,YAAY;AAChCF,QAAAA,CAAC,CAACG,MAAF,CAASC,SAAT,CAAmBG,MAAnB,CAA0B,UAA1B;AACD,OAFoB,CAArB;AAGD,KAjFY;;AAAA,SAmFbC,eAnFa,GAmFK,MAAM;AACtB;AAEA;AACA;AACA;AACA,UAAIC,GAAG,GAAG,iRAAV;AACA,WAAKC,OAAL,CAAaD,GAAb;AACD,KA3FY;;AAAA,SAkHbE,SAlHa,GAkHD,MAAK;AACf,WAAKC,QAAL,CAAc;AAACC,QAAAA,OAAO,EAAC;AAAT,OAAd;AACD,KApHY;;AAAA,SAwHbC,gBAxHa,GAwHM,CAACd,CAAD,EAAIe,CAAJ,KAAU;AAC3Bf,MAAAA,CAAC,CAACgB,YAAF,CAAeC,aAAf,GAA+B,KAA/B;AACAjB,MAAAA,CAAC,CAACgB,YAAF,CAAeE,UAAf,GAA4B,MAA5B;AACAlB,MAAAA,CAAC,CAACgB,YAAF,CAAeG,OAAf,CAAuB,YAAvB,EAAqCJ,CAArC;AACAb,MAAAA,qBAAqB,CAAC,YAAY;AAChCF,QAAAA,CAAC,CAACG,MAAF,CAASC,SAAT,CAAmBC,GAAnB,CAAuB,MAAvB;AACD,OAFoB,CAArB;AAGA,WAAKe,cAAL,CAAoBL,CAApB;AACD,KAhIY;;AAAA,SAkIbM,cAlIa,GAkIKrB,CAAD,IAAM;AACrBA,MAAAA,CAAC,CAACC,cAAF;AACAC,MAAAA,qBAAqB,CAAC,YAAY;AAC9BF,QAAAA,CAAC,CAACG,MAAF,CAASC,SAAT,CAAmBG,MAAnB,CAA0B,MAA1B;AACD,OAFkB,CAArB;AAGD,KAvIY;;AAAA,SAyIbe,WAzIa,GAyIC,CAACtB,CAAD,EAAIG,MAAJ,KAAe;AAC3BH,MAAAA,CAAC,CAACC,cAAF;AACA,WAAKsB,kBAAL,CAAwB,UAAxB,EAAoC,UAApC;AACA,UAAIC,MAAM,GAAGxB,CAAC,CAACgB,YAAF,CAAeS,OAAf,CAAuB,YAAvB,CAAb;AACA,WAAKC,OAAL,CAAaF,MAAb,EAAqBrB,MAArB;AACD,KA9IY;;AAAA,SAoJbwB,SApJa,GAoJAC,MAAD,IAAY;AACtBC,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA2BF,MAA3B;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAL,CAAWC,WAAvB,EAFsB,CAGtB;AACA;AACD,KAzJY;;AAAA,SA2JbC,WA3Ja,GA2JEC,MAAD,IAAY;AACxB,UAAIC,OAAO,GAAG,KAAKJ,KAAL,CAAWK,aAAzB;;AACA,UAAGD,OAAH,EAAW;AACT,YAAG,KAAKT,OAAL,CAAaS,OAAb,EAAsBD,MAAtB,CAAH,EAAiC;AAC/B,eAAKG,oBAAL,CAA0B,UAA1B,EAAsC,QAAtC;AACA,eAAKzB,QAAL,CAAc;AAACwB,YAAAA,aAAa,EAAE;AAAhB,WAAd;AACD,SAHD,MAGK,CACH;AACA;AACD;AACF;AACF,KAtKY;;AAAA,SAwKbE,eAxKa,GAwKKxC,KAAK,IAAI;AACzB,UAAGA,KAAK,KAAG,OAAX,EAAoB,OAAO,GAAP,CAApB,KACK,IAAGA,KAAK,KAAG,MAAX,EAAmB,OAAO,GAAP;AACzB,KA3KY;;AAAA,SAuLbyC,gBAvLa,GAuLOL,MAAD,IAAY;AAC7B,UAAIC,OAAO,GAAG,KAAKJ,KAAL,CAAWK,aAAzB;;AACA,UAAG,CAACD,OAAJ,EAAY;AACV,YAAG,KAAKK,gBAAL,CAAsBN,MAAtB,CAAH,EAAiC;AAC/BO,UAAAA,QAAQ,CAACC,cAAT,CAAwBR,MAAxB,EAAgC9B,SAAhC,CAA0CC,GAA1C,CAA8C,QAA9C;AACA,eAAKe,cAAL,CAAoBc,MAApB;AACA,eAAKtB,QAAL,CAAc;AAACwB,YAAAA,aAAa,EAAEF;AAAhB,WAAd;AACD;AACF,OAND,MAMK;AACH,aAAKG,oBAAL,CAA0B,QAA1B,EAAoC,UAApC;;AACA,YAAG,KAAKM,kBAAL,CAAwBT,MAAxB,EAAgCC,OAAhC,CAAH,EAA4C;AAAE;AAC1CM,UAAAA,QAAQ,CAACC,cAAT,CAAwBR,MAAxB,EAAgC9B,SAAhC,CAA0CC,GAA1C,CAA8C,QAA9C;AACA,eAAKe,cAAL,CAAoBc,MAApB;AACA,eAAKtB,QAAL,CAAc;AAACwB,YAAAA,aAAa,EAAEF;AAAhB,WAAd;AACH,SAJD,MAIK;AAAE;AACL,cAAG,KAAKR,OAAL,CAAaS,OAAb,EAAsBD,MAAtB,CAAH,EAAiC;AAC/B,iBAAKG,oBAAL,CAA0B,QAA1B,EAAoC,UAApC;AACA,iBAAKzB,QAAL,CAAc;AAACwB,cAAAA,aAAa,EAAE;AAAhB,aAAd;AACD;AACF;AACF;AACF,KA5MY;;AAAA,SA4Nbb,kBA5Na,GA4NQhB,MAAM,IAAI;AAC7BkC,MAAAA,QAAQ,CAACG,gBAAT,CAA0B,MAAIrC,MAA9B,EAAsCsC,OAAtC,CAA8CC,EAAE,IAAEA,EAAE,CAAC1C,SAAH,CAAaG,MAAb,CAAoBA,MAApB,CAAlD;AACD,KA9NY;;AAAA,SAgOb8B,oBAhOa,GAgOU,CAAC,GAAGU,OAAJ,KAAgB;AACrCA,MAAAA,OAAO,CAACF,OAAR,CAAgB7C,CAAC,IAAIyC,QAAQ,CAACG,gBAAT,CAA0B,MAAI5C,CAA9B,EAAiC6C,OAAjC,CAAyCC,EAAE,IAAEA,EAAE,CAAC1C,SAAH,CAAaG,MAAb,CAAoBP,CAApB,CAA7C,CAArB;AACD,KAlOY;;AAEX,SAAK+B,KAAL,GAAa;AACXiB,MAAAA,WAAW,EAAEvD,KAAK,CAACwD,IAAN,EADF;AAEXb,MAAAA,aAAa,EAAE,KAFJ;AAGXc,MAAAA,KAAK,EAAEzD,KAAK,CAACyD,KAAN,GAAcC,IAAd,EAHI;AAIXC,MAAAA,OAAO,EAAE,EAJE;AAIE;AACbpB,MAAAA,WAAW,EAAE,EALF;AAKM;AACjBnB,MAAAA,OAAO,EAAE,KANE;AAOXwC,MAAAA,WAAW,EAAE;AAPF,KAAb;AASD;;AAMDC,EAAAA,MAAM,GAAE;AACN;AACA,QAAIC,GAAG,GAAG,KAAKxB,KAAL,CAAWmB,KAArB;AACA,QAAIM,WAAW,GAAG,KAAKzB,KAAL,CAAWlB,OAAX,GAAqBnB,QAAQ,CAAC+D,OAAT,EAArB,GAA0C/D,QAA5D;AACA,wBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA,kBAEI6D,GAAG,CAACG,GAAJ,CAAQ,CAACxB,MAAD,EAASnB,CAAT,KAAa;AACnB,iBAAOmB,MAAM,gBAEb;AACE,YAAA,UAAU,EAAE,KAAKnC,eADnB;AAEE,YAAA,WAAW,EAAE,KAAKO,gBAFpB;AAGE,YAAA,MAAM,EAAGN,CAAD,IAAK,KAAKsB,WAAL,CAAiBtB,CAAjB,EAAoBN,QAAQ,CAACqB,CAAD,CAA5B,CAHf;AAIE,YAAA,EAAE,EAAEyC,WAAW,CAACzC,CAAD,CAJjB;AAME,YAAA,SAAS,EAAC,QANZ;AAAA,mCAOI;AACE,cAAA,SAAS,EAAG,SAAQ,KAAKlB,SAAL,CAAeqC,MAAM,CAACpC,KAAtB,CAA6B,IAAGoC,MAAM,CAACyB,IAAK,EADlE;AAEE,cAAA,SAAS,EAAC,MAFZ;AAGE,+BAAeH,WAAW,CAACzC,CAAD,CAH5B;AAIE,cAAA,WAAW,EAAGf,CAAD,IAAK,KAAKc,gBAAL,CAAsBd,CAAtB,EAAyBwD,WAAW,CAACzC,CAAD,CAApC,CAJpB;AAI8D,cAAA,SAAS,EAAE,MAAI,KAAKM,cAJlF;AAKE,cAAA,OAAO,EAAE,MAAI,KAAKkB,gBAAL,CAAsBiB,WAAW,CAACzC,CAAD,CAAjC;AALf;AAAA;AAAA;AAAA;AAAA;AAPJ,aAKO,WAASA,CALhB;AAAA;AAAA;AAAA;AAAA,kBAFa,gBAkBb;AACE,YAAA,EAAE,EAAEyC,WAAW,CAACzC,CAAD,CADjB;AAEE,YAAA,UAAU,EAAE,KAAKhB,eAFnB;AAGE,YAAA,WAAW,EAAE,KAAKO,gBAHpB;AAIE,YAAA,OAAO,EAAE,MAAI,KAAK2B,WAAL,CAAiBuB,WAAW,CAACzC,CAAD,CAA5B,CAJf;AAKE,YAAA,MAAM,EAAGf,CAAD,IAAK,KAAKsB,WAAL,CAAiBtB,CAAjB,EAAoBwD,WAAW,CAACzC,CAAD,CAA/B,CALf;AAOE,YAAA,SAAS,EAAC;AAPZ,aAMO,WAASA,CANhB;AAAA;AAAA;AAAA;AAAA,kBAlBA;AA2BH,SA5BC;AAFJ;AAAA;AAAA;AAAA;AAAA,cADF,eAkCA;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA,+BACE,QAAC,KAAD;AACE,UAAA,OAAO,EAAE,KAAKY,SADhB;AAEE,UAAA,KAAK,EAAE,KAAKI,KAAL,CAAWqB,OAFpB;AAGE,UAAA,WAAW,EAAE,KAAKrB,KAAL,CAAWiB,WAH1B;AAIE,UAAA,SAAS,EAAE,KAAKxC,eAJlB;AAKE,UAAA,IAAI,EAAE,KAAKG;AALb;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAlCA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AA8CD;;AA0BDD,EAAAA,OAAO,CAACD,GAAD,EAAK;AACV,QAAImD,SAAS,GAAG,EAAhB;AACA,QAAIC,CAAC,GAAGpE,KAAK,CAACqE,QAAN,CAAerD,GAAf,CAAR;;AACA,QAAGoD,CAAH,EAAK;AACH,UAAIT,OAAO,GAAG3D,KAAK,CAAC2D,OAAN,EAAd;AACA3D,MAAAA,KAAK,CAACsE,KAAN;AACA,UAAI/B,WAAW,GAAG,CAACvC,KAAK,CAACuE,GAAN,EAAD,CAAlB;AACAZ,MAAAA,OAAO,CAACP,OAAR,CAAgB7C,CAAC,IAAE;AACjBP,QAAAA,KAAK,CAACwE,IAAN,CAAWjE,CAAX;AACAgC,QAAAA,WAAW,CAACkC,IAAZ,CAAiBzE,KAAK,CAACuE,GAAN,EAAjB;AACD,OAHD,EAJG,CAQH;AACA;AACA;AACA;;AACAvE,MAAAA,KAAK,CAAC0E,IAAN,CAAWnC,WAAW,CAAC,CAAD,CAAtB;AACA,WAAKpB,QAAL,CAAc;AAACwC,QAAAA,OAAD;AAAUpB,QAAAA,WAAV;AAAuBqB,QAAAA,WAAW,EAAE5C;AAApC,OAAd;AAED,KAfD,MAeM2D,KAAK,CAAC,OAAD,CAAL;AACP;;AAgCDC,EAAAA,0BAA0B,CAACzC,MAAD,EAAQ;AAChC,WAAOA,MAAM,GAAC,CAAP,KAAW,CAAX,GAAe,CAAf,GAAmB,CAAC,CAA3B;AACD;;AA2BDe,EAAAA,kBAAkB,CAAC2B,GAAD,EAAMC,GAAN,EAAU;AAC1B,WAAO9E,KAAK,CAAC+E,GAAN,CAAUF,GAAV,EAAexE,KAAf,KAAuBL,KAAK,CAAC+E,GAAN,CAAUD,GAAV,EAAezE,KAA7C;AACD;;AAEDsB,EAAAA,cAAc,CAACqD,KAAD,EAAO;AACnBhF,IAAAA,KAAK,CAACiF,KAAN,CAAY;AAACxC,MAAAA,MAAM,EAACuC,KAAR;AAAeE,MAAAA,OAAO,EAAC;AAAvB,KAAZ,EAA0C9B,OAA1C,CAAkDoB,IAAI,IAAE;AACtDxB,MAAAA,QAAQ,CAACC,cAAT,CAAwBuB,IAAI,CAACW,EAA7B,EAAiCxE,SAAjC,CAA2CC,GAA3C,CAA+C,UAA/C;AACD,KAFD;AAGD;;AAyBDmC,EAAAA,gBAAgB,CAACiC,KAAD,EAAO;AACrB,WAAOhF,KAAK,CAAC+E,GAAN,CAAUC,KAAV,EAAiB3E,KAAjB,KAA2BL,KAAK,CAACwD,IAAN,EAAlC;AACD;;AAEDvB,EAAAA,OAAO,CAACmD,IAAD,EAAOD,EAAP,EAAU;AACf,QAAIE,GAAG,GAAGrF,KAAK,CAACwE,IAAN,CAAW;AAACY,MAAAA,IAAD;AAAMD,MAAAA;AAAN,KAAX,CAAV;;AACA,QAAGE,GAAH,EAAO;AACL,UAAI9C,WAAW,GAAG,CAAC,GAAG,KAAKD,KAAL,CAAWC,WAAf,CAAlB;AACAA,MAAAA,WAAW,CAACkC,IAAZ,CAAiBzE,KAAK,CAACuE,GAAN,EAAjB;AACA,WAAKpD,QAAL,CAAc;AAACwC,QAAAA,OAAO,EAAE3D,KAAK,CAAC2D,OAAN,EAAV;AAA2BJ,QAAAA,WAAW,EAACvD,KAAK,CAACwD,IAAN,EAAvC;AAAqDjB,QAAAA,WAArD;AAAkEkB,QAAAA,KAAK,EAACzD,KAAK,CAACyD,KAAN,GAAcC,IAAd;AAAxE,OAAd;AACA,aAAO2B,GAAG,CAACC,GAAX;AACD,KALD,MAKM,OAAO,KAAP;AACP;;AAUDC,EAAAA,WAAW,GAAE;AAAE,WAAO,KAAKjD,KAAL,CAAWiB,WAAX,KAA2B,CAA3B,GAA+B,CAAC,CAAhC,GAAoC,CAA3C;AAA+C;;AArOpC;;AAwO5B,eAAerD,GAAf","sourcesContent":["import './App.css';\nimport React, { Component } from 'react';\nimport Moves from './components/Moves/Moves';\n// import Squares from './components/Squares/Squares';\nimport Draggable from 'react-draggable';\nimport * as ChessJS from 'chess.js';\nconst Chess = typeof ChessJS === \"function\" ? ChessJS : ChessJS.Chess;\nconst chess = new Chess();\n\nconst squareID = [\"a8\", \"b8\", \"c8\", \"d8\", \"e8\", \"f8\", \"g8\", \"h8\", \"a7\", \"b7\", \"c7\", \"d7\", \"e7\", \"f7\", \"g7\", \"h7\", \"a6\", \"b6\", \"c6\", \"d6\", \"e6\", \"f6\", \"g6\", \"h6\", \"a5\", \"b5\", \"c5\", \"d5\", \"e5\", \"f5\", \"g5\", \"h5\", \"a4\", \"b4\", \"c4\", \"d4\", \"e4\", \"f4\", \"g4\", \"h4\", \"a3\", \"b3\", \"c3\", \"d3\", \"e3\", \"f3\", \"g3\", \"h3\", \"a2\", \"b2\", \"c2\", \"d2\", \"e2\", \"f2\", \"g2\", \"h2\", \"a1\", \"b1\", \"c1\", \"d1\", \"e1\", \"f1\", \"g1\", \"h1\"];\n// console.log(chess.board().flat().reverse());\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      colorToMove: chess.turn(),\n      piece_clicked: false,\n      board: chess.board().flat(),\n      history: [], // single moves \n      fen_history: [], // moves in fen \n      flipped: false,\n      loaded_game: null \n    };  \n  }\n\n  colorConv = color => {\n    return color==='w' ? 'white' : 'black';\n  }\n\n  render(){\n    // let arr = this.state.flipped ? chess.board().flat().reverse() : chess.board().flat();\n    let arr = this.state.board;\n    let squares_ids = this.state.flipped ? squareID.reverse() : squareID;\n    return(\n      <div className='container'>\n        <div className='board'> \n          {\n            arr.map((square, i)=>{\n              return square \n              ? \n              <div \n                onDragOver={this.dragOverHandler} \n                onDragLeave={this.dragLeaveHandler} \n                onDrop={(e)=>this.dropHandler(e, squareID[i])} \n                id={squares_ids[i]}\n                key={'square'+i} \n                className='square'> \n                  <div \n                    className={`piece ${this.colorConv(square.color)} ${square.type}`}\n                    draggable='true'\n                    data-position={squares_ids[i]}\n                    onDragStart={(e)=>this.dragStartHandler(e, squares_ids[i])} onDragEnd={()=>this.dragEndHandler}\n                    onClick={()=>this.handlePieceClick(squares_ids[i])} \n                  />\n              </div>\n              : \n              <div \n                id={squares_ids[i]}\n                onDragOver={this.dragOverHandler} \n                onDragLeave={this.dragLeaveHandler} \n                onClick={()=>this.handleClick(squares_ids[i])} \n                onDrop={(e)=>this.dropHandler(e, squares_ids[i])} \n                key={'square'+i} \n                className='square' \n            />;\n          })\n        }\n      </div>\n      <div className='moves'> \n        <Moves \n          onClick={this.moveClick} \n          moves={this.state.history}\n          colorToMove={this.state.colorToMove}\n          evalClick={this.handleEvalClick}\n          flip={this.flipClick}\n          /> \n      </div>\n      </div> \n    );\n  } \n\n  dragOverHandler = (e) => {\n    e.preventDefault(e);\n    requestAnimationFrame(function () {\n      e.target.classList.add('dragover');\n    });\n  }\n  \n  dragLeaveHandler = (e) => {\n    e.preventDefault(); \n    requestAnimationFrame(function () {\n      e.target.classList.remove('dragover');\n    }); \n  }\n\n  handleEvalClick = () => {\n    // console.log(this.state.history);\n\n    // fetch('https://www.chessgames.com/perl/nph-chesspgn?text=1&gid=2021103')\n    //   .then(response => response.json())\n    //   .then(response => console.log(response));\n    let pgn = \"1. d4 d5 2. c4 c6 3. Nf3 Nf6 4. Nc3 e6 5. e3 Nbd7 6. Bd3 dxc4 7. Bxc4 b5 8. Bd3 Bd6 9. O-O O-O 10. Qc2 Bb7 11. a3 Rc8 12. Ng5 c5 13. Nxh7 Ng4 14. f4 cxd4 15. exd4 Bc5 16. Be2 Nde5 17. Bxg4 Bxd4+ 18. Kh1 Nxg4 19. Nxf8 f5 20. Ng6 Qf6 21. h3 Qxg6 22. Qe2 Qh5 23. Qd3 Be3 0-1\";\n    this.loadPGN(pgn);\n  }\n\n  loadPGN(pgn){\n    let positions = []; \n    let r = chess.load_pgn(pgn);\n    if(r){\n      let history = chess.history(); \n      chess.reset();\n      let fen_history = [chess.fen()];\n      history.forEach(e=>{\n        chess.move(e);\n        fen_history.push(chess.fen());\n      });\n      // let fen_history = history.map(e => {\n      //   chess.move(e);\n      //   return chess.fen();   \n      // });\n      chess.load(fen_history[0]);\n      this.setState({history, fen_history, loaded_game: pgn});\n\n    }else alert(\"error\");\n  }\n\n  flipClick = () =>{\n    this.setState({flipped:true});\n  }\n\n  // @e: dragEvent\n  // @i: square of dragged piece \n  dragStartHandler = (e, i) => {\n    e.dataTransfer.effectAllowed = \"all\"\n    e.dataTransfer.dropEffect = \"move\";\n    e.dataTransfer.setData(\"text/plain\", i);\n    requestAnimationFrame(function () {\n      e.target.classList.add('hide');\n    });\n    this.highlightMoves(i);   \n  }\n\n  dragEndHandler = (e) =>{\n    e.preventDefault();\n    requestAnimationFrame(function () {\n        e.target.classList.remove('hide');\n      });\n  }\n\n  dropHandler = (e, target) => {\n    e.preventDefault();\n    this.removeClassFromAll('dragover', 'moveable'); \n    let origin = e.dataTransfer.getData('text/plain');\n    this.newMove(origin, target);\n  }\n\n  getColorToMoveByMoveNumber(number){\n    return number%2===0 ? 1 : -1; \n  }\n\n  moveClick = (number) => {\n    console.log('move clicked',number);\n    console.log(this.state.fen_history);\n    // chess.load(this.state.fen_history[number]);\n    // this.setState({colorToMove: chess.turn(), board: chess.board().flat()});\n  }\n\n  handleClick = (square) => {\n    let clicked = this.state.piece_clicked; \n    if(clicked){\n      if(this.newMove(clicked, square)){\n        this.removeClassesFromAll('moveable', 'active');\n        this.setState({piece_clicked: false});\n      }else{\n        // this.removeClassFromAll('active'); \n        // this.setState({piece_clicked: false })\n      }\n    }\n  }\n\n  squareColorConv = color => {\n    if(color==='light') return 'w'; \n    else if(color==='dark') return 'b';\n  }\n\n  squaresOfSameColor(one, two){\n    return chess.get(one).color===chess.get(two).color;\n  }\n\n  highlightMoves(piece){\n    chess.moves({square:piece, verbose:true}).forEach(move=>{\n      document.getElementById(move.to).classList.add('moveable');\n    });\n  }\n\n  handlePieceClick = (square) => {\n    let clicked = this.state.piece_clicked;\n    if(!clicked){\n      if(this.pieceIsTurnColor(square)){\n        document.getElementById(square).classList.add('active');\n        this.highlightMoves(square);\n        this.setState({piece_clicked: square});\n      }\n    }else{\n      this.removeClassesFromAll('active', 'moveable');\n      if(this.squaresOfSameColor(square, clicked)){ // Wenn selbfarbiges, anderes piece gedrÃ¼ckt \n          document.getElementById(square).classList.add('active');\n          this.highlightMoves(square);\n          this.setState({piece_clicked: square});\n      }else{ // Capture \n        if(this.newMove(clicked, square)){\n          this.removeClassesFromAll('active', 'moveable');\n          this.setState({piece_clicked: null});\n        }\n      }\n    }\n  }\n\n  pieceIsTurnColor(piece){\n    return chess.get(piece).color === chess.turn();\n  }\n\n  newMove(from, to){\n    let res = chess.move({from,to});\n    if(res){\n      let fen_history = [...this.state.fen_history]; \n      fen_history.push(chess.fen());\n      this.setState({history: chess.history(), colorToMove:chess.turn(), fen_history, board:chess.board().flat()});\n      return res.san; \n    }else return false; \n  }\n\n  removeClassFromAll = remove => {\n    document.querySelectorAll('.'+remove).forEach(el=>el.classList.remove(remove));\n  }\n\n  removeClassesFromAll = (...classes) => {\n    classes.forEach(e => document.querySelectorAll('.'+e).forEach(el=>el.classList.remove(e)));\n  }\n\n  switchColor(){ return this.state.colorToMove === 1 ? -1 : 1; }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}