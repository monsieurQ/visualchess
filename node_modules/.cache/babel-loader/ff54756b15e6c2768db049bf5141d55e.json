{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _Reflect$construct = require(\"@babel/runtime-corejs2/core-js/reflect/construct\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports[\"default\"] = exports.Move = exports.Game = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/getPrototypeOf\"));\n\nvar _board = require(\"./board\");\n\nvar _crypto = _interopRequireDefault(require(\"crypto\"));\n\nvar _events = require(\"events\");\n\nvar _piece = require(\"./piece\");\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = (0, _getPrototypeOf2[\"default\"])(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor;\n      result = _Reflect$construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return (0, _possibleConstructorReturn2[\"default\"])(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false;\n  if (_Reflect$construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(_Reflect$construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction addToHistory(game) {\n  return function (ev) {\n    var hashCode = game.getHashCode(),\n        move = new Move(ev.prevSquare, ev.postSquare, ev.capturedPiece, ev.algebraic, ev.castle, ev.enPassant, hashCode);\n    game.moveHistory.push(move);\n  };\n}\n\nfunction denotePromotionInHistory(game) {\n  return function () {\n    var latest = game.moveHistory[game.moveHistory.length - 1];\n\n    if (latest) {\n      latest.promotion = true;\n    }\n  };\n}\n\nvar Game = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(Game, _EventEmitter);\n\n  var _super = _createSuper(Game);\n\n  function Game(board) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, Game);\n    _this = _super.call(this);\n    _this.board = board;\n    _this.moveHistory = [];\n    return _this;\n  }\n\n  (0, _createClass2[\"default\"])(Game, [{\n    key: \"getCurrentSide\",\n    value: function getCurrentSide() {\n      return this.moveHistory.length % 2 === 0 ? _piece.SideType.White : _piece.SideType.Black;\n    }\n  }, {\n    key: \"getHashCode\",\n    value: function getHashCode() {\n      var i = 0,\n          sum = _crypto[\"default\"].createHash('md5');\n\n      for (i = 0; i < this.board.squares.length; i++) {\n        if (this.board.squares[i].piece !== null) {\n          sum.update(this.board.squares[i].file + this.board.squares[i].rank + (this.board.squares[i].piece.side === _piece.SideType.White ? 'w' : 'b') + this.board.squares[i].piece.notation + (i < this.board.squares.length - 1 ? '-' : ''));\n        }\n      } // generate hash code for board\n\n\n      return sum.digest('base64');\n    }\n  }], [{\n    key: \"create\",\n    value: function create() {\n      var board = _board.Board.create(),\n          game = new Game(board); // handle move and promotion events correctly\n\n\n      board.on('move', addToHistory(game));\n      board.on('promote', denotePromotionInHistory(game));\n      return game;\n    }\n  }, {\n    key: \"load\",\n    value: function load(moveHistory) {\n      var board = _board.Board.create(),\n          game = new Game(),\n          i = 0; // handle move and promotion events correctly\n\n\n      board.on('move', addToHistory(game));\n      board.on('promote', denotePromotionInHistory(game)); // apply move history\n\n      for (i = 0; i < moveHistory.length; i++) {\n        board.move(board.getSquare(moveHistory[i].prevFile, moveHistory[i].prevRank), board.getSquare(moveHistory[i].postFile, moveHistory[i].postRank));\n      }\n\n      return game;\n    }\n  }]);\n  return Game;\n}(_events.EventEmitter);\n\nexports.Game = Game;\n\nvar Move = function Move(originSquare, targetSquare, capturedPiece, notation, castle, enPassant, hash) {\n  (0, _classCallCheck2[\"default\"])(this, Move);\n  this.algebraic = notation;\n  this.capturedPiece = capturedPiece;\n  this.castle = castle;\n  this.enPassant = enPassant;\n  this.hashCode = hash;\n  this.piece = targetSquare.piece;\n  this.promotion = false;\n  this.postFile = targetSquare.file;\n  this.postRank = targetSquare.rank;\n  this.prevFile = originSquare.file;\n  this.prevRank = originSquare.rank;\n};\n\nexports.Move = Move;\nvar _default = {\n  Game: Game,\n  Move: Move\n};\nexports[\"default\"] = _default;","map":{"version":3,"sources":["game.js"],"names":["hashCode","game","move","ev","latest","Game","EventEmitter","board","Board","addToHistory","denotePromotionInHistory","SideType","i","sum","crypto","moveHistory","Move","targetSquare","originSquare"],"mappings":"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","sourcesContent":["/**\n\tGames contain the history of a board and the board itself.\n\n\tAt time of writing this, the game is also intended to store some\n\tdegree of information regarding the opponents and keys that\n\tcould be used for storage, etc.\n*/\nimport { Board } from './board';\nimport crypto from 'crypto';\nimport { EventEmitter } from 'events';\nimport { SideType } from './piece';\n\nfunction addToHistory (game) {\n\treturn (ev) => {\n\t\tlet\n\t\t\thashCode = game.getHashCode(),\n\t\t\tmove = new Move(\n\t\t\t\tev.prevSquare,\n\t\t\t\tev.postSquare,\n\t\t\t\tev.capturedPiece,\n\t\t\t\tev.algebraic,\n\t\t\t\tev.castle,\n\t\t\t\tev.enPassant,\n\t\t\t\thashCode);\n\n\t\tgame.moveHistory.push(move);\n\t};\n}\n\nfunction denotePromotionInHistory (game) {\n\treturn () => {\n\t\tlet\n\t\t\tlatest = game.moveHistory[\n\t\t\tgame.moveHistory.length - 1];\n\n\t\tif (latest) {\n\t\t\tlatest.promotion = true;\n\t\t}\n\t};\n}\n\nexport class Game extends EventEmitter {\n\tconstructor (board) {\n\t\tsuper();\n\n\t\tthis.board = board;\n\t\tthis.moveHistory = [];\n\t}\n\n\tstatic create () {\n\t\tlet\n\t\t\tboard = Board.create(),\n\t\t\tgame = new Game(board);\n\n\t\t// handle move and promotion events correctly\n\t\tboard.on('move', addToHistory(game));\n\t\tboard.on('promote', denotePromotionInHistory(game));\n\n\t\treturn game;\n\t}\n\n\tgetCurrentSide () {\n\t\treturn this.moveHistory.length % 2 === 0 ?\n\t\t\tSideType.White :\n\t\t\tSideType.Black;\n\t}\n\n\tgetHashCode () {\n\t\tlet\n\t\t\ti = 0,\n\t\t\tsum = crypto.createHash('md5');\n\n\t\tfor (i = 0; i < this.board.squares.length; i++) {\n\t\t\tif (this.board.squares[i].piece !== null) {\n\t\t\t\tsum.update(this.board.squares[i].file +\n\t\t\t\t\tthis.board.squares[i].rank +\n\t\t\t\t\t(this.board.squares[i].piece.side === SideType.White ? 'w' : 'b') +\n\t\t\t\t\tthis.board.squares[i].piece.notation +\n\t\t\t\t\t(i < (this.board.squares.length - 1) ? '-' : ''));\n\t\t\t}\n\t\t}\n\n\t\t// generate hash code for board\n\t\treturn sum.digest('base64');\n\t}\n\n\tstatic load (moveHistory) {\n\t\tlet\n\t\t\tboard = Board.create(),\n\t\t\tgame = new Game(),\n\t\t\ti = 0;\n\n\t\t// handle move and promotion events correctly\n\t\tboard.on('move', addToHistory(game));\n\t\tboard.on('promote', denotePromotionInHistory(game));\n\n\t\t// apply move history\n\t\tfor (i = 0; i < moveHistory.length; i++) {\n\t\t\tboard.move(\n\t\t\t\tboard.getSquare(\n\t\t\t\t\tmoveHistory[i].prevFile,\n\t\t\t\t\tmoveHistory[i].prevRank),\n\t\t\t\tboard.getSquare(\n\t\t\t\t\tmoveHistory[i].postFile,\n\t\t\t\t\tmoveHistory[i].postRank));\n\t\t}\n\n\t\treturn game;\n\t}\n}\n\nexport class Move {\n\tconstructor (originSquare, targetSquare, capturedPiece, notation, castle, enPassant, hash) {\n\t\tthis.algebraic = notation;\n\t\tthis.capturedPiece = capturedPiece;\n\t\tthis.castle = castle;\n\t\tthis.enPassant = enPassant;\n\t\tthis.hashCode = hash;\n\t\tthis.piece = targetSquare.piece;\n\t\tthis.promotion = false;\n\t\tthis.postFile = targetSquare.file;\n\t\tthis.postRank = targetSquare.rank;\n\t\tthis.prevFile = originSquare.file;\n\t\tthis.prevRank = originSquare.rank;\n\t}\n}\n\nexport default { Game, Move };\n"]},"metadata":{},"sourceType":"script"}