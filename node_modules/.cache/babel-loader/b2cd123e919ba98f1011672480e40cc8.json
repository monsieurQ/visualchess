{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/q/Documents/WebDocuments/chess/src/App.js\";\nimport './App.css';\nimport React, { Component } from 'react';\nimport Moves from './components/Moves/Moves';\nimport PopUp from './components/PopUp/PopUp';\nimport Button from './components/Button/Button'; // import Squares from './components/Squares/Squares';\n\nimport Draggable from 'react-draggable';\nimport * as ChessJS from 'chess.js';\nconst Chess = typeof ChessJS === \"function\" ? ChessJS : ChessJS.Chess;\nconst chess = new Chess();\nconst squareID = [\"a8\", \"b8\", \"c8\", \"d8\", \"e8\", \"f8\", \"g8\", \"h8\", \"a7\", \"b7\", \"c7\", \"d7\", \"e7\", \"f7\", \"g7\", \"h7\", \"a6\", \"b6\", \"c6\", \"d6\", \"e6\", \"f6\", \"g6\", \"h6\", \"a5\", \"b5\", \"c5\", \"d5\", \"e5\", \"f5\", \"g5\", \"h5\", \"a4\", \"b4\", \"c4\", \"d4\", \"e4\", \"f4\", \"g4\", \"h4\", \"a3\", \"b3\", \"c3\", \"d3\", \"e3\", \"f3\", \"g3\", \"h3\", \"a2\", \"b2\", \"c2\", \"d2\", \"e2\", \"f2\", \"g2\", \"h2\", \"a1\", \"b1\", \"c1\", \"d1\", \"e1\", \"f1\", \"g1\", \"h1\"]; // console.log(chess.board().flat().reverse());\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.colorConv = color => {\n      return color === 'w' ? 'white' : 'black';\n    };\n\n    this.closePopup = text => {\n      console.log(\"hi\", text);\n      if (!text) this.setState({\n        popUp: false\n      });else {\n        this.setState({\n          popUp: false,\n          entered_pgn: text\n        });\n        this.loadPGN(text);\n      }\n    };\n\n    this.keyDownHandler = e => {\n      switch (e.keyCode) {\n        case 39:\n          e.preventDefault();\n\n          if (this.state.selected_move + 1 <= this.state.fen_history.length - 1) {\n            this.setState(prevState => ({\n              selected_move: prevState.selected_move + 1\n            })); // this.removeClassFromAll('selected');\n            // document.getElementById('m'+this.state.selected_move+1).classList.add('selected');\n          }\n\n          break;\n\n        case 37:\n          e.preventDefault();\n\n          if (this.state.selected_move >= 1) {\n            this.setState(prevState => ({\n              selected_move: prevState.selected_move - 1\n            })); // this.removeClassFromAll('selected');\n            // document.getElementById('m'+this.state.selected_move-1).classList.add('selected');\n          }\n\n          break;\n\n        case 27:\n          e.preventDefault();\n\n          if (this.state.popUp) {\n            this.setState({\n              popUp: false\n            });\n          }\n\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.dragOverHandler = e => {\n      e.preventDefault(e);\n      requestAnimationFrame(function () {\n        e.target.classList.add('dragover');\n      });\n    };\n\n    this.dragLeaveHandler = e => {\n      e.preventDefault();\n      requestAnimationFrame(function () {\n        e.target.classList.remove('dragover');\n      });\n    };\n\n    this.handleControlClick = () => {\n      if (!this.state.control) {\n        this.showBoardControl();\n      } else {}\n    };\n\n    this.cleanUpSquare = square => {\n      return square.length > 2 ? square.slice(1) : square;\n    };\n\n    this.showBoardControl = () => {\n      // document.getElementById('d5').classList.add('attacked');\n      // document.getElementById('d5').style.setProperty('--separator', '50%');\n      // console.log(chess.moves({square:'e7'}));\n      let squares = this.initSquares();\n      console.log(squares); // console.log(chess.board());\n\n      let turn = chess.turn();\n      let other_turn = this.getOtherChessColor();\n      let defends = chess.defended_pieces(turn, true); // let attacks = chess.attacked_pieces(turn, true);\n      // let fen = chess.fen(); \n      // let fen2 = turn===chess.WHITE ? fen.replace(/\\sw\\s/, ' b ') : fen.replace(/\\sb\\s/, ' w '); \n\n      let defends_other = chess.defended_pieces(other_turn, true); // let attacks_other = chess.attacked_pieces(other_turn, true);\n\n      console.log(defends);\n      console.log(defends_other); // Defends = object, only own color  \n      // keys: defended squares/pieces  (format e.g. 'bc8')\n      // values: defending square/piece (format e.g. 'pd7')\n\n      for (let [key, value] of Object.entries(defends)) {\n        key = this.cleanUpSquare(key); //check whether key is square or piece \n\n        if (value.length > 0) {\n          // let square = key.slice(1);\n          try {\n            // squares[square][turn].push(value.map(e=>e.slice(1)));\n            squares[key][turn] += value.length;\n          } catch (err) {\n            console.log('Error', err);\n            console.log(` Vars: value: ${value}, key: ${key} `);\n          }\n        }\n      } // attacks = object\n      // keys: attacked square/piece (own color)\n      // values: attacked by square/piece (other color)\n      // for (let [key, value] of Object.entries(attacks)){\n      //   if(value.length>0){\n      //     let square = key.slice(1);\n      //     // squares[square][turn].push(value.map(e=>e.slice(1)));\n      //     squares[square][other_turn]+=value.length;\n      //   }\n      // }\n      // let chess2 = [...chess];\n      // let chess2 = new Chess(fen2); \n      // console.log(chess2);\n      // let defends2 = chess2.defended_pieces();\n      // let attacked2 = chess2.attacked_pieces();\n      // console.log(chess.attacked_pieces());\n      // console.log(attacked2);\n\n\n      for (let [key, value] of Object.entries(defends_other)) {\n        key = this.cleanUpSquare(key); //check whether key is square or piece \n\n        if (value.length > 0) {\n          // let square = key.slice(1);\n          try {\n            // squares[square][turn].push(value.map(e=>e.slice(1)));\n            squares[key][other_turn] += value.length;\n          } catch (err) {\n            console.log('Error', err);\n            console.log(` Vars: value: ${value}, key: ${key} `);\n          }\n        }\n      } // for (let [key, value] of Object.entries(attacks_other)){\n      //   if(value.length>0){\n      //     let square = key.slice(1);\n      //     // squares[square][turn].push(value.map(e=>e.slice(1)));\n      //     squares[square][turn]+=value.length;\n      //   }\n      // }\n\n\n      console.log(squares); // // console.log(squares['a8'].w.length);\n      // // console.log(squares);\n      // for (let [square, value] of Object.entries(squares)) {\n      //   if(value.w>0||value.b>0){ \n      //     let dom = document.getElementById(square);\n      //     dom.classList.add('attacked');\n      //     dom.style.setProperty('--separator', this.getRatio(value.w,value.b)+'%');\n      //   }\n      // }\n      // this.setState({white_moves, black_moves});\n    };\n\n    this.handleEvalClick = () => {\n      let pgn = \"1. d4 d5 2. c4 c6 3. Nf3 Nf6 4. Nc3 e6 5. e3 Nbd7 6. Bd3 dxc4 7. Bxc4 b5 8. Bd3 Bd6 9. O-O O-O 10. Qc2 Bb7 11. a3 Rc8 12. Ng5 c5 13. Nxh7 Ng4 14. f4 cxd4 15. exd4 Bc5 16. Be2 Nde5 17. Bxg4 Bxd4+ 18. Kh1 Nxg4 19. Nxf8 f5 20. Ng6 Qf6 21. h3 Qxg6 22. Qe2 Qh5 23. Qd3 Be3 0-1\";\n      this.loadPGN(pgn);\n    };\n\n    this.pgnClick = () => {\n      this.setState({\n        popUp: true\n      });\n    };\n\n    this.dragStartHandler = (e, i) => {\n      e.dataTransfer.effectAllowed = \"all\";\n      e.dataTransfer.dropEffect = \"move\";\n      e.dataTransfer.setData(\"text/plain\", i);\n      requestAnimationFrame(function () {\n        e.target.classList.add('hide');\n      });\n      this.highlightMoves(i);\n    };\n\n    this.dragEndHandler = e => {\n      e.preventDefault();\n      requestAnimationFrame(function () {\n        e.target.classList.remove('hide');\n      });\n    };\n\n    this.dropHandler = (e, target) => {\n      e.preventDefault();\n      this.removeClassesFromAll('dragover', 'moveable');\n      let origin = e.dataTransfer.getData('text/plain');\n      this.newMove(origin, target);\n    };\n\n    this.moveClick = number => {\n      // console.log('move clicked',number);\n      // console.log(this.state.fen_history);\n      // chess.load(this.state.fen_history[number+1]);\n      // this.removeClassFromAll('selected');\n      // document.getElementById('m'+number).classList.add('selected');\n      this.setState({\n        colorToMove: chess.turn(),\n        selected_move: number + 1\n      });\n    };\n\n    this.handleClick = square => {\n      let clicked = this.state.piece_clicked;\n\n      if (clicked) {\n        if (this.newMove(clicked, square)) {\n          this.removeClassesFromAll('moveable', 'active');\n          this.setState({\n            piece_clicked: false\n          });\n        } else {// this.removeClassFromAll('active'); \n          // this.setState({piece_clicked: false })\n        }\n      }\n    };\n\n    this.squareColorConv = color => {\n      if (color === 'light') return 'w';else if (color === 'dark') return 'b';\n    };\n\n    this.handlePieceClick = square => {\n      let clicked = this.state.piece_clicked;\n\n      if (!clicked) {\n        if (this.pieceIsTurnColor(square)) {\n          document.getElementById(square).classList.add('active');\n          this.highlightMoves(square);\n          this.setState({\n            piece_clicked: square\n          });\n        }\n      } else {\n        this.removeClassesFromAll('active', 'moveable');\n\n        if (this.squaresOfSameColor(square, clicked)) {\n          // Wenn selbfarbiges, anderes piece gedr√ºckt \n          document.getElementById(square).classList.add('active');\n          this.highlightMoves(square);\n          this.setState({\n            piece_clicked: square\n          });\n        } else {\n          // Capture \n          if (this.newMove(clicked, square)) {\n            this.removeClassesFromAll('active', 'moveable');\n            this.setState({\n              piece_clicked: null\n            });\n          }\n        }\n      }\n    };\n\n    this.removeClassFromAll = remove => {\n      document.querySelectorAll('.' + remove).forEach(el => el.classList.remove(remove));\n    };\n\n    this.removeClassesFromAll = (...classes) => {\n      classes.forEach(e => document.querySelectorAll('.' + e).forEach(el => el.classList.remove(e)));\n    };\n\n    this.state = {\n      colorToMove: chess.turn(),\n      selected_move: 0,\n      piece_clicked: false,\n      // board: chess.board().flat(),\n      history: [],\n      // single moves \n      fen_history: [chess.fen()],\n      // moves in fen \n      flipped: false,\n      loaded_game: null,\n      popUp: false,\n      control: false,\n      entered_pgn: '',\n      white_moves: null,\n      black_moves: null\n    };\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.keyDownHandler);\n  }\n\n  initSquares() {\n    let squares = {};\n    squareID.forEach(e => {\n      squares[e] = {\n        'w': 0,\n        'b': 0\n      };\n    });\n    return squares;\n  }\n\n  render() {\n    // let arr = this.state.flipped ? chess.board().flat().reverse() : chess.board().flat();\n    chess.load(this.state.fen_history[this.state.selected_move]);\n    let arr = chess.board().flat();\n    let squares_ids = this.state.flipped ? squareID.reverse() : squareID;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board\",\n        children: arr.map((square, i) => {\n          return square ? /*#__PURE__*/_jsxDEV(\"div\", {\n            onDragOver: this.dragOverHandler,\n            onDragLeave: this.dragLeaveHandler,\n            onDrop: e => this.dropHandler(e, squareID[i]),\n            id: squares_ids[i],\n            className: \"square\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `piece ${this.colorConv(square.color)} ${square.type}`,\n              draggable: \"true\",\n              \"data-position\": squares_ids[i],\n              onDragStart: e => this.dragStartHandler(e, squares_ids[i]),\n              onDragEnd: () => this.dragEndHandler,\n              onClick: () => this.handlePieceClick(squares_ids[i])\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 19\n            }, this)\n          }, 'square' + i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            id: squares_ids[i],\n            onDragOver: this.dragOverHandler,\n            onDragLeave: this.dragLeaveHandler,\n            onClick: () => this.handleClick(squares_ids[i]),\n            onDrop: e => this.dropHandler(e, squares_ids[i]),\n            className: \"square\"\n          }, 'square' + i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Moves, {\n        onClick: this.moveClick,\n        selected_move: this.state.selected_move,\n        moves: this.state.history,\n        colorToMove: this.state.colorToMove,\n        evalClick: this.handleEvalClick,\n        flip: this.flipClick,\n        control: this.handleControlClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button_wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          text: \"Random Position\",\n          onClick: this.handleEvalClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          text: \"Enter PGN\",\n          onClick: this.pgnClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          text: \"Evaluate\",\n          onClick: this.handleControlClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), this.state.popUp ? /*#__PURE__*/_jsxDEV(PopUp, {\n        text: \"Enter PGN\",\n        closePopup: this.closePopup\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this);\n  }\n\n  diagonalPawnMoves(square, color) {\n    if (this.isOnFirstOrLastRank(square)) return false;\n    let moves = [];\n    let [l, r] = color === 'w' ? [-9, -7] : [7, 9];\n\n    switch (this.isOnEdge(square)) {\n      case 0:\n        moves.push(squareID[square + l], squareID[square + r]);\n        break;\n\n      case 1:\n        moves.push(squareID[square + r]);\n        break;\n\n      case 2:\n        moves.push(squareID[square + l]);\n        break;\n\n      default:\n        moves.push(squareID[square + l], squareID[square + r]);\n        break;\n    }\n\n    return moves;\n  }\n\n  isOnFirstOrLastRank(square) {\n    return square >= 0 && square <= 7 || square >= 56 && square <= 63;\n  }\n  /*\n  return 1 ... left Edge, \n         2 ... right edge \n         0 ... not on edge\n  */\n\n\n  isOnEdge(square) {\n    if ([0, 8, 16, 24, 32, 40, 48, 56].includes(square)) return 1;\n    if ([7, 15, 23, 31, 39, 47, 55, 63].includes(square)) return 2;\n    return 0;\n  }\n\n  getOtherChessColor() {\n    return chess.turn() === chess.WHITE ? chess.BLACK : chess.WHITE;\n  }\n\n  getRatio(w, b) {\n    if (w === 0 && b === 0) return 0;\n    let sum = w + b;\n    let whiteshare = w / sum * 100; // let blackshare = b/sum*100; \n    // this._square.style.setProperty(\"--separator\", whiteshare+'%');\n\n    return whiteshare;\n  }\n\n  loadPGN(pgn) {\n    let r = chess.load_pgn(pgn);\n\n    if (r) {\n      let history = chess.history();\n      chess.reset();\n      let fen_history = [chess.fen()];\n      history.forEach(e => {\n        chess.move(e);\n        fen_history.push(chess.fen());\n      }); // let fen_history = history.map(e => {\n      //   chess.move(e);\n      //   return chess.fen();   \n      // });\n\n      chess.load(fen_history[0]);\n      this.setState({\n        history,\n        fen_history,\n        loaded_game: pgn,\n        selected_move: 0\n      });\n    } else alert(\"error\");\n  }\n\n  getColorToMoveByMoveNumber(number) {\n    return number % 2 === 0 ? 1 : -1;\n  }\n\n  squaresOfSameColor(one, two) {\n    return chess.get(one).color === chess.get(two).color;\n  }\n\n  highlightMoves(piece) {\n    chess.moves({\n      square: piece,\n      verbose: true\n    }).forEach(move => {\n      document.getElementById(move.to).classList.add('moveable');\n    });\n  }\n\n  pieceIsTurnColor(piece) {\n    return chess.get(piece).color === chess.turn();\n  }\n\n  newMove(from, to) {\n    let res = chess.move({\n      from,\n      to\n    });\n\n    if (res) {\n      let fen_history = [...this.state.fen_history];\n      fen_history.push(chess.fen());\n      let history = [...this.state.history];\n      history.push(res.san);\n      this.setState(prevState => ({\n        selected_move: prevState.selected_move + 1,\n        history,\n        colorToMove: chess.turn(),\n        fen_history\n      }));\n      return res.san;\n    } else return false;\n  }\n\n  switchColor() {\n    return this.state.colorToMove === 1 ? -1 : 1;\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/q/Documents/WebDocuments/chess/src/App.js"],"names":["React","Component","Moves","PopUp","Button","Draggable","ChessJS","Chess","chess","squareID","App","constructor","colorConv","color","closePopup","text","console","log","setState","popUp","entered_pgn","loadPGN","keyDownHandler","e","keyCode","preventDefault","state","selected_move","fen_history","length","prevState","dragOverHandler","requestAnimationFrame","target","classList","add","dragLeaveHandler","remove","handleControlClick","control","showBoardControl","cleanUpSquare","square","slice","squares","initSquares","turn","other_turn","getOtherChessColor","defends","defended_pieces","defends_other","key","value","Object","entries","err","handleEvalClick","pgn","pgnClick","dragStartHandler","i","dataTransfer","effectAllowed","dropEffect","setData","highlightMoves","dragEndHandler","dropHandler","removeClassesFromAll","origin","getData","newMove","moveClick","number","colorToMove","handleClick","clicked","piece_clicked","squareColorConv","handlePieceClick","pieceIsTurnColor","document","getElementById","squaresOfSameColor","removeClassFromAll","querySelectorAll","forEach","el","classes","history","fen","flipped","loaded_game","white_moves","black_moves","componentDidMount","addEventListener","render","load","arr","board","flat","squares_ids","reverse","map","type","flipClick","diagonalPawnMoves","isOnFirstOrLastRank","moves","l","r","isOnEdge","push","includes","WHITE","BLACK","getRatio","w","b","sum","whiteshare","load_pgn","reset","move","alert","getColorToMoveByMoveNumber","one","two","get","piece","verbose","to","from","res","san","switchColor"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, { Component } from 'react';\nimport Moves from './components/Moves/Moves';\nimport PopUp from './components/PopUp/PopUp';\nimport Button from './components/Button/Button';\n// import Squares from './components/Squares/Squares';\nimport Draggable from 'react-draggable';\nimport * as ChessJS from 'chess.js';\nconst Chess = typeof ChessJS === \"function\" ? ChessJS : ChessJS.Chess;\nconst chess = new Chess();\n\nconst squareID = [\"a8\", \"b8\", \"c8\", \"d8\", \"e8\", \"f8\", \"g8\", \"h8\", \"a7\", \"b7\", \"c7\", \"d7\", \"e7\", \"f7\", \"g7\", \"h7\", \"a6\", \"b6\", \"c6\", \"d6\", \"e6\", \"f6\", \"g6\", \"h6\", \"a5\", \"b5\", \"c5\", \"d5\", \"e5\", \"f5\", \"g5\", \"h5\", \"a4\", \"b4\", \"c4\", \"d4\", \"e4\", \"f4\", \"g4\", \"h4\", \"a3\", \"b3\", \"c3\", \"d3\", \"e3\", \"f3\", \"g3\", \"h3\", \"a2\", \"b2\", \"c2\", \"d2\", \"e2\", \"f2\", \"g2\", \"h2\", \"a1\", \"b1\", \"c1\", \"d1\", \"e1\", \"f1\", \"g1\", \"h1\"];\n\n\n// console.log(chess.board().flat().reverse());\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      colorToMove: chess.turn(),\n      selected_move: 0,\n      piece_clicked: false,\n      // board: chess.board().flat(),\n      history: [], // single moves \n      fen_history: [chess.fen()], // moves in fen \n      flipped: false,\n      loaded_game: null,\n      popUp: false, \n      control: false,\n      entered_pgn: '',\n      white_moves: null,\n      black_moves: null\n    };  \n  }\n\n  componentDidMount(){\n    document.addEventListener(\"keydown\", this.keyDownHandler);\n  }\n\n  colorConv = color => {\n    return color==='w' ? 'white' : 'black';\n  }\n\n  initSquares(){\n    let squares = {}; \n    squareID.forEach(e=>{\n      squares[e] = {'w':0,'b':0};\n    });\n    return squares;\n  }\n\n\n  render(){\n    // let arr = this.state.flipped ? chess.board().flat().reverse() : chess.board().flat();\n    chess.load(this.state.fen_history[this.state.selected_move]);\n    let arr = chess.board().flat();\n    let squares_ids = this.state.flipped ? squareID.reverse() : squareID;\n    return(\n      <div className='container'>\n        <div className='board'> \n          {\n            arr.map((square, i)=>{\n              return square \n              ? \n              <div \n                onDragOver={this.dragOverHandler} \n                onDragLeave={this.dragLeaveHandler} \n                onDrop={(e)=>this.dropHandler(e, squareID[i])} \n                id={squares_ids[i]}\n                key={'square'+i} \n                className='square'> \n                  <div \n                    className={`piece ${this.colorConv(square.color)} ${square.type}`}\n                    draggable='true'\n                    data-position={squares_ids[i]}\n                    onDragStart={(e)=>this.dragStartHandler(e, squares_ids[i])} onDragEnd={()=>this.dragEndHandler}\n                    onClick={()=>this.handlePieceClick(squares_ids[i])} \n                  />\n              </div>\n              : \n              <div \n                id={squares_ids[i]}\n                onDragOver={this.dragOverHandler} \n                onDragLeave={this.dragLeaveHandler} \n                onClick={()=>this.handleClick(squares_ids[i])} \n                onDrop={(e)=>this.dropHandler(e, squares_ids[i])} \n                key={'square'+i} \n                className='square' \n            />;\n          })\n        }\n        </div>\n        <Moves \n          onClick={this.moveClick} \n          selected_move={this.state.selected_move}\n          moves={this.state.history}\n          colorToMove={this.state.colorToMove}\n          evalClick={this.handleEvalClick}\n          flip={this.flipClick}\n          control={this.handleControlClick}\n          /> \n        <div className=\"button_wrapper\"> \n          <Button text='Random Position' onClick={this.handleEvalClick} />\n          <Button text='Enter PGN' onClick={this.pgnClick} />\n          <Button text='Evaluate' onClick={this.handleControlClick} />\n        </div>\n        {this.state.popUp ?  \n          <PopUp  \n            text='Enter PGN'  \n            closePopup={this.closePopup}  \n          />  \n          : null  \n        }  \n      </div> \n    );\n  } \n\n  closePopup = (text) => {\n    console.log(\"hi\", text);\n    if(!text) this.setState({popUp: false});\n    else{\n      this.setState({popUp: false, entered_pgn: text}); \n      this.loadPGN(text);\n    }\n  }\n\n  diagonalPawnMoves(square, color){\n    if(this.isOnFirstOrLastRank(square)) return false; \n    let moves = [];\n    let [l, r] = color==='w' ? [-9, -7] : [7, 9];\n    switch(this.isOnEdge(square)){\n      case 0:\n        moves.push(squareID[square+l], squareID[square+r]);\n        break;\n      case 1: \n        moves.push(squareID[square+r]);\n        break;\n      case 2: \n        moves.push(squareID[square+l]);\n        break;\n      default: moves.push(squareID[square+l], squareID[square+r]);\n        break; \n    }\n    return moves;\n  }\n\n  isOnFirstOrLastRank(square){\n    return (square>=0&&square<=7)||(square>=56&&square<=63);\n  }\n\n  /*\n  return 1 ... left Edge, \n         2 ... right edge \n         0 ... not on edge\n  */\n  isOnEdge(square){\n    if([0,8,16,24,32,40,48,56].includes(square)) return 1;\n    if([7,15,23,31,39,47,55,63].includes(square)) return 2; \n    return 0; \n  }\n\n  keyDownHandler = (e)=>{\n    switch(e.keyCode){\n      case 39: \n        e.preventDefault();\n        if(this.state.selected_move+1<=this.state.fen_history.length-1){ \n          this.setState(prevState=>({selected_move: prevState.selected_move+1}));                \n          // this.removeClassFromAll('selected');\n          // document.getElementById('m'+this.state.selected_move+1).classList.add('selected');\n        }\n        break;\n      case 37: \n        e.preventDefault();\n        if(this.state.selected_move>=1){\n          this.setState(prevState=>({selected_move: prevState.selected_move-1}));\n          // this.removeClassFromAll('selected');\n          // document.getElementById('m'+this.state.selected_move-1).classList.add('selected');\n        }\n        break;\n      case 27: \n        e.preventDefault(); \n        if(this.state.popUp){\n          this.setState({popUp: false});\n        }\n        break;\n      default: break; \n    }\n  }\n\n  dragOverHandler = (e) => {\n    e.preventDefault(e);\n    requestAnimationFrame(function () {\n      e.target.classList.add('dragover');\n    });\n  }\n  \n  dragLeaveHandler = (e) => {\n    e.preventDefault(); \n    requestAnimationFrame(function () {\n      e.target.classList.remove('dragover');\n    }); \n  }\n\n  handleControlClick = () => {    \n    if(!this.state.control){\n      this.showBoardControl();\n    }else{\n\n    }\n  }\n\n\n  // If square is of format piece-square, remove piece \n  cleanUpSquare = (square) => {\n    return square.length>2 ? square.slice(1) : square;\n  }\n\n\n  getOtherChessColor(){\n    return chess.turn() === chess.WHITE ? chess.BLACK : chess.WHITE;\n  }\n\n  showBoardControl = () => {\n    // document.getElementById('d5').classList.add('attacked');\n    // document.getElementById('d5').style.setProperty('--separator', '50%');\n    // console.log(chess.moves({square:'e7'}));\n    \n    let squares = this.initSquares();\n    console.log(squares);\n    // console.log(chess.board());\n    let turn = chess.turn(); \n    let other_turn = this.getOtherChessColor();\n\n    let defends = chess.defended_pieces(turn, true);\n    // let attacks = chess.attacked_pieces(turn, true);\n\n    // let fen = chess.fen(); \n    // let fen2 = turn===chess.WHITE ? fen.replace(/\\sw\\s/, ' b ') : fen.replace(/\\sb\\s/, ' w '); \n    \n    let defends_other = chess.defended_pieces(other_turn, true);\n    // let attacks_other = chess.attacked_pieces(other_turn, true);\n\n    console.log(defends);\n    console.log(defends_other);\n\n    // Defends = object, only own color  \n    // keys: defended squares/pieces  (format e.g. 'bc8')\n    // values: defending square/piece (format e.g. 'pd7')\n    for (let [key, value] of Object.entries(defends)){ \n      key = this.cleanUpSquare(key);  //check whether key is square or piece \n      if(value.length>0){\n        // let square = key.slice(1);\n        try{\n          \n          // squares[square][turn].push(value.map(e=>e.slice(1)));\n          squares[key][turn]+=value.length;\n        }catch(err){\n          console.log('Error', err);\n          console.log(` Vars: value: ${value}, key: ${key} `);\n        }\n      }\n    }\n    // attacks = object\n    // keys: attacked square/piece (own color)\n    // values: attacked by square/piece (other color)\n    // for (let [key, value] of Object.entries(attacks)){\n    //   if(value.length>0){\n    //     let square = key.slice(1);\n    //     // squares[square][turn].push(value.map(e=>e.slice(1)));\n    //     squares[square][other_turn]+=value.length;\n    //   }\n    // }\n\n    // let chess2 = [...chess];\n\n\n    // let chess2 = new Chess(fen2); \n    // console.log(chess2);\n    // let defends2 = chess2.defended_pieces();\n    // let attacked2 = chess2.attacked_pieces();\n    // console.log(chess.attacked_pieces());\n\n    // console.log(attacked2);\n\n    for (let [key, value] of Object.entries(defends_other)){\n      key = this.cleanUpSquare(key);  //check whether key is square or piece \n      if(value.length>0){\n        // let square = key.slice(1);\n        try{\n          \n          // squares[square][turn].push(value.map(e=>e.slice(1)));\n          squares[key][other_turn]+=value.length;\n        }catch(err){\n          console.log('Error', err);\n          console.log(` Vars: value: ${value}, key: ${key} `);\n        }\n      }\n    }\n    // for (let [key, value] of Object.entries(attacks_other)){\n    //   if(value.length>0){\n    //     let square = key.slice(1);\n    //     // squares[square][turn].push(value.map(e=>e.slice(1)));\n    //     squares[square][turn]+=value.length;\n    //   }\n    // }\n\n    console.log(squares);\n    // // console.log(squares['a8'].w.length);\n    // // console.log(squares);\n\n    // for (let [square, value] of Object.entries(squares)) {\n    //   if(value.w>0||value.b>0){ \n    //     let dom = document.getElementById(square);\n    //     dom.classList.add('attacked');\n    //     dom.style.setProperty('--separator', this.getRatio(value.w,value.b)+'%');\n    //   }\n    // }\n    // this.setState({white_moves, black_moves});\n  }\n\n  getRatio(w, b){\n    if(w===0&&b===0) return 0;  \n    let sum = w + b; \n    let whiteshare = w/sum*100; \n    // let blackshare = b/sum*100; \n    \n    // this._square.style.setProperty(\"--separator\", whiteshare+'%');\n    return whiteshare; \n  }\n\n\n  handleEvalClick = () => {    \n    let pgn = \"1. d4 d5 2. c4 c6 3. Nf3 Nf6 4. Nc3 e6 5. e3 Nbd7 6. Bd3 dxc4 7. Bxc4 b5 8. Bd3 Bd6 9. O-O O-O 10. Qc2 Bb7 11. a3 Rc8 12. Ng5 c5 13. Nxh7 Ng4 14. f4 cxd4 15. exd4 Bc5 16. Be2 Nde5 17. Bxg4 Bxd4+ 18. Kh1 Nxg4 19. Nxf8 f5 20. Ng6 Qf6 21. h3 Qxg6 22. Qe2 Qh5 23. Qd3 Be3 0-1\";\n    this.loadPGN(pgn);\n  }\n\n  loadPGN(pgn){\n    let r = chess.load_pgn(pgn);\n    if(r){\n      let history = chess.history(); \n      chess.reset();\n      let fen_history = [chess.fen()];\n      history.forEach(e=>{\n        chess.move(e);\n        fen_history.push(chess.fen());\n      });\n      // let fen_history = history.map(e => {\n      //   chess.move(e);\n      //   return chess.fen();   \n      // });\n      chess.load(fen_history[0]);\n      this.setState({history, fen_history, loaded_game: pgn, selected_move: 0});\n\n    }else alert(\"error\");\n  }\n\n  pgnClick = () =>{\n    this.setState({popUp: true});\n  }\n\n  // @e: dragEvent\n  // @i: square of dragged piece \n  dragStartHandler = (e, i) => {\n    e.dataTransfer.effectAllowed = \"all\"\n    e.dataTransfer.dropEffect = \"move\";\n    e.dataTransfer.setData(\"text/plain\", i);\n    requestAnimationFrame(function () {\n      e.target.classList.add('hide');\n    });\n    this.highlightMoves(i);   \n  }\n\n  dragEndHandler = (e) =>{\n    e.preventDefault();\n    requestAnimationFrame(function () {\n        e.target.classList.remove('hide');\n      });\n  }\n\n  dropHandler = (e, target) => {\n    e.preventDefault();\n    this.removeClassesFromAll('dragover', 'moveable'); \n    let origin = e.dataTransfer.getData('text/plain');\n    this.newMove(origin, target);\n  }\n\n  getColorToMoveByMoveNumber(number){\n    return number%2===0 ? 1 : -1; \n  }\n\n  moveClick = (number) => {\n    // console.log('move clicked',number);\n    // console.log(this.state.fen_history);\n    // chess.load(this.state.fen_history[number+1]);\n    // this.removeClassFromAll('selected');\n    // document.getElementById('m'+number).classList.add('selected');\n    this.setState({colorToMove: chess.turn(), selected_move:number+1});\n  }\n\n  handleClick = (square) => {\n    let clicked = this.state.piece_clicked; \n    if(clicked){\n      if(this.newMove(clicked, square)){\n        this.removeClassesFromAll('moveable', 'active');\n        this.setState({piece_clicked: false});\n      }else{\n        // this.removeClassFromAll('active'); \n        // this.setState({piece_clicked: false })\n      }\n    }\n  }\n\n  squareColorConv = color => {\n    if(color==='light') return 'w'; \n    else if(color==='dark') return 'b';\n  }\n\n  squaresOfSameColor(one, two){\n    return chess.get(one).color===chess.get(two).color;\n  }\n\n  highlightMoves(piece){\n    chess.moves({square:piece, verbose:true}).forEach(move=>{\n      document.getElementById(move.to).classList.add('moveable');\n    });\n  }\n\n  handlePieceClick = (square) => {\n    let clicked = this.state.piece_clicked;\n    if(!clicked){\n      if(this.pieceIsTurnColor(square)){\n        document.getElementById(square).classList.add('active');\n        this.highlightMoves(square);\n        this.setState({piece_clicked: square});\n      }\n    }else{\n      this.removeClassesFromAll('active', 'moveable');\n      if(this.squaresOfSameColor(square, clicked)){ // Wenn selbfarbiges, anderes piece gedr√ºckt \n          document.getElementById(square).classList.add('active');\n          this.highlightMoves(square);\n          this.setState({piece_clicked: square});\n      }else{ // Capture \n        if(this.newMove(clicked, square)){\n          this.removeClassesFromAll('active', 'moveable');\n          this.setState({piece_clicked: null});\n        }\n      }\n    }\n  }\n\n  pieceIsTurnColor(piece){\n    return chess.get(piece).color === chess.turn();\n  }\n\n  newMove(from, to){\n      let res = chess.move({from,to});\n    if(res){\n      let fen_history = [...this.state.fen_history]; \n      fen_history.push(chess.fen());\n      let history = [...this.state.history];\n      history.push(res.san);\n      this.setState(prevState => \n        ({selected_move: prevState.selected_move+1, history, colorToMove:chess.turn(), fen_history}));\n      return res.san; \n    }else return false; \n  }\n\n  removeClassFromAll = remove => {\n    document.querySelectorAll('.'+remove).forEach(el=>el.classList.remove(remove));\n  }\n\n  removeClassesFromAll = (...classes) => {\n    classes.forEach(e => document.querySelectorAll('.'+e).forEach(el=>el.classList.remove(e)));\n  }\n\n  switchColor(){ return this.state.colorToMove === 1 ? -1 : 1; }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}