{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/q/Documents/WebDocuments/chess/front/src/App.js\";\nimport './App.css';\nimport React, { Component } from 'react';\nimport Moves from './components/Moves/Moves';\nimport PopUp from './components/PopUp/PopUp';\nimport Button from './components/Button/Button';\nimport GamesList from './components/GamesList/GamesList'; // import Squares from './components/Squares/Squares';\n\nimport Draggable from 'react-draggable';\nimport * as ChessJS from 'chess.js';\nconst Chess = typeof ChessJS === \"function\" ? ChessJS : ChessJS.Chess;\nconst chess = new Chess();\nconst squareID = [\"a8\", \"b8\", \"c8\", \"d8\", \"e8\", \"f8\", \"g8\", \"h8\", \"a7\", \"b7\", \"c7\", \"d7\", \"e7\", \"f7\", \"g7\", \"h7\", \"a6\", \"b6\", \"c6\", \"d6\", \"e6\", \"f6\", \"g6\", \"h6\", \"a5\", \"b5\", \"c5\", \"d5\", \"e5\", \"f5\", \"g5\", \"h5\", \"a4\", \"b4\", \"c4\", \"d4\", \"e4\", \"f4\", \"g4\", \"h4\", \"a3\", \"b3\", \"c3\", \"d3\", \"e3\", \"f3\", \"g3\", \"h3\", \"a2\", \"b2\", \"c2\", \"d2\", \"e2\", \"f2\", \"g2\", \"h2\", \"a1\", \"b1\", \"c1\", \"d1\", \"e1\", \"f1\", \"g1\", \"h1\"];\nvar SQUARES = {\n  a8: 0,\n  b8: 1,\n  c8: 2,\n  d8: 3,\n  e8: 4,\n  f8: 5,\n  g8: 6,\n  h8: 7,\n  a7: 16,\n  b7: 17,\n  c7: 18,\n  d7: 19,\n  e7: 20,\n  f7: 21,\n  g7: 22,\n  h7: 23,\n  a6: 32,\n  b6: 33,\n  c6: 34,\n  d6: 35,\n  e6: 36,\n  f6: 37,\n  g6: 38,\n  h6: 39,\n  a5: 48,\n  b5: 49,\n  c5: 50,\n  d5: 51,\n  e5: 52,\n  f5: 53,\n  g5: 54,\n  h5: 55,\n  a4: 64,\n  b4: 65,\n  c4: 66,\n  d4: 67,\n  e4: 68,\n  f4: 69,\n  g4: 70,\n  h4: 71,\n  a3: 80,\n  b3: 81,\n  c3: 82,\n  d3: 83,\n  e3: 84,\n  f3: 85,\n  g3: 86,\n  h3: 87,\n  a2: 96,\n  b2: 97,\n  c2: 98,\n  d2: 99,\n  e2: 100,\n  f2: 101,\n  g2: 102,\n  h2: 103,\n  a1: 112,\n  b1: 113,\n  c1: 114,\n  d1: 115,\n  e1: 116,\n  f1: 117,\n  g1: 118,\n  h1: 119\n};\nconst GAMES_FILEPATH = 'games.txt'; // console.log(chess.board().flat().reverse());\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.colorConv = color => color === 'w' ? 'white' : 'black';\n\n    this.closePopup = text => {\n      console.log(\"hi\", text);\n      if (!text) this.setState({\n        popUp: false\n      });else {\n        this.setState({\n          popUp: false\n        });\n        this.loadPGN(text);\n      }\n    };\n\n    this.handleEvalClick = () => {\n      let pgn = \"1. d4 d5 2. c4 c6 3. Nf3 Nf6 4. Nc3 e6 5. e3 Nbd7 6. Bd3 dxc4 7. Bxc4 b5 8. Bd3 Bd6 9. O-O O-O 10. Qc2 Bb7 11. a3 Rc8 12. Ng5 c5 13. Nxh7 Ng4 14. f4 cxd4 15. exd4 Bc5 16. Be2 Nde5 17. Bxg4 Bxd4+ 18. Kh1 Nxg4 19. Nxf8 f5 20. Ng6 Qf6 21. h3 Qxg6 22. Qe2 Qh5 23. Qd3 Be3 0-1\";\n      this.loadPGN(pgn);\n    };\n\n    this.keyDownHandler = e => {\n      switch (e.keyCode) {\n        case 39:\n          // Right arrow \n          e.preventDefault();\n\n          if (this.state.selected_move + 1 <= this.state.fen_history.length - 1) {\n            this.setState(prevState => ({\n              selected_move: prevState.selected_move + 1\n            }), this.showBoardControl()); // this.setState(prevState=>({selected_move: prevState.selected_move+1}));                \n            // this.removeClassFromAll('selected');\n            // document.getElementById('m'+this.state.selected_move+1).classList.add('selected');\n          }\n\n          break;\n\n        case 37:\n          // Left arrow \n          e.preventDefault();\n\n          if (this.state.selected_move >= 1) {\n            // this.setState(prevState=>({selected_move: prevState.selected_move-1}));\n            this.setState(prevState => ({\n              selected_move: prevState.selected_move - 1\n            }), this.showBoardControl()); // this.removeClassFromAll('selected');\n            // document.getElementById('m'+this.state.selected_move-1).classList.add('selected');\n          }\n\n          break;\n\n        case 27:\n          // esc \n          e.preventDefault();\n\n          if (this.state.popUp) {\n            this.setState({\n              popUp: false\n            });\n          }\n\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.dragOverHandler = e => {\n      e.preventDefault(e);\n      requestAnimationFrame(function () {\n        e.target.classList.add('dragover');\n      });\n    };\n\n    this.dragLeaveHandler = e => {\n      e.preventDefault();\n      requestAnimationFrame(function () {\n        e.target.classList.remove('dragover');\n      });\n    };\n\n    this.handleControlClick = () => {\n      if (!this.state.control) {\n        this.showBoardControl();\n      } else {}\n    };\n\n    this.handleGamesClick = () => {\n      let showGames = this.state.showGames;\n      this.setState({\n        showGames: !showGames\n      });\n    };\n\n    this.handleHideClick = () => {\n      // document.getElementById('board').classList.add('hidepieces');\n      console.log(chess.boardFull());\n    };\n\n    this.serverClick = () => {\n      fetch('http://localhost:3000/test', {\n        method: 'GET'\n      }).then(res => res.text()).then(res => {\n        this.loadGames(res, '###');\n      });\n    };\n\n    this.pgnClick = () => {\n      // this.setState({popUp: true});\n      this.setState({\n        popUp: {\n          text: 'Enter PGN',\n          closePopup: this.closePopup\n        }\n      });\n    };\n\n    this.moveClick = number => {\n      this.setState({\n        colorToMove: chess.turn(),\n        selected_move: number + 1\n      }, this.showBoardControl());\n    };\n\n    this.handleClick = square => {\n      let clicked = this.state.piece_clicked;\n\n      if (clicked) {\n        if (this.newMove(clicked, square)) {\n          this.removeClassesFromAll('moveable', 'active');\n          this.setState({\n            piece_clicked: false\n          });\n          this.showBoardControl();\n        } else {// this.removeClassFromAll('active'); \n          // this.setState({piece_clicked: false })\n        }\n      }\n    };\n\n    this.dragStartHandler = (e, i) => {\n      e.dataTransfer.effectAllowed = \"all\";\n      e.dataTransfer.dropEffect = \"move\";\n      e.dataTransfer.setData(\"text/plain\", i);\n      requestAnimationFrame(function () {\n        e.target.classList.add('hide');\n      });\n      this.highlightMoves(i);\n    };\n\n    this.dragEndHandler = e => {\n      e.preventDefault();\n      requestAnimationFrame(function () {\n        e.target.classList.remove('hide');\n      });\n    };\n\n    this.dropHandler = (e, target) => {\n      e.preventDefault();\n      this.removeClassesFromAll('dragover', 'moveable');\n      let origin = e.dataTransfer.getData('text/plain');\n\n      if (this.newMove(origin, target)) {\n        this.removeClassesFromAll('moveable', 'active');\n        this.showBoardControl();\n      }\n    };\n\n    this.handlePieceClick = square => {\n      let clicked = this.state.piece_clicked;\n\n      if (!clicked) {\n        if (this.pieceIsTurnColor(square)) {\n          document.getElementById(square).classList.add('active');\n          this.highlightMoves(square);\n          this.setState({\n            piece_clicked: square\n          });\n        }\n      } else {\n        this.removeClassesFromAll('active', 'moveable');\n\n        if (this.squaresOfSameColor(square, clicked)) {\n          // Wenn selbfarbiges, anderes piece gedrÃ¼ckt \n          document.getElementById(square).classList.add('active');\n          this.highlightMoves(square);\n          this.setState({\n            piece_clicked: square\n          });\n        } else {\n          // Capture \n          if (this.newMove(clicked, square)) {\n            this.setState({\n              piece_clicked: null\n            });\n            this.showBoardControl();\n          }\n        }\n      }\n    };\n\n    this.cleanUpSquare = square => square.length > 2 ? square.slice(1) : square;\n\n    this.moveIsPawnMove = move => move.length === 3 && move.charAt(0).toLowerCase() === 'p';\n\n    this.showBoardControl = () => {\n      let squares = this.initSquares();\n      let turn = chess.turn();\n      let other_turn = this.getOtherChessColor();\n      let defends_other = chess.defended_pieces(other_turn, true, true);\n      console.log('defends_other', defends_other); // console.log(chess.boardFull());\n\n      let defends = chess.defended_pieces(turn, true, true);\n      console.log('defends', defends); // Defends = object, only own color  \n      // keys: defended squares/pieces  (format e.g. 'bc8' or 'c2')\n      // values: defending square/piece (format e.g. 'pd7')\n\n      for (let [key, value] of Object.entries(defends)) {\n        key = this.cleanUpSquare(key); //check whether key is square or piece \n\n        if (value.length > 0) {\n          try {\n            // squares[key][turn] += value.filter(move => !this.moveIsPawnMove(move)).length;\n            // squares[square][turn].push(value.map(e=>e.slice(1)));\n            squares[key][turn] += value.length;\n          } catch (err) {\n            console.error('Error', err);\n            console.log(` Vars: value: ${value}, key: ${key} `);\n          }\n        }\n      }\n\n      for (let [key, value] of Object.entries(defends_other)) {\n        // console.log(`value: ${value}, key: ${key}, moveIsPawnMove: ${this.moveIsPawnMove(value)}`);\n        key = this.cleanUpSquare(key); //check whether key is square or piece \n\n        if (value.length > 0) {\n          // let square = key.slice(1);\n          try {\n            // squares[key][other_turn] += value.filter(move => !this.moveIsPawnMove(move)).length;\n            // squares[square][turn].push(value.map(e=>e.slice(1)));\n            squares[key][other_turn] += value.length;\n          } catch (err) {\n            console.error('Error', err);\n            console.log(` Vars: value: ${value}, key: ${key} `);\n          }\n        }\n      }\n\n      console.log(squares);\n      this.removeClassFromAll('attacked');\n\n      for (let [square, value] of Object.entries(squares)) {\n        if (value.w > 0 || value.b > 0) {\n          let dom = document.getElementById(square);\n          dom.classList.add('attacked');\n          dom.style.setProperty('--separator', this.getRatio(value.w, value.b) + '%');\n        }\n      } // this.setState({white_moves, black_moves});\n\n    };\n\n    this.squareColorConv = color => {\n      if (color === 'light') return 'w';else if (color === 'dark') return 'b';\n    };\n\n    this.removeClassFromAll = remove => {\n      document.querySelectorAll('.' + remove).forEach(el => el.classList.remove(remove));\n    };\n\n    this.removeClassesFromAll = (...classes) => {\n      classes.forEach(e => document.querySelectorAll('.' + e).forEach(el => el.classList.remove(e)));\n    };\n\n    this.moveIsPawnMove = this.moveIsPawnMove.bind(this);\n    this.state = {\n      colorToMove: chess.turn(),\n      selected_move: 0,\n      piece_clicked: false,\n      // board: chess.board().flat(),\n      history: [],\n      // single moves \n      fen_history: [chess.fen()],\n      // moves in fen \n      flipped: false,\n      loaded_game: null,\n      popUp: false,\n      control: false,\n      white_moves: null,\n      showGames: false,\n      black_moves: null\n    };\n  }\n\n  initSquares() {\n    let squares = {};\n    squareID.forEach(e => {\n      squares[e] = {\n        'w': 0,\n        'b': 0\n      };\n    });\n    return squares;\n  }\n\n  render() {\n    // let arr = this.state.flipped ? chess.board().flat().reverse() : chess.board().flat();\n    chess.load(this.state.fen_history[this.state.selected_move]);\n    let arr = chess.board().flat();\n    let squares_ids = this.state.flipped ? squareID.reverse() : squareID;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"chessboard\",\n        className: \"chessboard\",\n        children: arr.map((square, i) => {\n          return square ? /*#__PURE__*/_jsxDEV(\"div\", {\n            onDragOver: this.dragOverHandler,\n            onDragLeave: this.dragLeaveHandler,\n            onDrop: e => this.dropHandler(e, squareID[i]),\n            \"data-square\": SQUARES[squares_ids[i]],\n            id: squares_ids[i],\n            className: \"square\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `piece ${this.colorConv(square.color)} ${square.type}`,\n              draggable: \"true\",\n              \"data-position\": squares_ids[i],\n              onDragStart: e => this.dragStartHandler(e, squares_ids[i]),\n              onDragEnd: () => this.dragEndHandler,\n              onClick: () => this.handlePieceClick(squares_ids[i])\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 19\n            }, this)\n          }, 'square' + i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            \"data-square\": SQUARES[squares_ids[i]],\n            id: squares_ids[i],\n            onDragOver: this.dragOverHandler,\n            onDragLeave: this.dragLeaveHandler,\n            onClick: () => this.handleClick(squares_ids[i]),\n            onDrop: e => this.dropHandler(e, squares_ids[i]),\n            className: \"square\"\n          }, 'square' + i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Moves, {\n        onClick: this.moveClick,\n        selected_move: this.state.selected_move,\n        moves: this.state.history,\n        colorToMove: this.state.colorToMove,\n        evalClick: this.handleEvalClick,\n        flip: this.flipClick,\n        control: this.handleControlClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button_wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          text: \"Random Position\",\n          onClick: this.handleEvalClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          text: \"Enter PGN\",\n          onClick: this.pgnClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          text: \"Evaluate\",\n          onClick: this.handleControlClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          text: \"Hide Pieces\",\n          onClick: this.handleHideClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          text: \"Famous Games\",\n          onClick: this.handleGamesClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          text: \"Server\",\n          onClick: this.serverClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), this.state.popUp ? /*#__PURE__*/_jsxDEV(PopUp, {\n        text: this.state.popUp.text,\n        closePopup: this.state.popUp.closePopup\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }, this) : '', this.state.showGames ? /*#__PURE__*/_jsxDEV(GamesList, {\n        file: GAMES_FILEPATH\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 33\n      }, this) : '']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this);\n  }\n\n  // diagonalPawnMoves(square, color){\n  //   if(this.isOnFirstOrLastRank(square)) return false; \n  //   let moves = [];\n  //   let [l, r] = color==='w' ? [-9, -7] : [7, 9];\n  //   switch(this.isOnEdge(square)){\n  //     case 0:\n  //       moves.push(squareID[square+l], squareID[square+r]);\n  //       break;\n  //     case 1: \n  //       moves.push(squareID[square+r]);\n  //       break;\n  //     case 2: \n  //       moves.push(squareID[square+l]);\n  //       break;\n  //     default: moves.push(squareID[square+l], squareID[square+r]);\n  //       break; \n  //   }\n  //   return moves;\n  // }\n  isOnFirstOrLastRank(square) {\n    return square >= 0 && square <= 7 || square >= 56 && square <= 63;\n  }\n  /*\n  return 1 ... left Edge, \n         2 ... right edge \n         0 ... not on edge\n  */\n\n\n  isOnEdge(square) {\n    // if([0,8,16,24,32,40,48,56].includes(square)) return 1;\n    if (Number(square) % 8 === 0) return 1; // if([7,15,23,31,39,47,55,63].includes(square)) return 2; \n\n    if (Number(square) % 7 === 0) return 2;\n    return 0;\n  }\n  /*\n  ----------------------------------------------------------------------------------------------------------------------------------\n  ---------------------------------------------------- EVENT HANLDERS --------------------------------------------------------------\n  ----------------------------------------------------------------------------------------------------------------------------------\n  */\n\n\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.keyDownHandler);\n  }\n\n  /*\n  ----------------------------------------------------------------------------------------------------------------------------------\n  ---------------------------------------------------- ?????????????? --------------------------------------------------------------\n  ----------------------------------------------------------------------------------------------------------------------------------\n  */\n  loadGames(text, separator) {\n    let split = text.split(separator);\n    console.log(split[0]);\n    this.loadPGN(split[0]);\n  } // If square is of format piece-square, remove piece \n\n\n  getOtherChessColor() {\n    return chess.turn() === chess.WHITE ? chess.BLACK : chess.WHITE;\n  } // removeEnPassantFromFen = (fen) => {\n  //    var tokens = fen.split(/\\s+/);\n  //    tokens[3] = '-';\n  //    return tokens.join(' ');\n  // }\n\n\n  getRatio(w, b) {\n    if (w === 0 && b === 0) return 0;\n    let sum = w + b;\n    let whiteshare = w / sum * 100; // let blackshare = b/sum*100; \n    // this._square.style.setProperty(\"--separator\", whiteshare+'%');\n\n    return whiteshare;\n  }\n\n  loadPGN(pgn) {\n    let r = chess.load_pgn(pgn);\n\n    if (r) {\n      let history = chess.history();\n      chess.reset();\n      let fen_history = [chess.fen()];\n      history.forEach(e => {\n        chess.move(e);\n        fen_history.push(chess.fen());\n      }); // let fen_history = history.map(e => {\n      //   chess.move(e);\n      //   return chess.fen();   \n      // });\n\n      chess.load(fen_history[0]);\n      this.setState({\n        history,\n        fen_history,\n        loaded_game: pgn,\n        selected_move: 0\n      }, this.showBoardControl());\n    } else alert(\"error\");\n  }\n\n  getColorToMoveByMoveNumber(number) {\n    return number % 2 === 0 ? 1 : -1;\n  }\n\n  squaresOfSameColor(one, two) {\n    return chess.get(one).color === chess.get(two).color;\n  }\n\n  highlightMoves(piece) {\n    chess.moves({\n      square: piece,\n      verbose: true\n    }).forEach(move => {\n      document.getElementById(move.to).classList.add('moveable');\n    });\n  }\n\n  pieceIsTurnColor(piece) {\n    return chess.get(piece).color === chess.turn();\n  }\n\n  newMove(from, to) {\n    let res = chess.move({\n      from,\n      to\n    }); // console.log('newmove, res: ',res);\n\n    if (res) {\n      let fen_history = [...this.state.fen_history];\n      fen_history.push(chess.fen());\n      let history = [...this.state.history];\n      history.push(res.san);\n      this.setState(prevState => ({\n        selected_move: prevState.selected_move + 1,\n        history,\n        colorToMove: chess.turn(),\n        fen_history\n      }));\n      return res.san;\n    } else return false;\n  }\n\n  switchColor() {\n    return this.state.colorToMove === 1 ? -1 : 1;\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/q/Documents/WebDocuments/chess/front/src/App.js"],"names":["React","Component","Moves","PopUp","Button","GamesList","Draggable","ChessJS","Chess","chess","squareID","SQUARES","a8","b8","c8","d8","e8","f8","g8","h8","a7","b7","c7","d7","e7","f7","g7","h7","a6","b6","c6","d6","e6","f6","g6","h6","a5","b5","c5","d5","e5","f5","g5","h5","a4","b4","c4","d4","e4","f4","g4","h4","a3","b3","c3","d3","e3","f3","g3","h3","a2","b2","c2","d2","e2","f2","g2","h2","a1","b1","c1","d1","e1","f1","g1","h1","GAMES_FILEPATH","App","constructor","colorConv","color","closePopup","text","console","log","setState","popUp","loadPGN","handleEvalClick","pgn","keyDownHandler","e","keyCode","preventDefault","state","selected_move","fen_history","length","prevState","showBoardControl","dragOverHandler","requestAnimationFrame","target","classList","add","dragLeaveHandler","remove","handleControlClick","control","handleGamesClick","showGames","handleHideClick","boardFull","serverClick","fetch","method","then","res","loadGames","pgnClick","moveClick","number","colorToMove","turn","handleClick","square","clicked","piece_clicked","newMove","removeClassesFromAll","dragStartHandler","i","dataTransfer","effectAllowed","dropEffect","setData","highlightMoves","dragEndHandler","dropHandler","origin","getData","handlePieceClick","pieceIsTurnColor","document","getElementById","squaresOfSameColor","cleanUpSquare","slice","moveIsPawnMove","move","charAt","toLowerCase","squares","initSquares","other_turn","getOtherChessColor","defends_other","defended_pieces","defends","key","value","Object","entries","err","error","removeClassFromAll","w","b","dom","style","setProperty","getRatio","squareColorConv","querySelectorAll","forEach","el","classes","bind","history","fen","flipped","loaded_game","white_moves","black_moves","render","load","arr","board","flat","squares_ids","reverse","map","type","flipClick","isOnFirstOrLastRank","isOnEdge","Number","componentDidMount","addEventListener","separator","split","WHITE","BLACK","sum","whiteshare","r","load_pgn","reset","push","alert","getColorToMoveByMoveNumber","one","two","get","piece","moves","verbose","to","from","san","switchColor"],"mappings":";;AAAA,OAAO,WAAP;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,SAAP,MAAsB,kCAAtB,C,CACA;;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,OAAO,KAAKC,OAAZ,MAAyB,UAAzB;AACA,MAAMC,KAAK,GAAG,OAAOD,OAAP,KAAmB,UAAnB,GAAgCA,OAAhC,GAA0CA,OAAO,CAACC,KAAhE;AACA,MAAMC,KAAK,GAAG,IAAID,KAAJ,EAAd;AAEA,MAAME,QAAQ,GAAG,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,IAA/B,EAAqC,IAArC,EAA2C,IAA3C,EAAiD,IAAjD,EAAuD,IAAvD,EAA6D,IAA7D,EAAmE,IAAnE,EAAyE,IAAzE,EAA+E,IAA/E,EAAqF,IAArF,EAA2F,IAA3F,EAAiG,IAAjG,EAAuG,IAAvG,EAA6G,IAA7G,EAAmH,IAAnH,EAAyH,IAAzH,EAA+H,IAA/H,EAAqI,IAArI,EAA2I,IAA3I,EAAiJ,IAAjJ,EAAuJ,IAAvJ,EAA6J,IAA7J,EAAmK,IAAnK,EAAyK,IAAzK,EAA+K,IAA/K,EAAqL,IAArL,EAA2L,IAA3L,EAAiM,IAAjM,EAAuM,IAAvM,EAA6M,IAA7M,EAAmN,IAAnN,EAAyN,IAAzN,EAA+N,IAA/N,EAAqO,IAArO,EAA2O,IAA3O,EAAiP,IAAjP,EAAuP,IAAvP,EAA6P,IAA7P,EAAmQ,IAAnQ,EAAyQ,IAAzQ,EAA+Q,IAA/Q,EAAqR,IAArR,EAA2R,IAA3R,EAAiS,IAAjS,EAAuS,IAAvS,EAA6S,IAA7S,EAAmT,IAAnT,EAAyT,IAAzT,EAA+T,IAA/T,EAAqU,IAArU,EAA2U,IAA3U,EAAiV,IAAjV,EAAuV,IAAvV,EAA6V,IAA7V,EAAmW,IAAnW,EAAyW,IAAzW,EAA+W,IAA/W,EAAqX,IAArX,EAA2X,IAA3X,CAAjB;AACA,IAAIC,OAAO,GAAG;AACVC,EAAAA,EAAE,EAAI,CADI;AACDC,EAAAA,EAAE,EAAI,CADL;AACQC,EAAAA,EAAE,EAAI,CADd;AACiBC,EAAAA,EAAE,EAAI,CADvB;AAC0BC,EAAAA,EAAE,EAAI,CADhC;AACmCC,EAAAA,EAAE,EAAI,CADzC;AAC4CC,EAAAA,EAAE,EAAI,CADlD;AACqDC,EAAAA,EAAE,EAAI,CAD3D;AAEVC,EAAAA,EAAE,EAAG,EAFK;AAEDC,EAAAA,EAAE,EAAG,EAFJ;AAEQC,EAAAA,EAAE,EAAG,EAFb;AAEiBC,EAAAA,EAAE,EAAG,EAFtB;AAE0BC,EAAAA,EAAE,EAAG,EAF/B;AAEmCC,EAAAA,EAAE,EAAG,EAFxC;AAE4CC,EAAAA,EAAE,EAAG,EAFjD;AAEqDC,EAAAA,EAAE,EAAG,EAF1D;AAGVC,EAAAA,EAAE,EAAG,EAHK;AAGDC,EAAAA,EAAE,EAAG,EAHJ;AAGQC,EAAAA,EAAE,EAAG,EAHb;AAGiBC,EAAAA,EAAE,EAAG,EAHtB;AAG0BC,EAAAA,EAAE,EAAG,EAH/B;AAGmCC,EAAAA,EAAE,EAAG,EAHxC;AAG4CC,EAAAA,EAAE,EAAG,EAHjD;AAGqDC,EAAAA,EAAE,EAAG,EAH1D;AAIVC,EAAAA,EAAE,EAAG,EAJK;AAIDC,EAAAA,EAAE,EAAG,EAJJ;AAIQC,EAAAA,EAAE,EAAG,EAJb;AAIiBC,EAAAA,EAAE,EAAG,EAJtB;AAI0BC,EAAAA,EAAE,EAAG,EAJ/B;AAImCC,EAAAA,EAAE,EAAG,EAJxC;AAI4CC,EAAAA,EAAE,EAAG,EAJjD;AAIqDC,EAAAA,EAAE,EAAG,EAJ1D;AAKVC,EAAAA,EAAE,EAAG,EALK;AAKDC,EAAAA,EAAE,EAAG,EALJ;AAKQC,EAAAA,EAAE,EAAG,EALb;AAKiBC,EAAAA,EAAE,EAAG,EALtB;AAK0BC,EAAAA,EAAE,EAAG,EAL/B;AAKmCC,EAAAA,EAAE,EAAG,EALxC;AAK4CC,EAAAA,EAAE,EAAG,EALjD;AAKqDC,EAAAA,EAAE,EAAG,EAL1D;AAMVC,EAAAA,EAAE,EAAG,EANK;AAMDC,EAAAA,EAAE,EAAG,EANJ;AAMQC,EAAAA,EAAE,EAAG,EANb;AAMiBC,EAAAA,EAAE,EAAG,EANtB;AAM0BC,EAAAA,EAAE,EAAG,EAN/B;AAMmCC,EAAAA,EAAE,EAAG,EANxC;AAM4CC,EAAAA,EAAE,EAAG,EANjD;AAMqDC,EAAAA,EAAE,EAAG,EAN1D;AAOVC,EAAAA,EAAE,EAAG,EAPK;AAODC,EAAAA,EAAE,EAAG,EAPJ;AAOQC,EAAAA,EAAE,EAAG,EAPb;AAOiBC,EAAAA,EAAE,EAAG,EAPtB;AAO0BC,EAAAA,EAAE,EAAE,GAP9B;AAOmCC,EAAAA,EAAE,EAAE,GAPvC;AAO4CC,EAAAA,EAAE,EAAE,GAPhD;AAOqDC,EAAAA,EAAE,EAAE,GAPzD;AAQVC,EAAAA,EAAE,EAAE,GARM;AAQDC,EAAAA,EAAE,EAAE,GARH;AAQQC,EAAAA,EAAE,EAAE,GARZ;AAQiBC,EAAAA,EAAE,EAAE,GARrB;AAQ0BC,EAAAA,EAAE,EAAE,GAR9B;AAQmCC,EAAAA,EAAE,EAAE,GARvC;AAQ4CC,EAAAA,EAAE,EAAE,GARhD;AAQqDC,EAAAA,EAAE,EAAE;AARzD,CAAd;AAUA,MAAMC,cAAc,GAAG,WAAvB,C,CAEA;;AAEA,MAAMC,GAAN,SAAkB5E,SAAlB,CAA4B;AAC1B6E,EAAAA,WAAW,GAAE;AACX;;AADW,SAsBbC,SAtBa,GAsBDC,KAAK,IAAIA,KAAK,KAAG,GAAR,GAAc,OAAd,GAAwB,OAtBhC;;AAAA,SAwGbC,UAxGa,GAwGCC,IAAD,IAAU;AACrBC,MAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAkBF,IAAlB;AACA,UAAG,CAACA,IAAJ,EAAU,KAAKG,QAAL,CAAc;AAACC,QAAAA,KAAK,EAAE;AAAR,OAAd,EAAV,KACI;AACF,aAAKD,QAAL,CAAc;AAACC,UAAAA,KAAK,EAAE;AAAR,SAAd;AACA,aAAKC,OAAL,CAAaL,IAAb;AACD;AACF,KA/GY;;AAAA,SA+JbM,eA/Ja,GA+JK,MAAM;AACtB,UAAIC,GAAG,GAAG,iRAAV;AACA,WAAKF,OAAL,CAAaE,GAAb;AACD,KAlKY;;AAAA,SAoKbC,cApKa,GAoKKC,CAAD,IAAK;AACpB,cAAOA,CAAC,CAACC,OAAT;AACE,aAAK,EAAL;AAAS;AACPD,UAAAA,CAAC,CAACE,cAAF;;AACA,cAAG,KAAKC,KAAL,CAAWC,aAAX,GAAyB,CAAzB,IAA4B,KAAKD,KAAL,CAAWE,WAAX,CAAuBC,MAAvB,GAA8B,CAA7D,EAA+D;AAC7D,iBAAKZ,QAAL,CAAca,SAAS,KAAG;AAACH,cAAAA,aAAa,EAAEG,SAAS,CAACH,aAAV,GAAwB;AAAxC,aAAH,CAAvB,EAAuE,KAAKI,gBAAL,EAAvE,EAD6D,CAE7D;AACA;AACA;AACD;;AACD;;AACF,aAAK,EAAL;AAAS;AACPR,UAAAA,CAAC,CAACE,cAAF;;AACA,cAAG,KAAKC,KAAL,CAAWC,aAAX,IAA0B,CAA7B,EAA+B;AAC7B;AACA,iBAAKV,QAAL,CAAca,SAAS,KAAG;AAACH,cAAAA,aAAa,EAAEG,SAAS,CAACH,aAAV,GAAwB;AAAxC,aAAH,CAAvB,EAAuE,KAAKI,gBAAL,EAAvE,EAF6B,CAG7B;AACA;AACD;;AACD;;AACF,aAAK,EAAL;AAAS;AACPR,UAAAA,CAAC,CAACE,cAAF;;AACA,cAAG,KAAKC,KAAL,CAAWR,KAAd,EAAoB;AAClB,iBAAKD,QAAL,CAAc;AAACC,cAAAA,KAAK,EAAE;AAAR,aAAd;AACD;;AACD;;AACF;AAAS;AAzBX;AA2BD,KAhMY;;AAAA,SAkMbc,eAlMa,GAkMMT,CAAD,IAAO;AACvBA,MAAAA,CAAC,CAACE,cAAF,CAAiBF,CAAjB;AACAU,MAAAA,qBAAqB,CAAC,YAAY;AAChCV,QAAAA,CAAC,CAACW,MAAF,CAASC,SAAT,CAAmBC,GAAnB,CAAuB,UAAvB;AACD,OAFoB,CAArB;AAGD,KAvMY;;AAAA,SAyMbC,gBAzMa,GAyMOd,CAAD,IAAO;AACxBA,MAAAA,CAAC,CAACE,cAAF;AACAQ,MAAAA,qBAAqB,CAAC,YAAY;AAChCV,QAAAA,CAAC,CAACW,MAAF,CAASC,SAAT,CAAmBG,MAAnB,CAA0B,UAA1B;AACD,OAFoB,CAArB;AAGD,KA9MY;;AAAA,SAgNbC,kBAhNa,GAgNQ,MAAM;AACzB,UAAG,CAAC,KAAKb,KAAL,CAAWc,OAAf,EAAuB;AACrB,aAAKT,gBAAL;AACD,OAFD,MAEK,CAEJ;AACF,KAtNY;;AAAA,SAwNbU,gBAxNa,GAwNM,MAAM;AACvB,UAAIC,SAAS,GAAG,KAAKhB,KAAL,CAAWgB,SAA3B;AACA,WAAKzB,QAAL,CAAc;AAACyB,QAAAA,SAAS,EAAE,CAACA;AAAb,OAAd;AACD,KA3NY;;AAAA,SA6NbC,eA7Na,GA6NK,MAAM;AACtB;AACA5B,MAAAA,OAAO,CAACC,GAAR,CAAY3E,KAAK,CAACuG,SAAN,EAAZ;AACD,KAhOY;;AAAA,SAkObC,WAlOa,GAkOC,MAAM;AAClBC,MAAAA,KAAK,CAAC,4BAAD,EAA+B;AAACC,QAAAA,MAAM,EAAC;AAAR,OAA/B,CAAL,CACGC,IADH,CACQC,GAAG,IAAIA,GAAG,CAACnC,IAAJ,EADf,EAEGkC,IAFH,CAEQC,GAAG,IAAI;AACX,aAAKC,SAAL,CAAeD,GAAf,EAAoB,KAApB;AACD,OAJH;AAKD,KAxOY;;AAAA,SA0ObE,QA1Oa,GA0OF,MAAK;AACd;AACA,WAAKlC,QAAL,CAAc;AAACC,QAAAA,KAAK,EAAE;AACpBJ,UAAAA,IAAI,EAAE,WADc;AAEpBD,UAAAA,UAAU,EAAE,KAAKA;AAFG;AAAR,OAAd;AAID,KAhPY;;AAAA,SAkPbuC,SAlPa,GAkPAC,MAAD,IAAY;AACtB,WAAKpC,QAAL,CAAc;AAACqC,QAAAA,WAAW,EAAEjH,KAAK,CAACkH,IAAN,EAAd;AAA4B5B,QAAAA,aAAa,EAAC0B,MAAM,GAAC;AAAjD,OAAd,EAAmE,KAAKtB,gBAAL,EAAnE;AACD,KApPY;;AAAA,SAsPbyB,WAtPa,GAsPEC,MAAD,IAAY;AACxB,UAAIC,OAAO,GAAG,KAAKhC,KAAL,CAAWiC,aAAzB;;AACA,UAAGD,OAAH,EAAW;AACT,YAAG,KAAKE,OAAL,CAAaF,OAAb,EAAsBD,MAAtB,CAAH,EAAiC;AAC/B,eAAKI,oBAAL,CAA0B,UAA1B,EAAsC,QAAtC;AACA,eAAK5C,QAAL,CAAc;AAAC0C,YAAAA,aAAa,EAAE;AAAhB,WAAd;AACA,eAAK5B,gBAAL;AACD,SAJD,MAIK,CACH;AACA;AACD;AACF;AACF,KAlQY;;AAAA,SAsQb+B,gBAtQa,GAsQM,CAACvC,CAAD,EAAIwC,CAAJ,KAAU;AAC3BxC,MAAAA,CAAC,CAACyC,YAAF,CAAeC,aAAf,GAA+B,KAA/B;AACA1C,MAAAA,CAAC,CAACyC,YAAF,CAAeE,UAAf,GAA4B,MAA5B;AACA3C,MAAAA,CAAC,CAACyC,YAAF,CAAeG,OAAf,CAAuB,YAAvB,EAAqCJ,CAArC;AACA9B,MAAAA,qBAAqB,CAAC,YAAY;AAChCV,QAAAA,CAAC,CAACW,MAAF,CAASC,SAAT,CAAmBC,GAAnB,CAAuB,MAAvB;AACD,OAFoB,CAArB;AAGA,WAAKgC,cAAL,CAAoBL,CAApB;AACD,KA9QY;;AAAA,SAgRbM,cAhRa,GAgRK9C,CAAD,IAAM;AACrBA,MAAAA,CAAC,CAACE,cAAF;AACAQ,MAAAA,qBAAqB,CAAC,YAAY;AAC9BV,QAAAA,CAAC,CAACW,MAAF,CAASC,SAAT,CAAmBG,MAAnB,CAA0B,MAA1B;AACD,OAFkB,CAArB;AAGD,KArRY;;AAAA,SAuRbgC,WAvRa,GAuRC,CAAC/C,CAAD,EAAIW,MAAJ,KAAe;AAC3BX,MAAAA,CAAC,CAACE,cAAF;AACA,WAAKoC,oBAAL,CAA0B,UAA1B,EAAsC,UAAtC;AACA,UAAIU,MAAM,GAAGhD,CAAC,CAACyC,YAAF,CAAeQ,OAAf,CAAuB,YAAvB,CAAb;;AACA,UAAG,KAAKZ,OAAL,CAAaW,MAAb,EAAqBrC,MAArB,CAAH,EAAgC;AAC9B,aAAK2B,oBAAL,CAA0B,UAA1B,EAAsC,QAAtC;AACA,aAAK9B,gBAAL;AACD;AACF,KA/RY;;AAAA,SAiSb0C,gBAjSa,GAiSOhB,MAAD,IAAY;AAC7B,UAAIC,OAAO,GAAG,KAAKhC,KAAL,CAAWiC,aAAzB;;AACA,UAAG,CAACD,OAAJ,EAAY;AACV,YAAG,KAAKgB,gBAAL,CAAsBjB,MAAtB,CAAH,EAAiC;AAC/BkB,UAAAA,QAAQ,CAACC,cAAT,CAAwBnB,MAAxB,EAAgCtB,SAAhC,CAA0CC,GAA1C,CAA8C,QAA9C;AACA,eAAKgC,cAAL,CAAoBX,MAApB;AACA,eAAKxC,QAAL,CAAc;AAAC0C,YAAAA,aAAa,EAAEF;AAAhB,WAAd;AACD;AACF,OAND,MAMK;AACH,aAAKI,oBAAL,CAA0B,QAA1B,EAAoC,UAApC;;AACA,YAAG,KAAKgB,kBAAL,CAAwBpB,MAAxB,EAAgCC,OAAhC,CAAH,EAA4C;AAAE;AAC1CiB,UAAAA,QAAQ,CAACC,cAAT,CAAwBnB,MAAxB,EAAgCtB,SAAhC,CAA0CC,GAA1C,CAA8C,QAA9C;AACA,eAAKgC,cAAL,CAAoBX,MAApB;AACA,eAAKxC,QAAL,CAAc;AAAC0C,YAAAA,aAAa,EAAEF;AAAhB,WAAd;AACH,SAJD,MAIK;AAAE;AACL,cAAG,KAAKG,OAAL,CAAaF,OAAb,EAAsBD,MAAtB,CAAH,EAAiC;AAC/B,iBAAKxC,QAAL,CAAc;AAAC0C,cAAAA,aAAa,EAAE;AAAhB,aAAd;AACA,iBAAK5B,gBAAL;AACD;AACF;AACF;AACF,KAtTY;;AAAA,SAoUb+C,aApUa,GAoUIrB,MAAD,IAAYA,MAAM,CAAC5B,MAAP,GAAc,CAAd,GAAkB4B,MAAM,CAACsB,KAAP,CAAa,CAAb,CAAlB,GAAoCtB,MApUnD;;AAAA,SAsUbuB,cAtUa,GAsUIC,IAAD,IAAUA,IAAI,CAACpD,MAAL,KAAc,CAAd,IAAmBoD,IAAI,CAACC,MAAL,CAAY,CAAZ,EAAeC,WAAf,OAA+B,GAtU/D;;AAAA,SAkVbpD,gBAlVa,GAkVM,MAAM;AACvB,UAAIqD,OAAO,GAAG,KAAKC,WAAL,EAAd;AACA,UAAI9B,IAAI,GAAGlH,KAAK,CAACkH,IAAN,EAAX;AACA,UAAI+B,UAAU,GAAG,KAAKC,kBAAL,EAAjB;AAEA,UAAIC,aAAa,GAAGnJ,KAAK,CAACoJ,eAAN,CAAsBH,UAAtB,EAAkC,IAAlC,EAAwC,IAAxC,CAApB;AACAvE,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BwE,aAA7B,EANuB,CAOvB;;AAEA,UAAIE,OAAO,GAAGrJ,KAAK,CAACoJ,eAAN,CAAsBlC,IAAtB,EAA4B,IAA5B,EAAkC,IAAlC,CAAd;AACAxC,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuB0E,OAAvB,EAVuB,CAavB;AACA;AACA;;AACA,WAAK,IAAI,CAACC,GAAD,EAAMC,KAAN,CAAT,IAAyBC,MAAM,CAACC,OAAP,CAAeJ,OAAf,CAAzB,EAAiD;AAC/CC,QAAAA,GAAG,GAAG,KAAKb,aAAL,CAAmBa,GAAnB,CAAN,CAD+C,CACf;;AAChC,YAAGC,KAAK,CAAC/D,MAAN,GAAa,CAAhB,EAAkB;AAChB,cAAG;AACD;AACA;AACAuD,YAAAA,OAAO,CAACO,GAAD,CAAP,CAAapC,IAAb,KAAoBqC,KAAK,CAAC/D,MAA1B;AACD,WAJD,CAIC,OAAMkE,GAAN,EAAU;AACThF,YAAAA,OAAO,CAACiF,KAAR,CAAc,OAAd,EAAuBD,GAAvB;AACAhF,YAAAA,OAAO,CAACC,GAAR,CAAa,iBAAgB4E,KAAM,UAASD,GAAI,GAAhD;AACD;AACF;AACF;;AACD,WAAK,IAAI,CAACA,GAAD,EAAMC,KAAN,CAAT,IAAyBC,MAAM,CAACC,OAAP,CAAeN,aAAf,CAAzB,EAAuD;AACrD;AACAG,QAAAA,GAAG,GAAG,KAAKb,aAAL,CAAmBa,GAAnB,CAAN,CAFqD,CAErB;;AAChC,YAAGC,KAAK,CAAC/D,MAAN,GAAa,CAAhB,EAAkB;AAChB;AACA,cAAG;AACD;AACA;AACAuD,YAAAA,OAAO,CAACO,GAAD,CAAP,CAAaL,UAAb,KAA0BM,KAAK,CAAC/D,MAAhC;AACD,WAJD,CAIC,OAAMkE,GAAN,EAAU;AACThF,YAAAA,OAAO,CAACiF,KAAR,CAAc,OAAd,EAAuBD,GAAvB;AACAhF,YAAAA,OAAO,CAACC,GAAR,CAAa,iBAAgB4E,KAAM,UAASD,GAAI,GAAhD;AACD;AACF;AACF;;AACD5E,MAAAA,OAAO,CAACC,GAAR,CAAYoE,OAAZ;AAEA,WAAKa,kBAAL,CAAwB,UAAxB;;AACA,WAAK,IAAI,CAACxC,MAAD,EAASmC,KAAT,CAAT,IAA4BC,MAAM,CAACC,OAAP,CAAeV,OAAf,CAA5B,EAAqD;AACnD,YAAGQ,KAAK,CAACM,CAAN,GAAQ,CAAR,IAAWN,KAAK,CAACO,CAAN,GAAQ,CAAtB,EAAwB;AACtB,cAAIC,GAAG,GAAGzB,QAAQ,CAACC,cAAT,CAAwBnB,MAAxB,CAAV;AACA2C,UAAAA,GAAG,CAACjE,SAAJ,CAAcC,GAAd,CAAkB,UAAlB;AACAgE,UAAAA,GAAG,CAACC,KAAJ,CAAUC,WAAV,CAAsB,aAAtB,EAAqC,KAAKC,QAAL,CAAcX,KAAK,CAACM,CAApB,EAAsBN,KAAK,CAACO,CAA5B,IAA+B,GAApE;AACD;AACF,OArDsB,CAsDvB;;AACD,KAzYY;;AAAA,SAkbbK,eAlba,GAkbK5F,KAAK,IAAI;AACzB,UAAGA,KAAK,KAAG,OAAX,EAAoB,OAAO,GAAP,CAApB,KACK,IAAGA,KAAK,KAAG,MAAX,EAAmB,OAAO,GAAP;AACzB,KArbY;;AAAA,SAsdbqF,kBAtda,GAsdQ3D,MAAM,IAAI;AAC7BqC,MAAAA,QAAQ,CAAC8B,gBAAT,CAA0B,MAAInE,MAA9B,EAAsCoE,OAAtC,CAA8CC,EAAE,IAAEA,EAAE,CAACxE,SAAH,CAAaG,MAAb,CAAoBA,MAApB,CAAlD;AACD,KAxdY;;AAAA,SA0dbuB,oBA1da,GA0dU,CAAC,GAAG+C,OAAJ,KAAgB;AACrCA,MAAAA,OAAO,CAACF,OAAR,CAAgBnF,CAAC,IAAIoD,QAAQ,CAAC8B,gBAAT,CAA0B,MAAIlF,CAA9B,EAAiCmF,OAAjC,CAAyCC,EAAE,IAAEA,EAAE,CAACxE,SAAH,CAAaG,MAAb,CAAoBf,CAApB,CAA7C,CAArB;AACD,KA5dY;;AAEX,SAAKyD,cAAL,GAAsB,KAAKA,cAAL,CAAoB6B,IAApB,CAAyB,IAAzB,CAAtB;AACA,SAAKnF,KAAL,GAAa;AACX4B,MAAAA,WAAW,EAAEjH,KAAK,CAACkH,IAAN,EADF;AAEX5B,MAAAA,aAAa,EAAE,CAFJ;AAGXgC,MAAAA,aAAa,EAAE,KAHJ;AAIX;AACAmD,MAAAA,OAAO,EAAE,EALE;AAKE;AACblF,MAAAA,WAAW,EAAE,CAACvF,KAAK,CAAC0K,GAAN,EAAD,CANF;AAMiB;AAC5BC,MAAAA,OAAO,EAAE,KAPE;AAQXC,MAAAA,WAAW,EAAE,IARF;AASX/F,MAAAA,KAAK,EAAE,KATI;AAUXsB,MAAAA,OAAO,EAAE,KAVE;AAWX0E,MAAAA,WAAW,EAAE,IAXF;AAYXxE,MAAAA,SAAS,EAAE,KAZA;AAaXyE,MAAAA,WAAW,EAAE;AAbF,KAAb;AAeD;;AAOD9B,EAAAA,WAAW,GAAE;AACX,QAAID,OAAO,GAAG,EAAd;AACA9I,IAAAA,QAAQ,CAACoK,OAAT,CAAiBnF,CAAC,IAAE;AAClB6D,MAAAA,OAAO,CAAC7D,CAAD,CAAP,GAAa;AAAC,aAAI,CAAL;AAAO,aAAI;AAAX,OAAb;AACD,KAFD;AAGA,WAAO6D,OAAP;AACD;;AAGDgC,EAAAA,MAAM,GAAE;AACN;AACA/K,IAAAA,KAAK,CAACgL,IAAN,CAAW,KAAK3F,KAAL,CAAWE,WAAX,CAAuB,KAAKF,KAAL,CAAWC,aAAlC,CAAX;AACA,QAAI2F,GAAG,GAAGjL,KAAK,CAACkL,KAAN,GAAcC,IAAd,EAAV;AACA,QAAIC,WAAW,GAAG,KAAK/F,KAAL,CAAWsF,OAAX,GAAqB1K,QAAQ,CAACoL,OAAT,EAArB,GAA0CpL,QAA5D;AACA,wBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACE;AAAK,QAAA,EAAE,EAAC,YAAR;AAAqB,QAAA,SAAS,EAAC,YAA/B;AAAA,kBAEIgL,GAAG,CAACK,GAAJ,CAAQ,CAAClE,MAAD,EAASM,CAAT,KAAa;AACnB,iBAAON,MAAM,gBAEb;AACE,YAAA,UAAU,EAAE,KAAKzB,eADnB;AAEE,YAAA,WAAW,EAAE,KAAKK,gBAFpB;AAGE,YAAA,MAAM,EAAGd,CAAD,IAAK,KAAK+C,WAAL,CAAiB/C,CAAjB,EAAoBjF,QAAQ,CAACyH,CAAD,CAA5B,CAHf;AAIE,2BAAaxH,OAAO,CAACkL,WAAW,CAAC1D,CAAD,CAAZ,CAJtB;AAKE,YAAA,EAAE,EAAE0D,WAAW,CAAC1D,CAAD,CALjB;AAOE,YAAA,SAAS,EAAC,QAPZ;AAAA,mCAQI;AACE,cAAA,SAAS,EAAG,SAAQ,KAAKpD,SAAL,CAAe8C,MAAM,CAAC7C,KAAtB,CAA6B,IAAG6C,MAAM,CAACmE,IAAK,EADlE;AAEE,cAAA,SAAS,EAAC,MAFZ;AAGE,+BAAeH,WAAW,CAAC1D,CAAD,CAH5B;AAIE,cAAA,WAAW,EAAGxC,CAAD,IAAK,KAAKuC,gBAAL,CAAsBvC,CAAtB,EAAyBkG,WAAW,CAAC1D,CAAD,CAApC,CAJpB;AAI8D,cAAA,SAAS,EAAE,MAAI,KAAKM,cAJlF;AAKE,cAAA,OAAO,EAAE,MAAI,KAAKI,gBAAL,CAAsBgD,WAAW,CAAC1D,CAAD,CAAjC;AALf;AAAA;AAAA;AAAA;AAAA;AARJ,aAMO,WAASA,CANhB;AAAA;AAAA;AAAA;AAAA,kBAFa,gBAmBb;AACE,2BAAaxH,OAAO,CAACkL,WAAW,CAAC1D,CAAD,CAAZ,CADtB;AAEE,YAAA,EAAE,EAAE0D,WAAW,CAAC1D,CAAD,CAFjB;AAGE,YAAA,UAAU,EAAE,KAAK/B,eAHnB;AAIE,YAAA,WAAW,EAAE,KAAKK,gBAJpB;AAKE,YAAA,OAAO,EAAE,MAAI,KAAKmB,WAAL,CAAiBiE,WAAW,CAAC1D,CAAD,CAA5B,CALf;AAME,YAAA,MAAM,EAAGxC,CAAD,IAAK,KAAK+C,WAAL,CAAiB/C,CAAjB,EAAoBkG,WAAW,CAAC1D,CAAD,CAA/B,CANf;AAQE,YAAA,SAAS,EAAC;AARZ,aAOO,WAASA,CAPhB;AAAA;AAAA;AAAA;AAAA,kBAnBA;AA6BH,SA9BC;AAFJ;AAAA;AAAA;AAAA;AAAA,cADF,eAoCE,QAAC,KAAD;AACE,QAAA,OAAO,EAAE,KAAKX,SADhB;AAEE,QAAA,aAAa,EAAE,KAAK1B,KAAL,CAAWC,aAF5B;AAGE,QAAA,KAAK,EAAE,KAAKD,KAAL,CAAWoF,OAHpB;AAIE,QAAA,WAAW,EAAE,KAAKpF,KAAL,CAAW4B,WAJ1B;AAKE,QAAA,SAAS,EAAE,KAAKlC,eALlB;AAME,QAAA,IAAI,EAAE,KAAKyG,SANb;AAOE,QAAA,OAAO,EAAE,KAAKtF;AAPhB;AAAA;AAAA;AAAA;AAAA,cApCF,eA6CE;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA,gCACE,QAAC,MAAD;AAAQ,UAAA,IAAI,EAAC,iBAAb;AAA+B,UAAA,OAAO,EAAE,KAAKnB;AAA7C;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,MAAD;AAAQ,UAAA,IAAI,EAAC,WAAb;AAAyB,UAAA,OAAO,EAAE,KAAK+B;AAAvC;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE,QAAC,MAAD;AAAQ,UAAA,IAAI,EAAC,UAAb;AAAwB,UAAA,OAAO,EAAE,KAAKZ;AAAtC;AAAA;AAAA;AAAA;AAAA,gBAHF,eAIE,QAAC,MAAD;AAAQ,UAAA,IAAI,EAAC,aAAb;AAA2B,UAAA,OAAO,EAAE,KAAKI;AAAzC;AAAA;AAAA;AAAA;AAAA,gBAJF,eAKE,QAAC,MAAD;AAAQ,UAAA,IAAI,EAAC,cAAb;AAA4B,UAAA,OAAO,EAAE,KAAKF;AAA1C;AAAA;AAAA;AAAA;AAAA,gBALF,eAME,QAAC,MAAD;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAsB,UAAA,OAAO,EAAE,KAAKI;AAApC;AAAA;AAAA;AAAA;AAAA,gBANF;AAAA;AAAA;AAAA;AAAA;AAAA,cA7CF,EAqDG,KAAKnB,KAAL,CAAWR,KAAX,gBACC,QAAC,KAAD;AACE,QAAA,IAAI,EAAE,KAAKQ,KAAL,CAAWR,KAAX,CAAiBJ,IADzB;AAEE,QAAA,UAAU,EAAE,KAAKY,KAAL,CAAWR,KAAX,CAAiBL;AAF/B;AAAA;AAAA;AAAA;AAAA,cADD,GAKG,EA1DN,EA2DG,KAAKa,KAAL,CAAWgB,SAAX,gBAAuB,QAAC,SAAD;AAAW,QAAA,IAAI,EAAElC;AAAjB;AAAA;AAAA;AAAA;AAAA,cAAvB,GAA6D,EA3DhE;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AA+DD;;AAWD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAsH,EAAAA,mBAAmB,CAACrE,MAAD,EAAQ;AACzB,WAAQA,MAAM,IAAE,CAAR,IAAWA,MAAM,IAAE,CAApB,IAAyBA,MAAM,IAAE,EAAR,IAAYA,MAAM,IAAE,EAApD;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEsE,EAAAA,QAAQ,CAACtE,MAAD,EAAQ;AACd;AACA,QAAGuE,MAAM,CAACvE,MAAD,CAAN,GAAe,CAAf,KAAmB,CAAtB,EAAyB,OAAO,CAAP,CAFX,CAGd;;AACA,QAAGuE,MAAM,CAACvE,MAAD,CAAN,GAAe,CAAf,KAAmB,CAAtB,EAAyB,OAAO,CAAP;AACzB,WAAO,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEwE,EAAAA,iBAAiB,GAAE;AACjBtD,IAAAA,QAAQ,CAACuD,gBAAT,CAA0B,SAA1B,EAAqC,KAAK5G,cAA1C;AACD;;AA2JD;AACF;AACA;AACA;AACA;AACE4B,EAAAA,SAAS,CAACpC,IAAD,EAAOqH,SAAP,EAAiB;AACxB,QAAIC,KAAK,GAAGtH,IAAI,CAACsH,KAAL,CAAWD,SAAX,CAAZ;AACApH,IAAAA,OAAO,CAACC,GAAR,CAAYoH,KAAK,CAAC,CAAD,CAAjB;AACA,SAAKjH,OAAL,CAAaiH,KAAK,CAAC,CAAD,CAAlB;AACD,GAlUyB,CAoU1B;;;AAKA7C,EAAAA,kBAAkB,GAAE;AAClB,WAAOlJ,KAAK,CAACkH,IAAN,OAAiBlH,KAAK,CAACgM,KAAvB,GAA+BhM,KAAK,CAACiM,KAArC,GAA6CjM,KAAK,CAACgM,KAA1D;AACD,GA3UyB,CA6U1B;AACA;AACA;AACA;AACA;;;AA2DA9B,EAAAA,QAAQ,CAACL,CAAD,EAAIC,CAAJ,EAAM;AACZ,QAAGD,CAAC,KAAG,CAAJ,IAAOC,CAAC,KAAG,CAAd,EAAiB,OAAO,CAAP;AACjB,QAAIoC,GAAG,GAAGrC,CAAC,GAAGC,CAAd;AACA,QAAIqC,UAAU,GAAGtC,CAAC,GAACqC,GAAF,GAAM,GAAvB,CAHY,CAIZ;AAEA;;AACA,WAAOC,UAAP;AACD;;AAGDrH,EAAAA,OAAO,CAACE,GAAD,EAAK;AACV,QAAIoH,CAAC,GAAGpM,KAAK,CAACqM,QAAN,CAAerH,GAAf,CAAR;;AACA,QAAGoH,CAAH,EAAK;AACH,UAAI3B,OAAO,GAAGzK,KAAK,CAACyK,OAAN,EAAd;AACAzK,MAAAA,KAAK,CAACsM,KAAN;AACA,UAAI/G,WAAW,GAAG,CAACvF,KAAK,CAAC0K,GAAN,EAAD,CAAlB;AACAD,MAAAA,OAAO,CAACJ,OAAR,CAAgBnF,CAAC,IAAE;AACjBlF,QAAAA,KAAK,CAAC4I,IAAN,CAAW1D,CAAX;AACAK,QAAAA,WAAW,CAACgH,IAAZ,CAAiBvM,KAAK,CAAC0K,GAAN,EAAjB;AACD,OAHD,EAJG,CAQH;AACA;AACA;AACA;;AACA1K,MAAAA,KAAK,CAACgL,IAAN,CAAWzF,WAAW,CAAC,CAAD,CAAtB;AACA,WAAKX,QAAL,CAAc;AAAC6F,QAAAA,OAAD;AAAUlF,QAAAA,WAAV;AAAuBqF,QAAAA,WAAW,EAAE5F,GAApC;AAAyCM,QAAAA,aAAa,EAAE;AAAxD,OAAd,EAA0E,KAAKI,gBAAL,EAA1E;AAED,KAfD,MAeM8G,KAAK,CAAC,OAAD,CAAL;AACP;;AAIDC,EAAAA,0BAA0B,CAACzF,MAAD,EAAQ;AAChC,WAAOA,MAAM,GAAC,CAAP,KAAW,CAAX,GAAe,CAAf,GAAmB,CAAC,CAA3B;AACD;;AASDwB,EAAAA,kBAAkB,CAACkE,GAAD,EAAMC,GAAN,EAAU;AAC1B,WAAO3M,KAAK,CAAC4M,GAAN,CAAUF,GAAV,EAAenI,KAAf,KAAuBvE,KAAK,CAAC4M,GAAN,CAAUD,GAAV,EAAepI,KAA7C;AACD;;AAEDwD,EAAAA,cAAc,CAAC8E,KAAD,EAAO;AACnB7M,IAAAA,KAAK,CAAC8M,KAAN,CAAY;AAAC1F,MAAAA,MAAM,EAACyF,KAAR;AAAeE,MAAAA,OAAO,EAAC;AAAvB,KAAZ,EAA0C1C,OAA1C,CAAkDzB,IAAI,IAAE;AACtDN,MAAAA,QAAQ,CAACC,cAAT,CAAwBK,IAAI,CAACoE,EAA7B,EAAiClH,SAAjC,CAA2CC,GAA3C,CAA+C,UAA/C;AACD,KAFD;AAGD;;AAIDsC,EAAAA,gBAAgB,CAACwE,KAAD,EAAO;AACrB,WAAO7M,KAAK,CAAC4M,GAAN,CAAUC,KAAV,EAAiBtI,KAAjB,KAA2BvE,KAAK,CAACkH,IAAN,EAAlC;AACD;;AAEDK,EAAAA,OAAO,CAAC0F,IAAD,EAAOD,EAAP,EAAU;AACf,QAAIpG,GAAG,GAAG5G,KAAK,CAAC4I,IAAN,CAAW;AAACqE,MAAAA,IAAD;AAAMD,MAAAA;AAAN,KAAX,CAAV,CADe,CAEf;;AACA,QAAGpG,GAAH,EAAO;AACL,UAAIrB,WAAW,GAAG,CAAC,GAAG,KAAKF,KAAL,CAAWE,WAAf,CAAlB;AACAA,MAAAA,WAAW,CAACgH,IAAZ,CAAiBvM,KAAK,CAAC0K,GAAN,EAAjB;AACA,UAAID,OAAO,GAAG,CAAC,GAAG,KAAKpF,KAAL,CAAWoF,OAAf,CAAd;AACAA,MAAAA,OAAO,CAAC8B,IAAR,CAAa3F,GAAG,CAACsG,GAAjB;AACA,WAAKtI,QAAL,CAAca,SAAS,KACrB;AAACH,QAAAA,aAAa,EAAEG,SAAS,CAACH,aAAV,GAAwB,CAAxC;AAA2CmF,QAAAA,OAA3C;AAAoDxD,QAAAA,WAAW,EAACjH,KAAK,CAACkH,IAAN,EAAhE;AAA8E3B,QAAAA;AAA9E,OADqB,CAAvB;AAGA,aAAOqB,GAAG,CAACsG,GAAX;AACD,KATD,MASM,OAAO,KAAP;AACP;;AAUDC,EAAAA,WAAW,GAAE;AAAE,WAAO,KAAK9H,KAAL,CAAW4B,WAAX,KAA2B,CAA3B,GAA+B,CAAC,CAAhC,GAAoC,CAA3C;AAA+C;;AA/dpC;;AAke5B,eAAe7C,GAAf","sourcesContent":["import './App.css';\nimport React, { Component } from 'react';\nimport Moves from './components/Moves/Moves';\nimport PopUp from './components/PopUp/PopUp';\nimport Button from './components/Button/Button';\nimport GamesList from './components/GamesList/GamesList';\n// import Squares from './components/Squares/Squares';\nimport Draggable from 'react-draggable';\nimport * as ChessJS from 'chess.js';\nconst Chess = typeof ChessJS === \"function\" ? ChessJS : ChessJS.Chess;\nconst chess = new Chess();\n\nconst squareID = [\"a8\", \"b8\", \"c8\", \"d8\", \"e8\", \"f8\", \"g8\", \"h8\", \"a7\", \"b7\", \"c7\", \"d7\", \"e7\", \"f7\", \"g7\", \"h7\", \"a6\", \"b6\", \"c6\", \"d6\", \"e6\", \"f6\", \"g6\", \"h6\", \"a5\", \"b5\", \"c5\", \"d5\", \"e5\", \"f5\", \"g5\", \"h5\", \"a4\", \"b4\", \"c4\", \"d4\", \"e4\", \"f4\", \"g4\", \"h4\", \"a3\", \"b3\", \"c3\", \"d3\", \"e3\", \"f3\", \"g3\", \"h3\", \"a2\", \"b2\", \"c2\", \"d2\", \"e2\", \"f2\", \"g2\", \"h2\", \"a1\", \"b1\", \"c1\", \"d1\", \"e1\", \"f1\", \"g1\", \"h1\"];\nvar SQUARES = {\n    a8:   0, b8:   1, c8:   2, d8:   3, e8:   4, f8:   5, g8:   6, h8:   7,\n    a7:  16, b7:  17, c7:  18, d7:  19, e7:  20, f7:  21, g7:  22, h7:  23,\n    a6:  32, b6:  33, c6:  34, d6:  35, e6:  36, f6:  37, g6:  38, h6:  39,\n    a5:  48, b5:  49, c5:  50, d5:  51, e5:  52, f5:  53, g5:  54, h5:  55,\n    a4:  64, b4:  65, c4:  66, d4:  67, e4:  68, f4:  69, g4:  70, h4:  71,\n    a3:  80, b3:  81, c3:  82, d3:  83, e3:  84, f3:  85, g3:  86, h3:  87,\n    a2:  96, b2:  97, c2:  98, d2:  99, e2: 100, f2: 101, g2: 102, h2: 103,\n    a1: 112, b1: 113, c1: 114, d1: 115, e1: 116, f1: 117, g1: 118, h1: 119\n  };\nconst GAMES_FILEPATH = 'games.txt'; \n\n// console.log(chess.board().flat().reverse());\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.moveIsPawnMove = this.moveIsPawnMove.bind(this);\n    this.state = {\n      colorToMove: chess.turn(),\n      selected_move: 0,\n      piece_clicked: false,\n      // board: chess.board().flat(),\n      history: [], // single moves \n      fen_history: [chess.fen()], // moves in fen \n      flipped: false,\n      loaded_game: null,\n      popUp: false, \n      control: false,\n      white_moves: null,\n      showGames: false,\n      black_moves: null\n    };  \n  }\n\n  \n\n  colorConv = color => color==='w' ? 'white' : 'black';\n\n\n  initSquares(){\n    let squares = {}; \n    squareID.forEach(e=>{\n      squares[e] = {'w':0,'b':0};\n    });\n    return squares;\n  }\n\n\n  render(){\n    // let arr = this.state.flipped ? chess.board().flat().reverse() : chess.board().flat();\n    chess.load(this.state.fen_history[this.state.selected_move]);\n    let arr = chess.board().flat();\n    let squares_ids = this.state.flipped ? squareID.reverse() : squareID;\n    return(\n      <div className='container'>\n        <div id=\"chessboard\" className='chessboard'> \n          {\n            arr.map((square, i)=>{\n              return square \n              ? \n              <div \n                onDragOver={this.dragOverHandler} \n                onDragLeave={this.dragLeaveHandler} \n                onDrop={(e)=>this.dropHandler(e, squareID[i])} \n                data-square={SQUARES[squares_ids[i]]}\n                id={squares_ids[i]}\n                key={'square'+i} \n                className='square'> \n                  <div \n                    className={`piece ${this.colorConv(square.color)} ${square.type}`}\n                    draggable='true'\n                    data-position={squares_ids[i]}\n                    onDragStart={(e)=>this.dragStartHandler(e, squares_ids[i])} onDragEnd={()=>this.dragEndHandler}\n                    onClick={()=>this.handlePieceClick(squares_ids[i])} \n                  />\n              </div>\n              : \n              <div \n                data-square={SQUARES[squares_ids[i]]}\n                id={squares_ids[i]}\n                onDragOver={this.dragOverHandler} \n                onDragLeave={this.dragLeaveHandler} \n                onClick={()=>this.handleClick(squares_ids[i])} \n                onDrop={(e)=>this.dropHandler(e, squares_ids[i])} \n                key={'square'+i} \n                className='square' \n            />;\n          })\n        }\n        </div>\n        <Moves \n          onClick={this.moveClick} \n          selected_move={this.state.selected_move}\n          moves={this.state.history}\n          colorToMove={this.state.colorToMove}\n          evalClick={this.handleEvalClick}\n          flip={this.flipClick}\n          control={this.handleControlClick}\n          /> \n        <div className=\"button_wrapper\"> \n          <Button text='Random Position' onClick={this.handleEvalClick} />\n          <Button text='Enter PGN' onClick={this.pgnClick} />\n          <Button text='Evaluate' onClick={this.handleControlClick} />\n          <Button text='Hide Pieces' onClick={this.handleHideClick} />\n          <Button text='Famous Games' onClick={this.handleGamesClick} />\n          <Button text='Server' onClick={this.serverClick} />\n        </div>\n        {this.state.popUp ?  \n          <PopUp\n            text={this.state.popUp.text}  \n            closePopup={this.state.popUp.closePopup}  \n          />  \n          : ''}\n        {this.state.showGames ? <GamesList file={GAMES_FILEPATH} /> : ''}\n      </div> \n    );\n  } \n\n  closePopup = (text) => {\n    console.log(\"hi\", text);\n    if(!text) this.setState({popUp: false});\n    else{\n      this.setState({popUp: false}); \n      this.loadPGN(text);\n    }\n  }\n\n  // diagonalPawnMoves(square, color){\n  //   if(this.isOnFirstOrLastRank(square)) return false; \n  //   let moves = [];\n  //   let [l, r] = color==='w' ? [-9, -7] : [7, 9];\n  //   switch(this.isOnEdge(square)){\n  //     case 0:\n  //       moves.push(squareID[square+l], squareID[square+r]);\n  //       break;\n  //     case 1: \n  //       moves.push(squareID[square+r]);\n  //       break;\n  //     case 2: \n  //       moves.push(squareID[square+l]);\n  //       break;\n  //     default: moves.push(squareID[square+l], squareID[square+r]);\n  //       break; \n  //   }\n  //   return moves;\n  // }\n\n  isOnFirstOrLastRank(square){\n    return (square>=0&&square<=7)||(square>=56&&square<=63);\n  }\n\n  /*\n  return 1 ... left Edge, \n         2 ... right edge \n         0 ... not on edge\n  */\n  isOnEdge(square){\n    // if([0,8,16,24,32,40,48,56].includes(square)) return 1;\n    if(Number(square)%8===0) return 1;\n    // if([7,15,23,31,39,47,55,63].includes(square)) return 2; \n    if(Number(square)%7===0) return 2; \n    return 0; \n  }\n\n  /*\n  ----------------------------------------------------------------------------------------------------------------------------------\n  ---------------------------------------------------- EVENT HANLDERS --------------------------------------------------------------\n  ----------------------------------------------------------------------------------------------------------------------------------\n  */\n  componentDidMount(){\n    document.addEventListener(\"keydown\", this.keyDownHandler);\n  }\n\n  handleEvalClick = () => {    \n    let pgn = \"1. d4 d5 2. c4 c6 3. Nf3 Nf6 4. Nc3 e6 5. e3 Nbd7 6. Bd3 dxc4 7. Bxc4 b5 8. Bd3 Bd6 9. O-O O-O 10. Qc2 Bb7 11. a3 Rc8 12. Ng5 c5 13. Nxh7 Ng4 14. f4 cxd4 15. exd4 Bc5 16. Be2 Nde5 17. Bxg4 Bxd4+ 18. Kh1 Nxg4 19. Nxf8 f5 20. Ng6 Qf6 21. h3 Qxg6 22. Qe2 Qh5 23. Qd3 Be3 0-1\";\n    this.loadPGN(pgn);\n  }\n\n  keyDownHandler = (e)=>{\n    switch(e.keyCode){\n      case 39: // Right arrow \n        e.preventDefault();\n        if(this.state.selected_move+1<=this.state.fen_history.length-1){ \n          this.setState(prevState=>({selected_move: prevState.selected_move+1}), this.showBoardControl());  \n          // this.setState(prevState=>({selected_move: prevState.selected_move+1}));                \n          // this.removeClassFromAll('selected');\n          // document.getElementById('m'+this.state.selected_move+1).classList.add('selected');\n        }\n        break;\n      case 37: // Left arrow \n        e.preventDefault();\n        if(this.state.selected_move>=1){\n          // this.setState(prevState=>({selected_move: prevState.selected_move-1}));\n          this.setState(prevState=>({selected_move: prevState.selected_move-1}), this.showBoardControl());\n          // this.removeClassFromAll('selected');\n          // document.getElementById('m'+this.state.selected_move-1).classList.add('selected');\n        }\n        break;\n      case 27: // esc \n        e.preventDefault(); \n        if(this.state.popUp){\n          this.setState({popUp: false});\n        }\n        break;\n      default: break; \n    }\n  }\n\n  dragOverHandler = (e) => {\n    e.preventDefault(e);\n    requestAnimationFrame(function () {\n      e.target.classList.add('dragover');\n    });\n  }\n  \n  dragLeaveHandler = (e) => {\n    e.preventDefault(); \n    requestAnimationFrame(function () {\n      e.target.classList.remove('dragover');\n    }); \n  }\n\n  handleControlClick = () => {    \n    if(!this.state.control){\n      this.showBoardControl();\n    }else{\n\n    }\n  }\n\n  handleGamesClick = () => {\n    let showGames = this.state.showGames;\n    this.setState({showGames: !showGames});\n  }\n\n  handleHideClick = () => {\n    // document.getElementById('board').classList.add('hidepieces');\n    console.log(chess.boardFull());\n  }\n\n  serverClick = () => {\n    fetch('http://localhost:3000/test', {method:'GET'})\n      .then(res => res.text())\n      .then(res => {\n        this.loadGames(res, '###');\n      });\n  }\n\n  pgnClick = () =>{\n    // this.setState({popUp: true});\n    this.setState({popUp: {\n      text: 'Enter PGN',\n      closePopup: this.closePopup\n    }});\n  }\n\n  moveClick = (number) => {\n    this.setState({colorToMove: chess.turn(), selected_move:number+1}, this.showBoardControl());\n  }\n\n  handleClick = (square) => {\n    let clicked = this.state.piece_clicked; \n    if(clicked){\n      if(this.newMove(clicked, square)){\n        this.removeClassesFromAll('moveable', 'active');\n        this.setState({piece_clicked: false});\n        this.showBoardControl();\n      }else{\n        // this.removeClassFromAll('active'); \n        // this.setState({piece_clicked: false })\n      }\n    }\n  }\n\n  // @e: dragEvent\n  // @i: square of dragged piece \n  dragStartHandler = (e, i) => {\n    e.dataTransfer.effectAllowed = \"all\"\n    e.dataTransfer.dropEffect = \"move\";\n    e.dataTransfer.setData(\"text/plain\", i);\n    requestAnimationFrame(function () {\n      e.target.classList.add('hide');\n    });\n    this.highlightMoves(i);   \n  }\n\n  dragEndHandler = (e) =>{\n    e.preventDefault();\n    requestAnimationFrame(function () {\n        e.target.classList.remove('hide');\n      });\n  }\n\n  dropHandler = (e, target) => {\n    e.preventDefault();\n    this.removeClassesFromAll('dragover', 'moveable'); \n    let origin = e.dataTransfer.getData('text/plain');\n    if(this.newMove(origin, target)){\n      this.removeClassesFromAll('moveable', 'active');\n      this.showBoardControl();\n    }\n  }\n\n  handlePieceClick = (square) => {\n    let clicked = this.state.piece_clicked;\n    if(!clicked){\n      if(this.pieceIsTurnColor(square)){\n        document.getElementById(square).classList.add('active');\n        this.highlightMoves(square);\n        this.setState({piece_clicked: square});\n      }\n    }else{\n      this.removeClassesFromAll('active', 'moveable');\n      if(this.squaresOfSameColor(square, clicked)){ // Wenn selbfarbiges, anderes piece gedrÃ¼ckt \n          document.getElementById(square).classList.add('active');\n          this.highlightMoves(square);\n          this.setState({piece_clicked: square});\n      }else{ // Capture \n        if(this.newMove(clicked, square)){\n          this.setState({piece_clicked: null});\n          this.showBoardControl();\n        }\n      }\n    }\n  }\n\n  /*\n  ----------------------------------------------------------------------------------------------------------------------------------\n  ---------------------------------------------------- ?????????????? --------------------------------------------------------------\n  ----------------------------------------------------------------------------------------------------------------------------------\n  */\n  loadGames(text, separator){\n    let split = text.split(separator);\n    console.log(split[0]);\n    this.loadPGN(split[0]);\n  }\n\n  // If square is of format piece-square, remove piece \n  cleanUpSquare = (square) => square.length>2 ? square.slice(1) : square;\n\n  moveIsPawnMove= (move) => move.length===3 && move.charAt(0).toLowerCase()==='p'; \n\n  getOtherChessColor(){\n    return chess.turn() === chess.WHITE ? chess.BLACK : chess.WHITE;\n  }\n\n  // removeEnPassantFromFen = (fen) => {\n  //    var tokens = fen.split(/\\s+/);\n  //    tokens[3] = '-';\n  //    return tokens.join(' ');\n  // }\n\n  showBoardControl = () => { \n    let squares = this.initSquares();\n    let turn = chess.turn(); \n    let other_turn = this.getOtherChessColor();\n\n    let defends_other = chess.defended_pieces(other_turn, true, true);\n    console.log('defends_other', defends_other);\n    // console.log(chess.boardFull());\n\n    let defends = chess.defended_pieces(turn, true, true);\n    console.log('defends', defends);\n\n\n    // Defends = object, only own color  \n    // keys: defended squares/pieces  (format e.g. 'bc8' or 'c2')\n    // values: defending square/piece (format e.g. 'pd7')\n    for (let [key, value] of Object.entries(defends)){ \n      key = this.cleanUpSquare(key);  //check whether key is square or piece \n      if(value.length>0){\n        try{\n          // squares[key][turn] += value.filter(move => !this.moveIsPawnMove(move)).length;\n          // squares[square][turn].push(value.map(e=>e.slice(1)));\n          squares[key][turn]+=value.length;\n        }catch(err){\n          console.error('Error', err);\n          console.log(` Vars: value: ${value}, key: ${key} `);\n        }\n      } \n    } \n    for (let [key, value] of Object.entries(defends_other)){\n      // console.log(`value: ${value}, key: ${key}, moveIsPawnMove: ${this.moveIsPawnMove(value)}`);\n      key = this.cleanUpSquare(key);  //check whether key is square or piece \n      if(value.length>0){\n        // let square = key.slice(1);\n        try{\n          // squares[key][other_turn] += value.filter(move => !this.moveIsPawnMove(move)).length;\n          // squares[square][turn].push(value.map(e=>e.slice(1)));\n          squares[key][other_turn]+=value.length;\n        }catch(err){\n          console.error('Error', err);\n          console.log(` Vars: value: ${value}, key: ${key} `);\n        }\n      } \n    }\n    console.log(squares);\n\n    this.removeClassFromAll('attacked');\n    for (let [square, value] of Object.entries(squares)) {\n      if(value.w>0||value.b>0){ \n        let dom = document.getElementById(square);\n        dom.classList.add('attacked');\n        dom.style.setProperty('--separator', this.getRatio(value.w,value.b)+'%');\n      }\n    }\n    // this.setState({white_moves, black_moves});\n  }\n\n  getRatio(w, b){\n    if(w===0&&b===0) return 0;  \n    let sum = w + b; \n    let whiteshare = w/sum*100; \n    // let blackshare = b/sum*100; \n    \n    // this._square.style.setProperty(\"--separator\", whiteshare+'%');\n    return whiteshare; \n  }\n\n\n  loadPGN(pgn){\n    let r = chess.load_pgn(pgn);\n    if(r){\n      let history = chess.history(); \n      chess.reset();\n      let fen_history = [chess.fen()];\n      history.forEach(e=>{\n        chess.move(e);\n        fen_history.push(chess.fen());\n      });\n      // let fen_history = history.map(e => {\n      //   chess.move(e);\n      //   return chess.fen();   \n      // });\n      chess.load(fen_history[0]);\n      this.setState({history, fen_history, loaded_game: pgn, selected_move: 0}, this.showBoardControl());\n\n    }else alert(\"error\");\n  }\n\n  \n\n  getColorToMoveByMoveNumber(number){\n    return number%2===0 ? 1 : -1; \n  }\n\n  \n\n  squareColorConv = color => {\n    if(color==='light') return 'w'; \n    else if(color==='dark') return 'b';\n  }\n\n  squaresOfSameColor(one, two){\n    return chess.get(one).color===chess.get(two).color;\n  }\n\n  highlightMoves(piece){\n    chess.moves({square:piece, verbose:true}).forEach(move=>{\n      document.getElementById(move.to).classList.add('moveable');\n    });\n  }\n\n  \n\n  pieceIsTurnColor(piece){\n    return chess.get(piece).color === chess.turn();\n  }\n\n  newMove(from, to){\n    let res = chess.move({from,to});\n    // console.log('newmove, res: ',res);\n    if(res){\n      let fen_history = [...this.state.fen_history]; \n      fen_history.push(chess.fen());\n      let history = [...this.state.history];\n      history.push(res.san);\n      this.setState(prevState => (\n        {selected_move: prevState.selected_move+1, history, colorToMove:chess.turn(), fen_history}\n      ));\n      return res.san; \n    }else return false; \n  }\n\n  removeClassFromAll = remove => {\n    document.querySelectorAll('.'+remove).forEach(el=>el.classList.remove(remove));\n  }\n\n  removeClassesFromAll = (...classes) => {\n    classes.forEach(e => document.querySelectorAll('.'+e).forEach(el=>el.classList.remove(e)));\n  }\n\n  switchColor(){ return this.state.colorToMove === 1 ? -1 : 1; }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}