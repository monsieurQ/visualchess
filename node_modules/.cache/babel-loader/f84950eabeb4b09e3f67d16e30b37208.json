{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/q/Documents/WebDocuments/ChessReact/chess/src/App.js\";\nimport './App.css';\nimport React, { Component } from 'react'; // import Board from './components/Board/Board';\n\nimport Moves from './components/Moves/Moves'; // import Square from './components/Square/Square';\n\nimport Squares from './components/Squares/Squares'; // TYPES (negative values for black)\n// PAWN - 1 \n// BISHOP - 2 \n// KNIGHT - 3 \n// ROOK - 4\n// QUEEN - 5 \n// KING - 6 \n\nconst startingPosition = [-4, -2, -3, -5, -6, -3, -2, -4, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 4, 2, 3, 5, 6, 3, 2, 4];\nconst conversion = [];\nconst rev_conversion = {};\nlet r = 0;\nlet c = 0;\nArray(64).fill(null).forEach((e, i) => {\n  conversion[i] = [r, c];\n  rev_conversion[Number('' + r + c)] = i;\n  c++;\n\n  if (c > 7) {\n    r++;\n    c = 0;\n  }\n});\n/*\n00 01 02 03 04 05 06 07 \n10 11 12 13 14 15 16 17 \n20 21 22 23 24 25 26 27 \n30 31 32 33 34 35 36 37 \n40 41 42 43 44 45 46 47 \n50 51 52 53 54 55 56 57 \n60 61 62 63 64 65 66 67 \n70 71 72 73 74 75 76 77 \n*/\n// const originalRank = {1: }\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.moveClick = number => {\n      console.log('move clicked', number);\n      this.setState(prevState => ({\n        selectedMove: number\n      }));\n    };\n\n    this.handleClick = square => {\n      let clicked = this.state.piece_clicked;\n\n      if (clicked) {\n        document.querySelectorAll('.moveable').forEach(el => el.classList.remove('moveable'));\n        this.setState({\n          piece_clicked: false\n        }, this.newMove(clicked, square));\n      }\n    };\n\n    this.handlePieceClick = square => {\n      let clicked = this.state.piece_clicked;\n\n      if (!clicked) {\n        let availableMoves = this.availableMoves(square);\n        console.log(availableMoves);\n        availableMoves.forEach(el => {\n          document.getElementById('s' + el).classList.add('moveable');\n        });\n        this.setState({\n          piece_clicked: square\n        });\n      } else {\n        this.removeClassFromAll('moveable'); // let availableMoves = (this.state.availableMoves) \n        //   ? this.state.availableMoves\n        //   : this.availableMoves(square);\n\n        this.setState({\n          piece_clicked: false\n        }, this.newMove(clicked, square));\n      }\n    };\n\n    this.dropHandler = (e, target) => {\n      e.preventDefault();\n      let origin = e.dataTransfer.getData('text/plain');\n      this.removeClassFromAll('dragover');\n      this.newMove(origin, target); // e.target.classList.remove('dragover');\n      // let target = e.target.dataset.position; \n      // let origin = e.dataTransfer.getData(\"text/plain\");\n      // this.newMove(origin, target);\n    };\n\n    this.state = {\n      currentMove: 0,\n      lastMove: null,\n      colorToMove: 1,\n      piece_clicked: false,\n      remove_classes: null,\n      selectedMove: 0,\n      positions: [startingPosition],\n      // 64-Array \n      availableMoves: null\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Squares, {\n        position: this.state.positions[this.state.selectedMove],\n        onClick: this.handleClick,\n        pClick: this.handlePieceClick,\n        onDrop: this.dropHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"moves\",\n        children: [\" \", /*#__PURE__*/_jsxDEV(Moves, {\n          onClick: this.moveClick,\n          lastMove: this.state.lastMove,\n          colorToMove: this.state.colorToMove\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 34\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this);\n  }\n\n  convertBack(row, column) {\n    return rev_conversion[Number('' + row + column)];\n  }\n\n  availableMoves(square) {\n    let moves = [];\n    let position = this.state.positions[this.state.positions.length - 1];\n    let piece = position[square];\n    if (piece === 0) return;\n    let [row, column] = conversion[square];\n    let multiplier = piece > 0 ? 1 : -1;\n\n    switch (piece) {\n      case 1:\n        // PAWN-white\n        if (row === 6 && !this.hasPiece(position[square - 16])) moves.push(square - 16); // 2 forward\n\n        if (!this.hasPiece(position[square - 8])) moves.push(square - 8); // 1 forward \n\n        if (column >= 1 && row >= 1 && this.hasOpposingPiece(piece, position[this.convertBack(row - 1, column - 1)])) moves.push(this.convertBack(row - 1, column - 1)); // up-left-capture \n\n        if (column <= 6 && row >= 1 && this.hasOpposingPiece(piece, position[this.convertBack(row - 1, column + 1)])) moves.push(this.convertBack(row - 1, column + 1)); // up-right-capture \n\n        break;\n\n      case -1:\n        //PAWN-black\n        if (row === 1 && !this.hasPiece(position[square + 16])) moves.push(square + 16); // 2 forward\n\n        if (!this.hasPiece(position[square + 8])) moves.push(square + 8); // 1 forward \n\n        if (column >= 1 && row <= 6 && this.hasOpposingPiece(piece, position[this.convertBack(row + 1, column - 1)])) moves.push(this.convertBack(row + 1, column - 1)); // down-left-capture \n\n        if (column <= 6 && row <= 6 && this.hasOpposingPiece(piece, position[this.convertBack(row + 1, column + 1)])) moves.push(this.convertBack(row + 1, column + 1)); // down-right-capture \n\n        break;\n\n      case 2:\n      case -2:\n        //BISHOPS \n        let r = row;\n        let left = true;\n        let right = true;\n        let lc = column;\n        let rc = column;\n\n        for (r = r + 1; r <= 7; r++) {\n          // UNTEN \n          if (!left && !right) break;\n\n          if (left) {\n            lc -= 1;\n            if (lc < 0) left = false;else {\n              let current_square = this.convertBack(r, lc);\n              let current_piece = position[current_square];\n\n              if (this.hasPiece(current_piece)) {\n                if (this.hasAlliedPiece(piece, current_piece)) left = false;else {\n                  moves.push(current_square);\n                  left = false;\n                }\n              } else moves.push(current_square);\n            }\n          }\n\n          if (right) {\n            rc += 1;\n            if (rc > 7) right = false;else {\n              let current_square = this.convertBack(r, rc);\n              let current_piece = position[current_square];\n\n              if (this.hasPiece(current_piece)) {\n                if (this.hasAlliedPiece(piece, current_piece)) right = false;else {\n                  moves.push(current_square);\n                  right = false;\n                }\n              } else moves.push(current_square);\n            }\n          }\n        }\n\n        r = row;\n        left = true;\n        right = true;\n        lc = column;\n        rc = column;\n\n        for (r = r - 1; r >= 0; r--) {\n          // OBEN \n          if (!left && !right) break;\n\n          if (left) {\n            lc -= 1;\n            if (lc < 0) left = false;else {\n              let current_square = this.convertBack(r, lc);\n              let current_piece = position[current_square];\n\n              if (this.hasPiece(current_piece)) {\n                if (this.hasAlliedPiece(piece, current_piece)) left = false;else {\n                  moves.push(current_square);\n                  left = false;\n                }\n              } else moves.push(current_square);\n            }\n          }\n\n          if (right) {\n            rc += 1;\n            if (rc > 7) right = false;else {\n              let current_square = this.convertBack(r, rc);\n              let current_piece = position[current_square];\n\n              if (this.hasPiece(current_piece)) {\n                if (this.hasAlliedPiece(piece, current_piece)) right = false;else {\n                  moves.push(current_square);\n                  right = false;\n                }\n              } else moves.push(current_square);\n            }\n          }\n        }\n\n        break;\n\n      case 3:\n      case -3:\n        //KNIGHTS \n        let current_square;\n\n        if (row + 1 <= 7) {\n          // UNTEN\n          current_square = this.convertBack(row + 1, column - 2);\n          if (column - 2 >= 0 && (!this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square]))) moves.push(current_square);\n          current_square = this.convertBack(row + 1, column + 2);\n          if (column + 2 <= 7 && (!this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square]))) moves.push(current_square);\n\n          if (row + 2 <= 7) {\n            current_square = this.convertBack(row + 2, column - 1);\n            if (column - 1 >= 0 && (!this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square]))) moves.push(current_square);\n            current_square = this.convertBack(row + 2, column + 1);\n            if (column + 1 <= 7 && (!this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square]))) moves.push(current_square);\n          }\n        }\n\n        if (row - 1 >= 0) {\n          // OBEN\n          current_square = this.convertBack(row - 1, column - 2);\n          if (column - 2 >= 0 && (!this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square]))) moves.push(current_square);\n          current_square = this.convertBack(row - 1, column + 2);\n          if (column + 2 <= 7 && (!this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square]))) moves.push(current_square);\n\n          if (row - 2 >= 0) {\n            current_square = this.convertBack(row - 2, column - 1);\n            if (column - 1 >= 0 && (!this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square]))) moves.push(current_square);\n            current_square = this.convertBack(row - 2, column + 1);\n            if (column + 1 <= 7 && (!this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square]))) moves.push(current_square);\n          }\n        }\n\n        break;\n\n      case 4:\n      case -4:\n        //ROOKS \n        //OBEN \n        for (let r = row - 1; r >= 0; r--) {\n          let current_square = this.convertBack(r, column);\n\n          if (this.hasPiece(current_piece)) {\n            if (this.hasAlliedPiece(current_piece)) break;\n            moves.push(current_square);\n            break;\n          }\n\n          moves.push(current_square);\n        }\n\n        for (let r = row + 1; r <= 7; r++) {\n          //UNTEN\n          let current_square = this.convertBack(r, column);\n          let current_piece = position[current_square];\n\n          if (this.hasPiece(current_piece)) {\n            if (this.hasAlliedPiece(current_piece)) break;\n            moves.push(current_square);\n            break;\n          }\n\n          moves.push(current_square);\n        }\n\n        for (let c = column + 1; c <= 7; c++) {\n          //RECHTS\n          let current_square = this.convertBack(row, c);\n          let current_piece = position[current_square];\n\n          if (this.hasPiece(current_piece)) {\n            if (this.hasAlliedPiece(current_piece)) break;\n            moves.push(current_square);\n            break;\n          }\n\n          moves.push(current_square);\n        }\n\n        for (let c = column - 1; c >= 0; c--) {\n          //LINKS\n          let current_square = this.convertBack(row, c);\n          let current_piece = position[current_square];\n\n          if (this.hasPiece(current_piece)) {\n            if (this.hasAlliedPiece(current_piece)) break;\n            moves.push(current_square);\n            break;\n          }\n\n          moves.push(current_square);\n        }\n\n        break;\n    }\n\n    return moves;\n  }\n\n  removeClassFromAll(remove) {\n    document.querySelectorAll('.' + remove).forEach(el => el.classList.remove(remove));\n  }\n\n  switchColor() {\n    return this.state.colorToMove === 1 ? -1 : 1;\n  }\n\n  getColor(piece) {\n    return piece < 0 ? -1 : 1;\n  }\n\n  hasPiece(piece) {\n    return Math.abs(piece) > 0;\n  }\n\n  hasOpposingPiece(piece1, piece2) {\n    return this.hasPiece(piece2) && this.getColor(piece1) !== this.getColor(piece2);\n  }\n\n  hasAlliedPiece(piece1, piece2) {\n    return this.hasPiece(piece2) && this.getColor(piece1) === this.getColor(piece2);\n  }\n\n  newMove(from, to) {\n    let positions = JSON.parse(JSON.stringify(this.state.positions));\n    let old_position = Array.from(positions[positions.length - 1]);\n    let new_position = Array.from(old_position);\n    if (this.getColor(old_position[from]) !== this.state.colorToMove) return;\n\n    if (this.hasPiece(old_position[to])) {\n      if (this.getColor(old_position[from]) === this.getColor(old_position[to])) return;\n    }\n\n    let moved_piece = old_position[from];\n    new_position[to] = new_position[from];\n    new_position[from] = 0;\n    positions.push(new_position);\n    this.setState(prevState => ({\n      positions: positions,\n      lastMove: [prevState.currentMove, moved_piece, to],\n      currentMove: prevState.currentMove + 1,\n      selectedMove: prevState.selectedMove + 1,\n      colorToMove: this.switchColor()\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/q/Documents/WebDocuments/ChessReact/chess/src/App.js"],"names":["React","Component","Moves","Squares","startingPosition","conversion","rev_conversion","r","c","Array","fill","forEach","e","i","Number","App","constructor","moveClick","number","console","log","setState","prevState","selectedMove","handleClick","square","clicked","state","piece_clicked","document","querySelectorAll","el","classList","remove","newMove","handlePieceClick","availableMoves","getElementById","add","removeClassFromAll","dropHandler","target","preventDefault","origin","dataTransfer","getData","currentMove","lastMove","colorToMove","remove_classes","positions","render","convertBack","row","column","moves","position","length","piece","multiplier","hasPiece","push","hasOpposingPiece","left","right","lc","rc","current_square","current_piece","hasAlliedPiece","switchColor","getColor","Math","abs","piece1","piece2","from","to","JSON","parse","stringify","old_position","new_position","moved_piece"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, { Component } from 'react';\n// import Board from './components/Board/Board';\nimport Moves from './components/Moves/Moves';\n// import Square from './components/Square/Square';\nimport Squares from './components/Squares/Squares';\n\n\n// TYPES (negative values for black)\n// PAWN - 1 \n// BISHOP - 2 \n// KNIGHT - 3 \n// ROOK - 4\n// QUEEN - 5 \n// KING - 6 \n\nconst startingPosition = \n[\n-4, -2, -3, -5, -6, -3, -2, -4,\n-1, -1, -1, -1, -1, -1, -1, -1,\n0, 0, 0, 0, 0, 0, 0, 0,\n0, 0, 0, 0, 0, 0, 0, 0,\n0, 0, 0, 0, 0, 0, 0, 0,\n0, 0, 0, 0, 0, 0, 0, 0,\n1, 1, 1, 1, 1, 1, 1, 1,\n4, 2, 3, 5, 6, 3, 2, 4\n];\n\nconst conversion = [];\nconst rev_conversion = {}; \nlet r = 0; let c = 0; \nArray(64).fill(null).forEach((e, i)=>{\n  conversion[i] = [r, c];\n  rev_conversion[Number(''+r+c)] = i;\n  c++; \n  if(c>7){\n    r++;\n    c=0;\n  }\n});\n\n/*\n00 01 02 03 04 05 06 07 \n10 11 12 13 14 15 16 17 \n20 21 22 23 24 25 26 27 \n30 31 32 33 34 35 36 37 \n40 41 42 43 44 45 46 47 \n50 51 52 53 54 55 56 57 \n60 61 62 63 64 65 66 67 \n70 71 72 73 74 75 76 77 \n*/\n\n// const originalRank = {1: }\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      currentMove: 0,\n      lastMove: null,\n      colorToMove: 1,\n      piece_clicked: false,\n      remove_classes: null,\n      selectedMove: 0,\n      positions: [startingPosition], // 64-Array \n      availableMoves: null\n    };  \n  }\n\n  render(){\n    return(\n      <div className='container'>\n        <Squares position={this.state.positions[this.state.selectedMove]} onClick={this.handleClick} pClick={this.handlePieceClick} onDrop={this.dropHandler} /> \n        <div className='moves' > <Moves onClick={this.moveClick} lastMove={this.state.lastMove} colorToMove={this.state.colorToMove} /> </div>\n      </div> \n    );\n  } \n\n  convertBack(row, column){\n    return rev_conversion[Number(''+row+column)]; \n  }\n\n  availableMoves(square){\n    let moves = [];\n    let position = this.state.positions[this.state.positions.length-1];\n    let piece = position[square]; \n    if(piece===0) return;\n  \n    let [row, column] = conversion[square];\n    let multiplier = (piece>0) ? 1 : -1; \n    switch(piece){\n\n      case 1: // PAWN-white\n        if(row===6 && !this.hasPiece(position[square-16])) moves.push(square-16); // 2 forward\n        if(!this.hasPiece(position[square-8])) moves.push(square-8); // 1 forward \n        \n        if(column>=1 && row >=1 && this.hasOpposingPiece(piece, position[this.convertBack(row-1, column-1)])) moves.push(this.convertBack(row-1, column-1)); // up-left-capture \n        if(column<=6 && row >=1 && this.hasOpposingPiece(piece, position[this.convertBack(row-1, column+1)])) moves.push(this.convertBack(row-1, column+1)); // up-right-capture \n        break;\n      case -1: //PAWN-black\n        if(row===1 && !this.hasPiece(position[square+16])) moves.push(square+16); // 2 forward\n        if(!this.hasPiece(position[square+8])) moves.push(square+8); // 1 forward \n        \n        if(column>=1 && row<=6 && this.hasOpposingPiece(piece, position[this.convertBack(row+1, column-1)])) moves.push(this.convertBack(row+1, column-1)); // down-left-capture \n        if(column<=6 && row<=6 && this.hasOpposingPiece(piece, position[this.convertBack(row+1, column+1)])) moves.push(this.convertBack(row+1, column+1)); // down-right-capture \n        break;\n\n      case 2: case -2: //BISHOPS \n        let r = row; \n        let left = true; let right = true; \n        let lc = column; let rc = column; \n        for(r=r+1;r<=7;r++){ // UNTEN \n          if(!left && !right) break; \n          if(left){\n            lc-=1;\n            if(lc<0) left = false; \n            else{\n              let current_square = this.convertBack(r, lc);\n              let current_piece = position[current_square];\n              if(this.hasPiece(current_piece)){\n                if(this.hasAlliedPiece(piece, current_piece)) left = false; \n                else{\n                  moves.push(current_square); \n                  left = false; \n                }\n              }else moves.push(current_square);\n            }\n          }if(right){\n            rc+=1;\n            if(rc>7) right = false; \n            else{\n              let current_square = this.convertBack(r, rc);\n              let current_piece = position[current_square];\n              if(this.hasPiece(current_piece)){\n                if(this.hasAlliedPiece(piece, current_piece)) right = false; \n                else{\n                  moves.push(current_square); \n                  right = false; \n                }\n              }else moves.push(current_square);\n            }\n          }\n        }\n        r = row; \n        left = true; right = true; \n        lc = column; rc = column; \n        for(r=r-1;r>=0;r--){ // OBEN \n          if(!left && !right) break; \n          if(left){\n            lc-=1;\n            if(lc<0) left = false; \n            else{\n              let current_square = this.convertBack(r, lc);\n              let current_piece = position[current_square];\n              if(this.hasPiece(current_piece)){\n                if(this.hasAlliedPiece(piece, current_piece)) left = false; \n                else{\n                  moves.push(current_square); \n                  left = false; \n                }\n              }else moves.push(current_square);\n            }\n          }if(right){\n            rc+=1;\n            if(rc>7) right = false; \n            else{\n              let current_square = this.convertBack(r, rc);\n              let current_piece = position[current_square];\n              if(this.hasPiece(current_piece)){\n                if(this.hasAlliedPiece(piece, current_piece)) right = false; \n                else{\n                  moves.push(current_square); \n                  right = false; \n                }\n              }else moves.push(current_square);\n            }\n          }\n        }\n        break; \n\n        case 3: case -3: //KNIGHTS \n\n          let current_square;\n          if(row+1<=7){ // UNTEN\n            current_square = this.convertBack(row+1, column-2); \n            if(column-2>=0 && ( !this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square]))) moves.push(current_square); \n            current_square = this.convertBack(row+1, column+2); \n            if(column+2<=7 && ( !this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square]))) moves.push(current_square); \n            if(row+2<=7){\n              current_square = this.convertBack(row+2, column-1); \n              if(column-1>=0 && ( !this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square]))) moves.push(current_square);\n              current_square = this.convertBack(row+2, column+1); \n              if(column+1<=7 && ( !this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square]))) moves.push(current_square); \n            }\n\n          }\n          if(row-1>=0){ // OBEN\n            current_square = this.convertBack(row-1, column-2); \n            if(column-2>=0 && ( !this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square]))) moves.push(current_square); \n            current_square = this.convertBack(row-1, column+2); \n            if(column+2<=7 && ( !this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square]))) moves.push(current_square); \n            if(row-2>=0){\n              current_square = this.convertBack(row-2, column-1); \n              if(column-1>=0 && ( !this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square]))) moves.push(current_square);\n              current_square = this.convertBack(row-2, column+1); \n              if(column+1<=7 && ( !this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square]))) moves.push(current_square); \n            }\n\n          }\n        break;\n\n        case 4: case -4: //ROOKS \n          //OBEN \n          for(let r=row-1;r>=0;r--){\n            let current_square = this.convertBack(r, column);\n            if(this.hasPiece(current_piece)){\n              if(this.hasAlliedPiece(current_piece)) break;\n              moves.push(current_square);\n              break;\n            }\n            moves.push(current_square);\n          }\n          for(let r=row+1;r<=7;r++){ //UNTEN\n            let current_square = this.convertBack(r, column);\n            let current_piece = position[current_square];\n            if(this.hasPiece(current_piece)){\n              if(this.hasAlliedPiece(current_piece)) break;\n              moves.push(current_square);\n              break;\n            }\n            moves.push(current_square);\n          }\n          for(let c=column+1;c<=7;c++){ //RECHTS\n            let current_square = this.convertBack(row, c);\n            let current_piece = position[current_square];\n            if(this.hasPiece(current_piece)){\n              if(this.hasAlliedPiece(current_piece)) break;\n              moves.push(current_square);\n              break;\n            }\n            moves.push(current_square);\n          }\n          for(let c=column-1;c>=0;c--){ //LINKS\n            let current_square = this.convertBack(row, c);\n            let current_piece = position[current_square];\n            if(this.hasPiece(current_piece)){\n              if(this.hasAlliedPiece(current_piece)) break;\n              moves.push(current_square);\n              break;\n            }\n            moves.push(current_square);\n          }\n\n        break; \n\n    } \n    return moves; \n  }\n\n  moveClick = (number) => {\n    console.log('move clicked',number);\n    this.setState(prevState=>({\n      selectedMove: number\n    }));\n  }\n\n  handleClick = (square) => {\n    let clicked = this.state.piece_clicked; \n    if(clicked){\n      document.querySelectorAll('.moveable').forEach(el=>el.classList.remove('moveable'));\n      this.setState({piece_clicked: false}, this.newMove(clicked, square));\n    }\n  }\n\n  handlePieceClick = (square) => {\n    let clicked = this.state.piece_clicked; \n    if(!clicked){\n      let availableMoves = this.availableMoves(square); \n      console.log(availableMoves);\n      availableMoves.forEach(el => {\n        document.getElementById('s'+el).classList.add('moveable');\n      });\n      this.setState({piece_clicked: square});\n    }else{\n      this.removeClassFromAll('moveable');\n      // let availableMoves = (this.state.availableMoves) \n      //   ? this.state.availableMoves\n      //   : this.availableMoves(square);\n      this.setState({piece_clicked: false}, this.newMove(clicked, square));\n    }\n  }\n\n  dropHandler = (e, target) => {\n    e.preventDefault();\n    let origin = e.dataTransfer.getData('text/plain'); \n    this.removeClassFromAll('dragover');\n    this.newMove(origin, target);\n    // e.target.classList.remove('dragover');\n    // let target = e.target.dataset.position; \n    // let origin = e.dataTransfer.getData(\"text/plain\");\n    // this.newMove(origin, target);\n  };\n\n  removeClassFromAll(remove){\n    document.querySelectorAll('.'+remove).forEach(el=>el.classList.remove(remove));\n  }\n\n  switchColor(){ return this.state.colorToMove === 1 ? -1 : 1; }\n\n  getColor(piece){ return piece<0 ? -1 : 1; }\n\n  hasPiece(piece){ return Math.abs(piece)>0; }\n\n  hasOpposingPiece(piece1, piece2){\n    return (this.hasPiece(piece2) && this.getColor(piece1)!==this.getColor(piece2));\n  }\n  hasAlliedPiece(piece1, piece2){\n    return (this.hasPiece(piece2) && this.getColor(piece1)===this.getColor(piece2));\n  }\n\n  newMove(from, to){\n    let positions = JSON.parse(JSON.stringify(this.state.positions));\n    let old_position = Array.from(positions[positions.length-1]);\n    let new_position = Array.from(old_position);\n\n    if(this.getColor(old_position[from])!==this.state.colorToMove) return; \n    if(this.hasPiece(old_position[to])){ \n      if(this.getColor(old_position[from])===this.getColor(old_position[to])) return; \n    }\n    let moved_piece = old_position[from];\n    new_position[to] = new_position[from];\n    new_position[from] = 0;\n    positions.push(new_position);\n\n    this.setState(prevState=>({\n      positions: positions,\n      lastMove: [prevState.currentMove, moved_piece, to],\n      currentMove: prevState.currentMove+1,\n      selectedMove: prevState.selectedMove+1,\n      colorToMove: this.switchColor()\n    }));\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}