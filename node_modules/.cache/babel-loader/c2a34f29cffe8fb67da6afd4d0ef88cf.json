{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _Reflect$construct = require(\"@babel/runtime-corejs2/core-js/reflect/construct\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports[\"default\"] = exports.SimpleGameClient = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/getPrototypeOf\"));\n\nvar _events = require(\"events\");\n\nvar _game = require(\"./game\");\n\nvar _gameValidation = require(\"./gameValidation\");\n\nvar _piece = require(\"./piece\");\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = (0, _getPrototypeOf2[\"default\"])(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor;\n      result = _Reflect$construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return (0, _possibleConstructorReturn2[\"default\"])(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false;\n  if (_Reflect$construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(_Reflect$construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n} // private methods\n\n\nfunction isMoveValid(src, dest, validMoves) {\n  var i = 0,\n      isFound = function isFound(expr, sq) {\n    return typeof expr === 'string' && sq.file + sq.rank === expr || expr.rank && expr.file && sq.file === expr.file && sq.rank === expr.rank;\n  },\n      squares = [];\n\n  for (i = 0; i < validMoves.length; i++) {\n    if (isFound(src, validMoves[i].src)) {\n      squares = validMoves[i].squares;\n    }\n  }\n\n  if (squares && squares.length > 0) {\n    for (i = 0; i < squares.length; i++) {\n      if (isFound(dest, squares[i])) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction updateGameClient(gameClient) {\n  return gameClient.validation.start(function (err, result) {\n    if (err) {\n      throw new Error(err);\n    }\n\n    gameClient.isCheck = result.isCheck;\n    gameClient.isCheckmate = result.isCheckmate;\n    gameClient.isRepetition = result.isRepetition;\n    gameClient.isStalemate = result.isStalemate;\n    gameClient.validMoves = result.validMoves;\n  });\n} // ctor\n\n\nvar SimpleGameClient = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(SimpleGameClient, _EventEmitter);\n\n  var _super = _createSuper(SimpleGameClient);\n\n  function SimpleGameClient(game) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, SimpleGameClient);\n    _this = _super.call(this);\n    _this.isCheck = false;\n    _this.isCheckmate = false;\n    _this.isRepetition = false;\n    _this.isStalemate = false;\n    _this.game = game;\n    _this.validMoves = [];\n    _this.validation = _gameValidation.GameValidation.create(_this.game); // bubble the game and board events\n\n    ['check', 'checkmate'].forEach(function (ev) {\n      _this.game.on(ev, function (data) {\n        return _this.emit(ev, data);\n      });\n    });\n    ['capture', 'castle', 'enPassant', 'move', 'promote'].forEach(function (ev) {\n      _this.game.board.on(ev, function (data) {\n        return _this.emit(ev, data);\n      });\n    });\n    return _this;\n  }\n\n  (0, _createClass2[\"default\"])(SimpleGameClient, [{\n    key: \"getStatus\",\n    value: function getStatus(forceUpdate) {\n      if (forceUpdate) {\n        updateGameClient(this);\n      }\n\n      return {\n        board: this.game.board,\n        isCheck: this.isCheck,\n        isCheckmate: this.isCheckmate,\n        isRepetition: this.isRepetition,\n        isStalemate: this.isStalemate,\n        validMoves: this.validMoves\n      };\n    }\n  }, {\n    key: \"move\",\n    value: function move(src, dest, promo) {\n      var move = null,\n          side = this.game.getCurrentSide();\n\n      if (src && dest && isMoveValid(src, dest, this.validMoves)) {\n        move = this.game.board.move(src, dest);\n\n        if (move) {\n          // apply pawn promotion if applicable\n          if (promo) {\n            var piece;\n\n            switch (promo) {\n              case 'B':\n                piece = _piece.Piece.createBishop(side);\n                break;\n\n              case 'N':\n                piece = _piece.Piece.createKnight(side);\n                break;\n\n              case 'Q':\n                piece = _piece.Piece.createQueen(side);\n                break;\n\n              case 'R':\n                piece = _piece.Piece.createRook(side);\n                break;\n\n              default:\n                piece = null;\n                break;\n            }\n\n            if (piece) {\n              this.game.board.promote(move.move.postSquare, piece);\n              /*\n              p.moveCount = move.move.postSquare.piece.moveCount;\n              move.move.postSquare.piece = p;\n              //*/\n            }\n          }\n\n          updateGameClient(this);\n          return move;\n        }\n      }\n\n      throw new Error(\"Move is invalid (\".concat(src, \" to \").concat(dest, \")\"));\n    }\n  }], [{\n    key: \"create\",\n    value: function create() {\n      var game = _game.Game.create(),\n          gameClient = new SimpleGameClient(game);\n\n      updateGameClient(gameClient);\n      return gameClient;\n    }\n  }]);\n  return SimpleGameClient;\n}(_events.EventEmitter);\n\nexports.SimpleGameClient = SimpleGameClient;\nvar _default = {\n  SimpleGameClient: SimpleGameClient\n};\nexports[\"default\"] = _default;","map":{"version":3,"sources":["simpleGameClient.js"],"names":["i","isFound","sq","expr","squares","validMoves","gameClient","result","SimpleGameClient","EventEmitter","GameValidation","game","Game","updateGameClient","forceUpdate","board","isCheck","isCheckmate","isRepetition","isStalemate","src","dest","promo","move","side","isMoveValid","piece","Piece"],"mappings":"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","sourcesContent":["import { EventEmitter } from 'events';\nimport { Game } from './game';\nimport { GameValidation } from './gameValidation';\nimport { Piece } from './piece';\n\n// private methods\nfunction isMoveValid (src, dest, validMoves) {\n\tlet\n\t\ti = 0,\n\t\tisFound = (expr, sq) => {\n\t\t\treturn ((typeof expr === 'string' && sq.file + sq.rank === expr) ||\n\t\t\t\t(expr.rank && expr.file &&\n\t\t\t\t\tsq.file === expr.file && sq.rank === expr.rank));\n\t\t},\n\t\tsquares = [];\n\n\tfor (i = 0; i < validMoves.length; i++) {\n\t\tif (isFound(src, validMoves[i].src)) {\n\t\t\tsquares = validMoves[i].squares;\n\t\t}\n\t}\n\n\tif (squares && squares.length > 0) {\n\t\tfor (i = 0; i < squares.length; i++) {\n\t\t\tif (isFound(dest, squares[i])) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn false;\n}\n\nfunction updateGameClient (gameClient) {\n\treturn gameClient.validation.start((err, result) => {\n\t\tif (err) {\n\t\t\tthrow new Error(err);\n\t\t}\n\n\t\tgameClient.isCheck = result.isCheck;\n\t\tgameClient.isCheckmate = result.isCheckmate;\n\t\tgameClient.isRepetition = result.isRepetition;\n\t\tgameClient.isStalemate = result.isStalemate;\n\t\tgameClient.validMoves = result.validMoves;\n\t});\n}\n\n// ctor\nexport class SimpleGameClient extends EventEmitter {\n\tconstructor (game) {\n\t\tsuper();\n\n\t\tthis.isCheck = false;\n\t\tthis.isCheckmate = false;\n\t\tthis.isRepetition = false;\n\t\tthis.isStalemate = false;\n\t\tthis.game = game;\n\t\tthis.validMoves = [];\n\t\tthis.validation = GameValidation.create(this.game);\n\n\t\t// bubble the game and board events\n\t\t['check', 'checkmate'].forEach((ev) => {\n\t\t\tthis.game.on(ev, (data) => this.emit(ev, data));\n\t\t});\n\n\t\t['capture', 'castle', 'enPassant', 'move', 'promote'].forEach((ev) => {\n\t\t\tthis.game.board.on(ev, (data) => this.emit(ev, data));\n\t\t});\n\t}\n\n\tstatic create () {\n\t\tlet\n\t\t\tgame = Game.create(),\n\t\t\tgameClient = new SimpleGameClient(game);\n\n\t\tupdateGameClient(gameClient);\n\n\t\treturn gameClient;\n\t}\n\n\tgetStatus (forceUpdate) {\n\t\tif (forceUpdate) {\n\t\t\tupdateGameClient(this);\n\t\t}\n\n\t\treturn {\n\t\t\tboard : this.game.board,\n\t\t\tisCheck : this.isCheck,\n\t\t\tisCheckmate : this.isCheckmate,\n\t\t\tisRepetition : this.isRepetition,\n\t\t\tisStalemate : this.isStalemate,\n\t\t\tvalidMoves : this.validMoves\n\t\t};\n\t}\n\n\tmove (src, dest, promo) {\n\t\tlet\n\t\t\tmove = null,\n\t\t\tside = this.game.getCurrentSide();\n\n\tif (src && dest && isMoveValid(src, dest, this.validMoves)) {\n\t\tmove = this.game.board.move(src, dest);\n\n\t\tif (move) {\n\t\t\t// apply pawn promotion if applicable\n\t\t\tif (promo) {\n\t\t\t\tlet piece;\n\n\t\t\t\tswitch (promo) {\n\t\t\t\t\tcase 'B':\n\t\t\t\t\t\tpiece = Piece.createBishop(side);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'N':\n\t\t\t\t\t\tpiece = Piece.createKnight(side);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Q':\n\t\t\t\t\t\tpiece = Piece.createQueen(side);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'R':\n\t\t\t\t\t\tpiece = Piece.createRook(side);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tpiece = null;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (piece) {\n\t\t\t\t\tthis.game.board.promote(move.move.postSquare, piece);\n\t\t\t\t\t/*\n\t\t\t\t\tp.moveCount = move.move.postSquare.piece.moveCount;\n\t\t\t\t\tmove.move.postSquare.piece = p;\n\t\t\t\t\t//*/\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tupdateGameClient(this);\n\t\t\treturn move;\n\t\t}\n\t}\n\n\tthrow new Error(`Move is invalid (${ src } to ${ dest })`);\n\t}\n}\n\nexport default { SimpleGameClient };\n"]},"metadata":{},"sourceType":"script"}