{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/q/Documents/WebDocuments/ChessReact/chess/src/components/Piece/Piece.js\";\nimport React from 'react';\nimport './Piece.css';\nimport Draggable from 'react-draggable';\nconst typeConv = {\n  1: 'pawn',\n  2: 'bishop',\n  3: 'knight',\n  4: 'rook',\n  5: 'queen',\n  6: 'king'\n}; // <Piece position={index} \n// \t\t\t// onClick={() => availableMoves(piece[0])}\n// \t\t\tonDragStart={dragStartHandler}\n// \t\t\tonDragEnd={dragEndHandler}\n// \t\t\tpiece={piece} \n\nlet colorConv = number => {\n  if (number > 0) return 'white';else return 'black';\n};\n\nconst dragStart = (e, i) => {\n  e.dataTransfer.effectAllowed = \"all\";\n  e.dataTransfer.dropEffect = \"move\";\n  e.dataTransfer.setData(\"text/plain\", i);\n  requestAnimationFrame(function () {\n    e.target.classList.add('hide');\n  });\n};\n\nconst dragEndHandler = e => {\n  e.preventDefault();\n  requestAnimationFrame(function () {\n    e.target.classList.remove('hide');\n  });\n};\n\nconst Piece = ({\n  position,\n  piece,\n  onClick\n}) => {\n  let pieceClass = `piece ${typeConv[Math.abs(piece)]} ${colorConv(piece)}`; // let key = `p${position}`;\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: pieceClass,\n    onDragEnd: dragEndHandler,\n    onDragStart: e => dragStart(e, position),\n    onClick: onClick,\n    draggable: \"true\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Piece;\nexport default Piece;\n\nvar _c;\n\n$RefreshReg$(_c, \"Piece\");","map":{"version":3,"sources":["/Users/q/Documents/WebDocuments/ChessReact/chess/src/components/Piece/Piece.js"],"names":["React","Draggable","typeConv","colorConv","number","dragStart","e","i","dataTransfer","effectAllowed","dropEffect","setData","requestAnimationFrame","target","classList","add","dragEndHandler","preventDefault","remove","Piece","position","piece","onClick","pieceClass","Math","abs"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,aAAP;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AAEA,MAAMC,QAAQ,GAAG;AAChB,KAAG,MADa;AACL,KAAE,QADG;AACO,KAAE,QADT;AACmB,KAAE,MADrB;AAC6B,KAAE,OAD/B;AACwC,KAAE;AAD1C,CAAjB,C,CAIC;AACA;AACA;AACA;AACA;;AAED,IAAIC,SAAS,GAAGC,MAAM,IAAI;AACzB,MAAGA,MAAM,GAAC,CAAV,EAAa,OAAO,OAAP,CAAb,KACK,OAAO,OAAP;AACL,CAHD;;AAKA,MAAMC,SAAS,GAAE,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAC1BD,EAAAA,CAAC,CAACE,YAAF,CAAeC,aAAf,GAA+B,KAA/B;AACAH,EAAAA,CAAC,CAACE,YAAF,CAAeE,UAAf,GAA4B,MAA5B;AACAJ,EAAAA,CAAC,CAACE,YAAF,CAAeG,OAAf,CAAuB,YAAvB,EAAqCJ,CAArC;AACAK,EAAAA,qBAAqB,CAAC,YAAY;AACjCN,IAAAA,CAAC,CAACO,MAAF,CAASC,SAAT,CAAmBC,GAAnB,CAAuB,MAAvB;AACA,GAFoB,CAArB;AAGA,CAPD;;AAQA,MAAMC,cAAc,GAAIV,CAAD,IAAM;AAC5BA,EAAAA,CAAC,CAACW,cAAF;AACAL,EAAAA,qBAAqB,CAAC,YAAY;AAC9BN,IAAAA,CAAC,CAACO,MAAF,CAASC,SAAT,CAAmBI,MAAnB,CAA0B,MAA1B;AACD,GAFkB,CAArB;AAGA,CALD;;AAQA,MAAMC,KAAK,GAAG,CAAC;AAACC,EAAAA,QAAD;AAAWC,EAAAA,KAAX;AAAkBC,EAAAA;AAAlB,CAAD,KAAgC;AAC7C,MAAIC,UAAU,GAAI,SAAQrB,QAAQ,CAACsB,IAAI,CAACC,GAAL,CAASJ,KAAT,CAAD,CAAkB,IAAGlB,SAAS,CAACkB,KAAD,CAAQ,EAAxE,CAD6C,CAE7C;;AACA,sBAAO;AAAK,IAAA,SAAS,EAAEE,UAAhB;AAA4B,IAAA,SAAS,EAAEP,cAAvC;AAAuD,IAAA,WAAW,EAAGV,CAAD,IAAOD,SAAS,CAACC,CAAD,EAAIc,QAAJ,CAApF;AAAmG,IAAA,OAAO,EAAEE,OAA5G;AAAqH,IAAA,SAAS,EAAC;AAA/H;AAAA;AAAA;AAAA;AAAA,UAAP;AACA,CAJD;;KAAMH,K;AAMN,eAAeA,KAAf","sourcesContent":["import React from 'react'; \nimport './Piece.css';\nimport Draggable from 'react-draggable';\n\nconst typeConv = {\n\t1: 'pawn', 2:'bishop', 3:'knight', 4:'rook', 5:'queen', 6:'king'\n}\n\n\t// <Piece position={index} \n\t// \t\t\t// onClick={() => availableMoves(piece[0])}\n\t// \t\t\tonDragStart={dragStartHandler}\n\t// \t\t\tonDragEnd={dragEndHandler}\n\t// \t\t\tpiece={piece} \n\nlet colorConv = number => {\n\tif(number>0) return 'white';\n\telse return 'black'; \n}\n\nconst dragStart= (e, i) => {\n\te.dataTransfer.effectAllowed = \"all\"\n\te.dataTransfer.dropEffect = \"move\";\n\te.dataTransfer.setData(\"text/plain\", i); \n\trequestAnimationFrame(function () {\n\t\te.target.classList.add('hide');\n\t});\n}\nconst dragEndHandler = (e) =>{\n\te.preventDefault();\n\trequestAnimationFrame(function () {\n    \te.target.classList.remove('hide');\n  \t});\n}\n\n\nconst Piece = ({position, piece, onClick}) => {\n\tlet pieceClass = `piece ${typeConv[Math.abs(piece)]} ${colorConv(piece)}`;\n\t// let key = `p${position}`;\n\treturn <div className={pieceClass} onDragEnd={dragEndHandler} onDragStart={(e) => dragStart(e, position)} onClick={onClick} draggable=\"true\" />;\n}\n\nexport default Piece; "]},"metadata":{},"sourceType":"module"}