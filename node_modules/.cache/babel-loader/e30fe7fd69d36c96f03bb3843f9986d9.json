{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/q/Documents/WebDocuments/chess/src/App.js\";\nimport './App.css';\nimport React, { Component } from 'react';\nimport Moves from './components/Moves/Moves';\nimport Squares from './components/Squares/Squares';\nimport Draggable from 'react-draggable';\nimport * as ChessJS from 'chess.js';\nconst Chess = typeof ChessJS === \"function\" ? ChessJS : ChessJS.Chess;\nconst chessjs = new Chess(); // import {Chess} from './chess.js' \n// TYPES (negative values for black)\n// PAWN - 1 \n// BISHOP - 2 \n// KNIGHT - 3 \n// ROOK - 4\n// QUEEN - 5 \n// KING - 6 \n\nconst startingPosition = [-4, -3, -2, -5, -6, -2, -3, -4, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 4, 3, 2, 5, 6, 2, 3, 4];\nconst conversion = [];\nconst rev_conversion = {};\nlet r = 0;\nlet c = 0;\nArray(64).fill(null).forEach((e, i) => {\n  conversion[i] = [r, c];\n  rev_conversion[Number('' + r + c)] = i;\n  c++;\n\n  if (c > 7) {\n    r++;\n    c = 0;\n  }\n});\n/*\n00 01 02 03 04 05 06 07 \n10 11 12 13 14 15 16 17 \n20 21 22 23 24 25 26 27 \n30 31 32 33 34 35 36 37 \n40 41 42 43 44 45 46 47 \n50 51 52 53 54 55 56 57 \n60 61 62 63 64 65 66 67 \n70 71 72 73 74 75 76 77 \n*/\n// Idee: in Array nach den Squares einbauen, ob könig sich bewegt hat \n//[65]=0|1 -> whiteKing moved \n//[66]=0|1 -> whiteRook short moved \n// etc. \n// und ob König gerade in Schach steht \n// (\\d{1,2})((?:(?:O-O[-0]?)|(?:[KQNBR][a-h]?x?[a-h]x?[1-8])|(?:[a-h]x?[a-h]?[1-8]))\\+?)((?:(?:O-O[-0]?)|(?:[KQNBR][a-h]?x?[a-h]x?[1-8])|(?:[a-h]x?[a-h]?[1-8]))\\+?)\n\nlet squareID = [\"a8\", \"b8\", \"c8\", \"d8\", \"e8\", \"f8\", \"g8\", \"h8\", \"a7\", \"b7\", \"c7\", \"d7\", \"e7\", \"f7\", \"g7\", \"h7\", \"a6\", \"b6\", \"c6\", \"d6\", \"e6\", \"f6\", \"g6\", \"h6\", \"a5\", \"b5\", \"c5\", \"d5\", \"e5\", \"f5\", \"g5\", \"h5\", \"a4\", \"b4\", \"c4\", \"d4\", \"e4\", \"f4\", \"g4\", \"h4\", \"a3\", \"b3\", \"c3\", \"d3\", \"e3\", \"f3\", \"g3\", \"h3\", \"a2\", \"b2\", \"c2\", \"d2\", \"e2\", \"f2\", \"g2\", \"h2\", \"a1\", \"b1\", \"c1\", \"d1\", \"e1\", \"f1\", \"g1\", \"h1\"];\nlet squareID_rev = squareID.reverse();\nconsole.log(squareID_rev);\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.dragOverHandler = e => {\n      e.preventDefault(e);\n      requestAnimationFrame(function () {\n        e.target.classList.add('dragover');\n      });\n    };\n\n    this.dragLeaveHandler = e => {\n      e.preventDefault();\n      requestAnimationFrame(function () {\n        e.target.classList.remove('dragover');\n      });\n    };\n\n    this.handleEvalClick = () => {\n      console.log(this.evalPositionObj(this.state.positions[this.state.currentMove]));\n    };\n\n    this.evalPositionObj = position => {\n      let evaluation = Array(position.length);\n      position.forEach((square, i) => {\n        evaluation[i] = {};\n        evaluation[i].occupiedBy = square;\n        let moves = this.getMoves(i, position);\n\n        if (Array.isArray(moves)) {\n          [evaluation[i].moves, evaluation[i].defends] = moves;\n        }\n\n        if (evaluation[i].defends) {\n          evaluation[i].defends.forEach(e => {\n            if (!evaluation[e]) evaluation[e] = {};\n            if (!evaluation[e].attackedBy) evaluation[e].attackedBy = [];\n            evaluation[e].attackedBy.push(i);\n          });\n        }\n      });\n      return evaluation;\n    };\n\n    this.dragStartHandler = (e, i) => {\n      console.log(i);\n      e.dataTransfer.effectAllowed = \"all\";\n      e.dataTransfer.dropEffect = \"move\";\n      e.dataTransfer.setData(\"text/plain\", i);\n      requestAnimationFrame(function () {\n        e.target.classList.add('hide');\n      });\n      let moves = this.state.evalObj[i].moves;\n      moves.forEach(el => {\n        document.getElementById('s' + el).classList.add('moveable');\n      });\n      this.setState({\n        piece_dragging: i\n      });\n    };\n\n    this.dragEndHandler = e => {\n      e.preventDefault();\n      requestAnimationFrame(function () {\n        e.target.classList.remove('hide');\n      });\n    };\n\n    this.moveClick = number => {\n      console.log('move clicked', number);\n      this.setState(prevState => ({\n        selectedMove: number,\n        evalObj: this.evalPositionObj(prevState.positions[number]),\n        colorToMove: this.getColorToMoveByMoveNumber(number)\n      }));\n    };\n\n    this.handleClick = square => {\n      let clicked = this.state.piece_clicked;\n\n      if (clicked) {\n        let moves = this.state.evalObj[clicked].moves;\n\n        if (moves.includes(square)) {\n          this.removeClassFromAll('moveable');\n          this.removeClassFromAll('active');\n          this.setState({\n            piece_clicked: false\n          }, this.newMove(clicked, square));\n        } else {// this.removeClassFromAll('active'); \n          // this.setState({piece_clicked: false })\n        }\n      }\n    };\n\n    this.handlePieceClick = (square, event) => {\n      let clicked = this.state.piece_clicked;\n\n      if (!clicked) {\n        if (this.getColorFromSquare(square) !== this.state.colorToMove) return;\n        let moves = this.state.evalObj[square].moves;\n        event.target.parentElement.classList.add('active');\n        moves.forEach(el => {\n          document.getElementById('s' + el).classList.add('moveable');\n        });\n        this.setState({\n          piece_clicked: square\n        });\n      } else {\n        this.removeClassFromAll('active');\n        this.removeClassFromAll('moveable');\n\n        if (this.getColorFromSquare(square) === this.state.colorToMove) {\n          // Wenn selbfarbiges, anderes piece gedrückt \n          event.target.parentElement.classList.add('active');\n          let moves = this.state.evalObj[square].moves;\n          moves.forEach(el => {\n            document.getElementById('s' + el).classList.add('moveable');\n          });\n          this.setState({\n            piece_clicked: square\n          });\n        } else {\n          // Capture \n          let legitmoves = this.state.evalObj[clicked].moves;\n\n          if (legitmoves.includes(square)) {\n            this.setState({\n              piece_clicked: false\n            }, this.newMove(clicked, square));\n          }\n        }\n      }\n    };\n\n    this.dropHandler = (e, target) => {\n      e.preventDefault();\n      let origin = e.dataTransfer.getData('text/plain');\n      this.removeClassFromAll('dragover');\n      this.removeClassFromAll('moveable');\n      let moves = this.state.evalObj[origin].moves;\n      if (moves.includes(target)) this.setState({\n        piece_dragging: false\n      }, this.newMove(origin, target));else this.setState({\n        piece_dragging: false\n      });\n    };\n\n    this.getMoves = this.getMoves.bind(this);\n    this.convertBack = this.convertBack.bind(this);\n    this.initChess = this.initChess.bind(this);\n    this.state = {\n      currentMove: 0,\n      lastMove: null,\n      colorToMove: 1,\n      piece_clicked: false,\n      remove_classes: null,\n      selectedMove: 0,\n      positions: [startingPosition],\n      // 64-Array \n      evalObj: this.evalPositionObj(startingPosition)\n    };\n  }\n\n  initChess() {\n    // let squares = gameClient.getStatus().board.squares; \n    // squares.forEach(square=>{\n    // })\n    // console.log(squares);\n    return 0;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"board\",\n        children: chessjs.board().flat().map((square, i) => {\n          return square ? /*#__PURE__*/_jsxDEV(\"div\", {\n            onDragOver: this.dragOverHandler,\n            onDragLeave: this.dragLeaveHandler,\n            onDrop: e => this.onDrop(e, i),\n            id: squareID[i],\n            className: \"square\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              position: i,\n              dragStart: this.dragStart,\n              dragEnd: this.dragEnd,\n              onClick: e => this.handlePieceClick(i, e),\n              piece: square.type,\n              color: square.color\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 19\n            }, this)\n          }, 'square' + i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            id: squareID[i],\n            onDragOver: this.dragOverHandler,\n            onDragLeave: this.dragLeaveHandler,\n            onClick: () => this.handleClick(i),\n            onDrop: e => this.onDrop(e, i),\n            className: \"square\"\n          }, 'square' + i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"moves\",\n        children: /*#__PURE__*/_jsxDEV(Moves, {\n          onClick: this.moveClick,\n          lastMove: this.state.lastMove,\n          colorToMove: this.state.colorToMove,\n          evalClick: this.handleEvalClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Returns array with position, but availableMoves-array instead of piece-value for respective squares \n  evalPosition(position) {\n    let evaluation = Array(position.length);\n    position.forEach((square, i) => {\n      evaluation[i] = this.availableMoves(i, position);\n    });\n    return evaluation;\n  } // Returns object for each square\n  // .occupiedBy = int, piece \n  // .moves = [squares], available moves \n  // .defends = [squares], controlling these squares \n  // .attackedBy = [squares], attacked by these squares \n\n\n  convertBack(row, column) {\n    return rev_conversion[Number('' + row + column)];\n  } // returns array: \n  // [0]->[availableMoves]\n  // [1]->[defends] \n\n\n  getMoves(square, position) {\n    // console.time('moves');\n    let moves = [];\n    let defends = [];\n    let piece = position[square];\n    if (piece === 0) return 0;\n    let [row, column] = conversion[square];\n    let multiplier = piece > 0 ? 1 : -1;\n\n    switch (Math.abs(piece)) {\n      case 1:\n        {\n          // PAWN-white\n          if (piece === 1) {\n            if (row === 6 && !this.hasPiece(position[square - 16])) moves.push(square - 16); // 2 forward\n\n            if (!this.hasPiece(position[square - 8])) moves.push(square - 8); // 1 forward \n\n            if (column >= 1 && row >= 1) {\n              defends.push(this.convertBack(row - 1, column - 1));\n              if (this.hasOpposingPiece(piece, position[this.convertBack(row - 1, column - 1)])) moves.push(this.convertBack(row - 1, column - 1)); // up-left-capture \n            }\n\n            if (column <= 6 && row >= 1) {\n              defends.push(this.convertBack(row - 1, column + 1));\n              if (this.hasOpposingPiece(piece, position[this.convertBack(row - 1, column + 1)])) moves.push(this.convertBack(row - 1, column + 1)); // up-right-capture \n            }\n          } else {\n            // PAWN-black \n            if (row === 1 && !this.hasPiece(position[square + 16])) moves.push(square + 16); // 2 forward\n\n            if (!this.hasPiece(position[square + 8])) moves.push(square + 8); // 1 forward \n\n            if (column >= 1 && row <= 6) {\n              defends.push(this.convertBack(row + 1, column - 1));\n              if (this.hasOpposingPiece(piece, position[this.convertBack(row + 1, column - 1)])) moves.push(this.convertBack(row + 1, column - 1)); // down-left-capture \n            }\n\n            if (column <= 6 && row <= 6) {\n              defends.push(this.convertBack(row + 1, column + 1));\n              if (this.hasOpposingPiece(piece, position[this.convertBack(row + 1, column + 1)])) moves.push(this.convertBack(row + 1, column + 1)); // down-right-capture \n            }\n          }\n\n          break;\n        }\n\n      case 2:\n        {\n          //BISHOPS \n          let r = row;\n          let left = true;\n          let right = true;\n          let lc = column;\n          let rc = column;\n\n          for (r = r + 1; r <= 7; r++) {\n            // UNTEN \n            if (!left && !right) break;\n\n            if (left) {\n              lc -= 1;\n              if (lc < 0) left = false;else {\n                let current_square = this.convertBack(r, lc);\n                let current_piece = position[current_square];\n\n                if (this.hasPiece(current_piece)) {\n                  if (this.hasAlliedPiece(piece, current_piece)) {\n                    left = false;\n                    defends.push(current_square);\n                  } else {\n                    moves.push(current_square);\n                    left = false;\n                  }\n                } else moves.push(current_square);\n              }\n            }\n\n            if (right) {\n              rc += 1;\n              if (rc > 7) right = false;else {\n                let current_square = this.convertBack(r, rc);\n                let current_piece = position[current_square];\n\n                if (this.hasPiece(current_piece)) {\n                  if (this.hasAlliedPiece(piece, current_piece)) {\n                    defends.push(current_square);\n                    right = false;\n                  } else {\n                    moves.push(current_square);\n                    right = false;\n                  }\n                } else moves.push(current_square);\n              }\n            }\n          }\n\n          r = row;\n          left = true;\n          right = true;\n          lc = column;\n          rc = column;\n\n          for (r = r - 1; r >= 0; r--) {\n            // OBEN \n            if (!left && !right) break;\n\n            if (left) {\n              lc -= 1;\n              if (lc < 0) left = false;else {\n                let current_square = this.convertBack(r, lc);\n                let current_piece = position[current_square];\n\n                if (this.hasPiece(current_piece)) {\n                  if (this.hasAlliedPiece(piece, current_piece)) {\n                    defends.push(current_square);\n                    left = false;\n                  } else {\n                    moves.push(current_square);\n                    left = false;\n                  }\n                } else moves.push(current_square);\n              }\n            }\n\n            if (right) {\n              rc += 1;\n              if (rc > 7) right = false;else {\n                let current_square = this.convertBack(r, rc);\n                let current_piece = position[current_square];\n\n                if (this.hasPiece(current_piece)) {\n                  if (this.hasAlliedPiece(piece, current_piece)) {\n                    right = false;\n                    defends.push(current_square);\n                  } else {\n                    moves.push(current_square);\n                    right = false;\n                  }\n                } else moves.push(current_square);\n              }\n            }\n          }\n\n          defends = defends.concat(moves);\n          break;\n        }\n\n      case 3:\n        {\n          //KNIGHTS \n          let current_square;\n\n          if (row + 1 <= 7) {\n            // UNTEN\n            current_square = this.convertBack(row + 1, column - 2);\n\n            if (column - 2 >= 0) {\n              defends.push(current_square);\n              if (!this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square])) moves.push(current_square);\n            }\n\n            current_square = this.convertBack(row + 1, column + 2);\n\n            if (column + 2 <= 7) {\n              defends.push(current_square);\n              if (!this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square])) moves.push(current_square);\n            }\n\n            if (row + 2 <= 7) {\n              current_square = this.convertBack(row + 2, column - 1);\n\n              if (column - 1 >= 0) {\n                defends.push(current_square);\n                if (!this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square])) moves.push(current_square);\n              }\n\n              current_square = this.convertBack(row + 2, column + 1);\n\n              if (column + 1 <= 7) {\n                defends.push(current_square);\n                if (!this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square])) moves.push(current_square);\n              }\n            }\n          }\n\n          if (row - 1 >= 0) {\n            // OBEN\n            current_square = this.convertBack(row - 1, column - 2);\n\n            if (column - 2 >= 0) {\n              defends.push(current_square);\n              if (!this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square])) moves.push(current_square);\n            }\n\n            current_square = this.convertBack(row - 1, column + 2);\n\n            if (column + 2 <= 7) {\n              defends.push(current_square);\n              if (!this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square])) moves.push(current_square);\n            }\n\n            if (row - 2 >= 0) {\n              current_square = this.convertBack(row - 2, column - 1);\n\n              if (column - 1 >= 0) {\n                defends.push(current_square);\n                if (!this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square])) moves.push(current_square);\n              }\n\n              current_square = this.convertBack(row - 2, column + 1);\n\n              if (column + 1 <= 7) {\n                defends.push(current_square);\n                if (!this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square])) moves.push(current_square);\n              }\n            }\n          }\n\n          break;\n        }\n\n      case 4:\n        {\n          //ROOKS \n          for (let r = row - 1; r >= 0; r--) {\n            //OBEN \n            let current_square = this.convertBack(r, column);\n            let current_piece = position[current_square];\n\n            if (this.hasPiece(current_piece)) {\n              if (this.hasAlliedPiece(current_piece, piece)) {\n                defends.push(current_square);\n                break;\n              }\n\n              moves.push(current_square);\n              break;\n            }\n\n            moves.push(current_square);\n          }\n\n          for (let r = row + 1; r <= 7; r++) {\n            //UNTEN\n            let current_square = this.convertBack(r, column);\n            let current_piece = position[current_square];\n\n            if (this.hasPiece(current_piece)) {\n              if (this.hasAlliedPiece(current_piece, piece)) {\n                defends.push(current_square);\n                break;\n              }\n\n              moves.push(current_square);\n              break;\n            }\n\n            moves.push(current_square);\n          }\n\n          for (let c = column + 1; c <= 7; c++) {\n            //RECHTS\n            let current_square = this.convertBack(row, c);\n            let current_piece = position[current_square];\n\n            if (this.hasPiece(current_piece)) {\n              if (this.hasAlliedPiece(current_piece, piece)) {\n                defends.push(current_square);\n                break;\n              }\n\n              moves.push(current_square);\n              break;\n            }\n\n            moves.push(current_square);\n          }\n\n          for (let c = column - 1; c >= 0; c--) {\n            //LINKS\n            let current_square = this.convertBack(row, c);\n            let current_piece = position[current_square];\n\n            if (this.hasPiece(current_piece)) {\n              if (this.hasAlliedPiece(current_piece, piece)) {\n                defends.push(current_square);\n                break;\n              }\n\n              moves.push(current_square);\n              break;\n            }\n\n            moves.push(current_square);\n          }\n\n          defends = defends.concat(moves);\n          break;\n        }\n\n      case 5:\n        {\n          //QUEENS \n          let r = row;\n          let left = true;\n          let right = true;\n          let lc = column;\n          let rc = column;\n\n          for (r = r + 1; r <= 7; r++) {\n            // UNTEN \n            if (!left && !right) break;\n\n            if (left) {\n              lc -= 1;\n              if (lc < 0) left = false;else {\n                let current_square = this.convertBack(r, lc);\n                let current_piece = position[current_square];\n\n                if (this.hasPiece(current_piece)) {\n                  if (this.hasAlliedPiece(piece, current_piece)) {\n                    defends.push(current_square);\n                    left = false;\n                  } else {\n                    moves.push(current_square);\n                    left = false;\n                  }\n                } else moves.push(current_square);\n              }\n            }\n\n            if (right) {\n              rc += 1;\n              if (rc > 7) right = false;else {\n                let current_square = this.convertBack(r, rc);\n                let current_piece = position[current_square];\n\n                if (this.hasPiece(current_piece)) {\n                  if (this.hasAlliedPiece(piece, current_piece)) {\n                    defends.push(current_square);\n                    right = false;\n                  } else {\n                    moves.push(current_square);\n                    right = false;\n                  }\n                } else moves.push(current_square);\n              }\n            }\n          }\n\n          r = row;\n          left = true;\n          right = true;\n          lc = column;\n          rc = column;\n\n          for (r = r - 1; r >= 0; r--) {\n            // OBEN \n            if (!left && !right) break;\n\n            if (left) {\n              lc -= 1;\n              if (lc < 0) left = false;else {\n                let current_square = this.convertBack(r, lc);\n                let current_piece = position[current_square];\n\n                if (this.hasPiece(current_piece)) {\n                  if (this.hasAlliedPiece(piece, current_piece)) {\n                    defends.push(current_square);\n                    left = false;\n                  } else {\n                    moves.push(current_square);\n                    left = false;\n                  }\n                } else moves.push(current_square);\n              }\n            }\n\n            if (right) {\n              rc += 1;\n              if (rc > 7) right = false;else {\n                let current_square = this.convertBack(r, rc);\n                let current_piece = position[current_square];\n\n                if (this.hasPiece(current_piece)) {\n                  if (this.hasAlliedPiece(piece, current_piece)) {\n                    defends.push(current_square);\n                    right = false;\n                  } else {\n                    moves.push(current_square);\n                    right = false;\n                  }\n                } else moves.push(current_square);\n              }\n            }\n          }\n\n          for (r = row - 1; r >= 0; r--) {\n            //OBEN \n            let current_square = this.convertBack(r, column);\n            let current_piece = position[current_square];\n\n            if (this.hasPiece(current_piece)) {\n              if (this.hasAlliedPiece(current_piece, piece)) {\n                defends.push(current_square);\n                break;\n              }\n\n              moves.push(current_square);\n              break;\n            }\n\n            moves.push(current_square);\n          }\n\n          for (r = row + 1; r <= 7; r++) {\n            //UNTEN\n            let current_square = this.convertBack(r, column);\n            let current_piece = position[current_square];\n\n            if (this.hasPiece(current_piece)) {\n              if (this.hasAlliedPiece(current_piece, piece)) {\n                defends.push(current_square);\n                break;\n              }\n\n              moves.push(current_square);\n              break;\n            }\n\n            moves.push(current_square);\n          }\n\n          for (c = column + 1; c <= 7; c++) {\n            //RECHTS\n            let current_square = this.convertBack(row, c);\n            let current_piece = position[current_square];\n\n            if (this.hasPiece(current_piece)) {\n              if (this.hasAlliedPiece(current_piece, piece)) {\n                defends.push(current_square);\n                break;\n              }\n\n              moves.push(current_square);\n              break;\n            }\n\n            moves.push(current_square);\n          }\n\n          for (c = column - 1; c >= 0; c--) {\n            //LINKS\n            let current_square = this.convertBack(row, c);\n            let current_piece = position[current_square];\n\n            if (this.hasPiece(current_piece)) {\n              if (this.hasAlliedPiece(current_piece, piece)) {\n                defends.push(current_square);\n                break;\n              }\n\n              moves.push(current_square);\n              break;\n            }\n\n            moves.push(current_square);\n          }\n\n          defends = defends.concat(moves);\n          break;\n        }\n\n      case 6:\n        {\n          //KING\n          let col_r = true;\n          let col_l = true;\n          let cs;\n          let cp;\n\n          if (row + 1 <= 7) {\n            cs = this.convertBack(row + 1, column); // 1 unten\n\n            cp = position[cs];\n            if (!this.hasPiece(cp)) moves.push(cs);else {\n              if (this.hasOpposingPiece(cp, piece)) moves.push(cs);else defends.push(cs);\n            }\n\n            if (column + 1 <= 7) {\n              cs = this.convertBack(row + 1, column + 1); //unten rechts \n\n              cp = position[cs];\n              if (!this.hasPiece(cp)) moves.push(cs);else {\n                if (this.hasOpposingPiece(cp, piece)) moves.push(cs);else defends.push(cs);\n              }\n            } else col_r = false;\n\n            if (column - 1 >= 0) {\n              cs = this.convertBack(row + 1, column - 1); // unten links\n\n              cp = position[cs];\n              if (!this.hasPiece(cp)) moves.push(cs);else {\n                if (this.hasOpposingPiece(cp, piece)) moves.push(cs);else defends.push(cs);\n              }\n            } else col_l = false;\n          }\n\n          if (col_r) {\n            if (column + 1 <= 7) {\n              cs = this.convertBack(row, column + 1); // 1 rechts\n\n              cp = position[cs];\n              if (!this.hasPiece(cp)) moves.push(cs);else {\n                if (this.hasOpposingPiece(cp, piece)) moves.push(cs);else defends.push(cs);\n              }\n            } else col_r = false;\n          }\n\n          if (col_l) {\n            if (column - 1 >= 0) {\n              cs = this.convertBack(row, column - 1); // 1 links\n\n              cp = position[cs];\n              if (!this.hasPiece(cp)) moves.push(cs);else {\n                if (this.hasOpposingPiece(cp, piece)) moves.push(cs);else defends.push(cs);\n              }\n            } else col_l = false;\n          }\n\n          if (row - 1 >= 0) {\n            cs = this.convertBack(row - 1, column); // 1 oben\n\n            cp = position[cs];\n            if (!this.hasPiece(cp)) moves.push(cs);else {\n              if (this.hasOpposingPiece(cp, piece)) moves.push(cs);else defends.push(cs);\n            }\n\n            if (col_r) {\n              cs = this.convertBack(row - 1, column + 1); // oben rechts\n\n              cp = position[cs];\n              if (!this.hasPiece(cp)) moves.push(cs);else {\n                if (this.hasOpposingPiece(cp, piece)) moves.push(cs);else defends.push(cs);\n              }\n            }\n\n            if (col_l) {\n              cs = this.convertBack(row - 1, column - 1); // oben links\n\n              cp = position[cs];\n              if (!this.hasPiece(cp)) moves.push(cs);else {\n                if (this.hasOpposingPiece(cp, piece)) moves.push(cs);else defends.push(cs);\n              }\n            }\n          }\n\n          defends = defends.concat(moves);\n          break;\n        }\n\n      case 0:\n        return 0;\n\n      default:\n        return 0;\n    }\n\n    return [moves, defends];\n  }\n\n  availableMoves(square, position) {\n    // console.time('moves');\n    let moves = [];\n    let piece = position[square];\n    if (piece === 0) return 0;\n    let [row, column] = conversion[square];\n    let multiplier = piece > 0 ? 1 : -1;\n\n    switch (Math.abs(piece)) {\n      case 1:\n        {\n          // PAWN-white\n          if (piece === 1) {\n            if (row === 6 && !this.hasPiece(position[square - 16])) moves.push(square - 16); // 2 forward\n\n            if (!this.hasPiece(position[square - 8])) moves.push(square - 8); // 1 forward \n\n            if (column >= 1 && row >= 1 && this.hasOpposingPiece(piece, position[this.convertBack(row - 1, column - 1)])) moves.push(this.convertBack(row - 1, column - 1)); // up-left-capture \n\n            if (column <= 6 && row >= 1 && this.hasOpposingPiece(piece, position[this.convertBack(row - 1, column + 1)])) moves.push(this.convertBack(row - 1, column + 1)); // up-right-capture \n          } else {\n            if (row === 1 && !this.hasPiece(position[square + 16])) moves.push(square + 16); // 2 forward\n\n            if (!this.hasPiece(position[square + 8])) moves.push(square + 8); // 1 forward \n\n            if (column >= 1 && row <= 6 && this.hasOpposingPiece(piece, position[this.convertBack(row + 1, column - 1)])) moves.push(this.convertBack(row + 1, column - 1)); // down-left-capture \n\n            if (column <= 6 && row <= 6 && this.hasOpposingPiece(piece, position[this.convertBack(row + 1, column + 1)])) moves.push(this.convertBack(row + 1, column + 1)); // down-right-capture \n          }\n\n          break;\n        }\n\n      case 2:\n        {\n          //BISHOPS \n          let r = row;\n          let left = true;\n          let right = true;\n          let lc = column;\n          let rc = column;\n\n          for (r = r + 1; r <= 7; r++) {\n            // UNTEN \n            if (!left && !right) break;\n\n            if (left) {\n              lc -= 1;\n              if (lc < 0) left = false;else {\n                let current_square = this.convertBack(r, lc);\n                let current_piece = position[current_square];\n\n                if (this.hasPiece(current_piece)) {\n                  if (this.hasAlliedPiece(piece, current_piece)) left = false;else {\n                    moves.push(current_square);\n                    left = false;\n                  }\n                } else moves.push(current_square);\n              }\n            }\n\n            if (right) {\n              rc += 1;\n              if (rc > 7) right = false;else {\n                let current_square = this.convertBack(r, rc);\n                let current_piece = position[current_square];\n\n                if (this.hasPiece(current_piece)) {\n                  if (this.hasAlliedPiece(piece, current_piece)) right = false;else {\n                    moves.push(current_square);\n                    right = false;\n                  }\n                } else moves.push(current_square);\n              }\n            }\n          }\n\n          r = row;\n          left = true;\n          right = true;\n          lc = column;\n          rc = column;\n\n          for (r = r - 1; r >= 0; r--) {\n            // OBEN \n            if (!left && !right) break;\n\n            if (left) {\n              lc -= 1;\n              if (lc < 0) left = false;else {\n                let current_square = this.convertBack(r, lc);\n                let current_piece = position[current_square];\n\n                if (this.hasPiece(current_piece)) {\n                  if (this.hasAlliedPiece(piece, current_piece)) left = false;else {\n                    moves.push(current_square);\n                    left = false;\n                  }\n                } else moves.push(current_square);\n              }\n            }\n\n            if (right) {\n              rc += 1;\n              if (rc > 7) right = false;else {\n                let current_square = this.convertBack(r, rc);\n                let current_piece = position[current_square];\n\n                if (this.hasPiece(current_piece)) {\n                  if (this.hasAlliedPiece(piece, current_piece)) right = false;else {\n                    moves.push(current_square);\n                    right = false;\n                  }\n                } else moves.push(current_square);\n              }\n            }\n          }\n\n          break;\n        }\n\n      case 3:\n        {\n          //KNIGHTS \n          let current_square;\n\n          if (row + 1 <= 7) {\n            // UNTEN\n            current_square = this.convertBack(row + 1, column - 2);\n            if (column - 2 >= 0 && (!this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square]))) moves.push(current_square);\n            current_square = this.convertBack(row + 1, column + 2);\n            if (column + 2 <= 7 && (!this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square]))) moves.push(current_square);\n\n            if (row + 2 <= 7) {\n              current_square = this.convertBack(row + 2, column - 1);\n              if (column - 1 >= 0 && (!this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square]))) moves.push(current_square);\n              current_square = this.convertBack(row + 2, column + 1);\n              if (column + 1 <= 7 && (!this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square]))) moves.push(current_square);\n            }\n          }\n\n          if (row - 1 >= 0) {\n            // OBEN\n            current_square = this.convertBack(row - 1, column - 2);\n            if (column - 2 >= 0 && (!this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square]))) moves.push(current_square);\n            current_square = this.convertBack(row - 1, column + 2);\n            if (column + 2 <= 7 && (!this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square]))) moves.push(current_square);\n\n            if (row - 2 >= 0) {\n              current_square = this.convertBack(row - 2, column - 1);\n              if (column - 1 >= 0 && (!this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square]))) moves.push(current_square);\n              current_square = this.convertBack(row - 2, column + 1);\n              if (column + 1 <= 7 && (!this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square]))) moves.push(current_square);\n            }\n          }\n\n          break;\n        }\n\n      case 4:\n        {\n          //ROOKS \n          for (let r = row - 1; r >= 0; r--) {\n            //OBEN \n            let current_square = this.convertBack(r, column);\n            let current_piece = position[current_square];\n\n            if (this.hasPiece(current_piece)) {\n              if (this.hasAlliedPiece(current_piece, piece)) break;\n              moves.push(current_square);\n              break;\n            }\n\n            moves.push(current_square);\n          }\n\n          for (let r = row + 1; r <= 7; r++) {\n            //UNTEN\n            let current_square = this.convertBack(r, column);\n            let current_piece = position[current_square];\n\n            if (this.hasPiece(current_piece)) {\n              if (this.hasAlliedPiece(current_piece, piece)) break;\n              moves.push(current_square);\n              break;\n            }\n\n            moves.push(current_square);\n          }\n\n          for (let c = column + 1; c <= 7; c++) {\n            //RECHTS\n            let current_square = this.convertBack(row, c);\n            let current_piece = position[current_square];\n\n            if (this.hasPiece(current_piece)) {\n              if (this.hasAlliedPiece(current_piece, piece)) break;\n              moves.push(current_square);\n              break;\n            }\n\n            moves.push(current_square);\n          }\n\n          for (let c = column - 1; c >= 0; c--) {\n            //LINKS\n            let current_square = this.convertBack(row, c);\n            let current_piece = position[current_square];\n\n            if (this.hasPiece(current_piece)) {\n              if (this.hasAlliedPiece(current_piece, piece)) break;\n              moves.push(current_square);\n              break;\n            }\n\n            moves.push(current_square);\n          }\n\n          break;\n        }\n\n      case 5:\n        {\n          //QUEENS \n          let r = row;\n          let left = true;\n          let right = true;\n          let lc = column;\n          let rc = column;\n\n          for (r = r + 1; r <= 7; r++) {\n            // UNTEN \n            if (!left && !right) break;\n\n            if (left) {\n              lc -= 1;\n              if (lc < 0) left = false;else {\n                let current_square = this.convertBack(r, lc);\n                let current_piece = position[current_square];\n\n                if (this.hasPiece(current_piece)) {\n                  if (this.hasAlliedPiece(piece, current_piece)) left = false;else {\n                    moves.push(current_square);\n                    left = false;\n                  }\n                } else moves.push(current_square);\n              }\n            }\n\n            if (right) {\n              rc += 1;\n              if (rc > 7) right = false;else {\n                let current_square = this.convertBack(r, rc);\n                let current_piece = position[current_square];\n\n                if (this.hasPiece(current_piece)) {\n                  if (this.hasAlliedPiece(piece, current_piece)) right = false;else {\n                    moves.push(current_square);\n                    right = false;\n                  }\n                } else moves.push(current_square);\n              }\n            }\n          }\n\n          r = row;\n          left = true;\n          right = true;\n          lc = column;\n          rc = column;\n\n          for (r = r - 1; r >= 0; r--) {\n            // OBEN \n            if (!left && !right) break;\n\n            if (left) {\n              lc -= 1;\n              if (lc < 0) left = false;else {\n                let current_square = this.convertBack(r, lc);\n                let current_piece = position[current_square];\n\n                if (this.hasPiece(current_piece)) {\n                  if (this.hasAlliedPiece(piece, current_piece)) left = false;else {\n                    moves.push(current_square);\n                    left = false;\n                  }\n                } else moves.push(current_square);\n              }\n            }\n\n            if (right) {\n              rc += 1;\n              if (rc > 7) right = false;else {\n                let current_square = this.convertBack(r, rc);\n                let current_piece = position[current_square];\n\n                if (this.hasPiece(current_piece)) {\n                  if (this.hasAlliedPiece(piece, current_piece)) right = false;else {\n                    moves.push(current_square);\n                    right = false;\n                  }\n                } else moves.push(current_square);\n              }\n            }\n          }\n\n          for (r = row - 1; r >= 0; r--) {\n            //OBEN \n            let current_square = this.convertBack(r, column);\n            let current_piece = position[current_square];\n\n            if (this.hasPiece(current_piece)) {\n              if (this.hasAlliedPiece(current_piece, piece)) break;\n              moves.push(current_square);\n              break;\n            }\n\n            moves.push(current_square);\n          }\n\n          for (r = row + 1; r <= 7; r++) {\n            //UNTEN\n            let current_square = this.convertBack(r, column);\n            let current_piece = position[current_square];\n\n            if (this.hasPiece(current_piece)) {\n              if (this.hasAlliedPiece(current_piece, piece)) break;\n              moves.push(current_square);\n              break;\n            }\n\n            moves.push(current_square);\n          }\n\n          for (c = column + 1; c <= 7; c++) {\n            //RECHTS\n            let current_square = this.convertBack(row, c);\n            let current_piece = position[current_square];\n\n            if (this.hasPiece(current_piece)) {\n              if (this.hasAlliedPiece(current_piece, piece)) break;\n              moves.push(current_square);\n              break;\n            }\n\n            moves.push(current_square);\n          }\n\n          for (c = column - 1; c >= 0; c--) {\n            //LINKS\n            let current_square = this.convertBack(row, c);\n            let current_piece = position[current_square];\n\n            if (this.hasPiece(current_piece)) {\n              if (this.hasAlliedPiece(current_piece, piece)) break;\n              moves.push(current_square);\n              break;\n            }\n\n            moves.push(current_square);\n          }\n\n          break;\n        }\n\n      case 6:\n        {\n          //KING\n          let col_r = true;\n          let col_l = true;\n          let cs;\n          let cp;\n\n          if (row + 1 <= 7) {\n            cs = this.convertBack(row + 1, column); // 1 unten\n\n            cp = position[cs];\n            if (!this.hasPiece(cp) || this.hasOpposingPiece(cp, piece)) moves.push(cs);\n\n            if (column + 1 <= 7) {\n              cs = this.convertBack(row + 1, column + 1); //unten rechts \n\n              cp = position[cs];\n              if (!this.hasPiece(cp) || this.hasOpposingPiece(cp, piece)) moves.push(cs);\n            } else col_r = false;\n\n            if (column - 1 >= 0) {\n              cs = this.convertBack(row + 1, column - 1); // unten links\n\n              cp = position[cs];\n              if (!this.hasPiece(cp) || this.hasOpposingPiece(cp, piece)) moves.push(cs);\n            } else col_l = false;\n          }\n\n          if (col_r) {\n            if (column + 1 <= 7) {\n              cs = this.convertBack(row, column + 1); // 1 rechts\n\n              cp = position[cs];\n              if (!this.hasPiece(cp) || this.hasOpposingPiece(cp, piece)) moves.push(cs);\n            } else col_r = false;\n          }\n\n          if (col_l) {\n            if (column - 1 >= 0) {\n              cs = this.convertBack(row, column - 1); // 1 links\n\n              cp = position[cs];\n              if (!this.hasPiece(cp) || this.hasOpposingPiece(cp, piece)) moves.push(cs);\n            } else col_l = false;\n          }\n\n          if (row - 1 >= 0) {\n            cs = this.convertBack(row - 1, column); // 1 oben\n\n            cp = position[cs];\n            if (!this.hasPiece(cp) || this.hasOpposingPiece(cp, piece)) moves.push(cs);\n\n            if (col_r) {\n              cs = this.convertBack(row - 1, column + 1); // oben rechts\n\n              cp = position[cs];\n              if (!this.hasPiece(cp) || this.hasOpposingPiece(cp, piece)) moves.push(cs);\n            }\n\n            if (col_l) {\n              cs = this.convertBack(row - 1, column - 1); // oben links\n\n              cp = position[cs];\n              if (!this.hasPiece(cp) || this.hasOpposingPiece(cp, piece)) moves.push(cs);\n            }\n          }\n\n          break;\n        }\n\n      case 0:\n        return 0;\n\n      default:\n        return 0;\n    } // console.timeEnd('moves');\n\n\n    return moves;\n  } // @e: dragEvent\n  // @i: square of dragged piece \n\n\n  getColorToMoveByMoveNumber(number) {\n    return number % 2 === 0 ? 1 : -1;\n  }\n\n  removeClassFromAll(remove) {\n    document.querySelectorAll('.' + remove).forEach(el => el.classList.remove(remove));\n  }\n\n  switchColor() {\n    return this.state.colorToMove === 1 ? -1 : 1;\n  }\n\n  getColor(piece) {\n    return piece < 0 ? -1 : 1;\n  }\n\n  getColorFromSquare(square) {\n    return this.getColor(this.state.positions[this.state.currentMove][square]);\n  }\n\n  hasPiece(piece) {\n    return Math.abs(piece) > 0;\n  }\n\n  squareHasPiece(square) {\n    return this.hasPiece(this.state.positions[this.state.currentMove][square]);\n  }\n\n  squareHasOpposingPiece(square, square2) {\n    return this.getColorFromSquare(square) !== this.getColorFromSquare(square2);\n  }\n\n  hasOpposingPiece(piece1, piece2) {\n    return this.hasPiece(piece2) && this.getColor(piece1) !== this.getColor(piece2);\n  }\n\n  hasAlliedPiece(piece1, piece2) {\n    return this.hasPiece(piece2) && this.getColor(piece1) === this.getColor(piece2);\n  }\n\n  newMove(from, to) {\n    let positions = JSON.parse(JSON.stringify(this.state.positions));\n    let old_position = Array.from(positions[positions.length - 1]);\n    let new_position = Array.from(old_position);\n    if (this.getColor(old_position[from]) !== this.state.colorToMove) return;\n\n    if (this.hasPiece(old_position[to])) {\n      if (this.getColor(old_position[from]) === this.getColor(old_position[to])) return;\n    }\n\n    let moved_piece = old_position[from];\n    new_position[to] = new_position[from];\n    new_position[from] = 0;\n    positions.push(new_position);\n    this.setState(prevState => ({\n      positions: positions,\n      lastMove: [prevState.currentMove, moved_piece, to],\n      currentMove: prevState.currentMove + 1,\n      selectedMove: prevState.currentMove + 1,\n      colorToMove: this.switchColor(),\n      evalObj: this.evalPositionObj(new_position)\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/q/Documents/WebDocuments/chess/src/App.js"],"names":["React","Component","Moves","Squares","Draggable","ChessJS","Chess","chessjs","startingPosition","conversion","rev_conversion","r","c","Array","fill","forEach","e","i","Number","squareID","squareID_rev","reverse","console","log","App","constructor","dragOverHandler","preventDefault","requestAnimationFrame","target","classList","add","dragLeaveHandler","remove","handleEvalClick","evalPositionObj","state","positions","currentMove","position","evaluation","length","square","occupiedBy","moves","getMoves","isArray","defends","attackedBy","push","dragStartHandler","dataTransfer","effectAllowed","dropEffect","setData","evalObj","el","document","getElementById","setState","piece_dragging","dragEndHandler","moveClick","number","prevState","selectedMove","colorToMove","getColorToMoveByMoveNumber","handleClick","clicked","piece_clicked","includes","removeClassFromAll","newMove","handlePieceClick","event","getColorFromSquare","parentElement","legitmoves","dropHandler","origin","getData","bind","convertBack","initChess","lastMove","remove_classes","render","board","flat","map","onDrop","dragStart","dragEnd","type","color","evalPosition","availableMoves","row","column","piece","multiplier","Math","abs","hasPiece","hasOpposingPiece","left","right","lc","rc","current_square","current_piece","hasAlliedPiece","concat","col_r","col_l","cs","cp","querySelectorAll","switchColor","getColor","squareHasPiece","squareHasOpposingPiece","square2","piece1","piece2","from","to","JSON","parse","stringify","old_position","new_position","moved_piece"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, { Component } from 'react';\nimport Moves from './components/Moves/Moves';\nimport Squares from './components/Squares/Squares';\nimport Draggable from 'react-draggable';\nimport * as ChessJS from 'chess.js';\nconst Chess = typeof ChessJS === \"function\" ? ChessJS : ChessJS.Chess;\nconst chessjs = new Chess();\n\n// import {Chess} from './chess.js' \n\n\n// TYPES (negative values for black)\n// PAWN - 1 \n// BISHOP - 2 \n// KNIGHT - 3 \n// ROOK - 4\n// QUEEN - 5 \n// KING - 6 \nconst startingPosition = \n[\n-4, -3, -2, -5, -6, -2, -3, -4,\n-1, -1, -1, -1, -1, -1, -1, -1,\n0, 0, 0, 0, 0, 0, 0, 0,\n0, 0, 0, 0, 0, 0, 0, 0,\n0, 0, 0, 0, 0, 0, 0, 0,\n0, 0, 0, 0, 0, 0, 0, 0,\n1, 1, 1, 1, 1, 1, 1, 1,\n4, 3, 2, 5, 6, 2, 3, 4\n];\n\nconst conversion = [];\nconst rev_conversion = {}; \nlet r = 0; let c = 0; \nArray(64).fill(null).forEach((e, i)=>{\n  conversion[i] = [r, c];\n  rev_conversion[Number(''+r+c)] = i;\n  c++; \n  if(c>7){\n    r++;\n    c=0;\n  }\n});\n\n/*\n00 01 02 03 04 05 06 07 \n10 11 12 13 14 15 16 17 \n20 21 22 23 24 25 26 27 \n30 31 32 33 34 35 36 37 \n40 41 42 43 44 45 46 47 \n50 51 52 53 54 55 56 57 \n60 61 62 63 64 65 66 67 \n70 71 72 73 74 75 76 77 \n*/\n\n\n// Idee: in Array nach den Squares einbauen, ob könig sich bewegt hat \n//[65]=0|1 -> whiteKing moved \n//[66]=0|1 -> whiteRook short moved \n// etc. \n// und ob König gerade in Schach steht \n\n\n// (\\d{1,2})((?:(?:O-O[-0]?)|(?:[KQNBR][a-h]?x?[a-h]x?[1-8])|(?:[a-h]x?[a-h]?[1-8]))\\+?)((?:(?:O-O[-0]?)|(?:[KQNBR][a-h]?x?[a-h]x?[1-8])|(?:[a-h]x?[a-h]?[1-8]))\\+?)\n\nlet squareID = [\"a8\", \"b8\", \"c8\", \"d8\", \"e8\", \"f8\", \"g8\", \"h8\", \"a7\", \"b7\", \"c7\", \"d7\", \"e7\", \"f7\", \"g7\", \"h7\", \"a6\", \"b6\", \"c6\", \"d6\", \"e6\", \"f6\", \"g6\", \"h6\", \"a5\", \"b5\", \"c5\", \"d5\", \"e5\", \"f5\", \"g5\", \"h5\", \"a4\", \"b4\", \"c4\", \"d4\", \"e4\", \"f4\", \"g4\", \"h4\", \"a3\", \"b3\", \"c3\", \"d3\", \"e3\", \"f3\", \"g3\", \"h3\", \"a2\", \"b2\", \"c2\", \"d2\", \"e2\", \"f2\", \"g2\", \"h2\", \"a1\", \"b1\", \"c1\", \"d1\", \"e1\", \"f1\", \"g1\", \"h1\"];\nlet squareID_rev = squareID.reverse(); \nconsole.log(squareID_rev);\n\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.getMoves = this.getMoves.bind(this);\n    this.convertBack = this.convertBack.bind(this);\n    this.initChess = this.initChess.bind(this);\n\n    this.state = {\n      currentMove: 0,\n      lastMove: null,\n      colorToMove: 1,\n      piece_clicked: false,\n      remove_classes: null,\n      selectedMove: 0,\n      positions: [startingPosition], // 64-Array \n      evalObj: this.evalPositionObj(startingPosition)\n    };  \n  }\n\n  initChess(){\n    // let squares = gameClient.getStatus().board.squares; \n    // squares.forEach(square=>{\n\n    // })\n    // console.log(squares);\n    return 0;\n  }\n\n  render(){\n    return(\n      <div className='container'>\n        <div class='board'> \n          {\n            chessjs.board().flat().map((square, i)=>{\n              return square \n              ? \n              <div \n                onDragOver={this.dragOverHandler} \n                onDragLeave={this.dragLeaveHandler} \n                onDrop={(e)=>this.onDrop(e, i)} \n                id={squareID[i]}\n                key={'square'+i} \n                className='square'> \n                  <div \n                    position={i}\n                    dragStart={this.dragStart} dragEnd={this.dragEnd}\n                    onClick={(e)=>this.handlePieceClick(i, e)} \n                    piece={square.type}\n                    color={square.color} \n                  /> \n              </div>\n              : \n              <div \n                id={squareID[i]}\n                onDragOver={this.dragOverHandler} \n                onDragLeave={this.dragLeaveHandler} \n                onClick={()=>this.handleClick(i)} \n                onDrop={(e)=>this.onDrop(e, i)} \n                key={'square'+i} \n                className='square' \n            />;\n          })\n        }\n      </div>\n        {/*\n        <Squares\n          squares={chessjs.board().flat()}\n          onClick={this.handleClick} pClick={this.handlePieceClick} \n          dragStart={this.dragStartHandler} dragEnd={this.dragEndHandler} onDrop={this.dropHandler}\n          colorToMove={this.state.colorToMove}\n          />\n        */}\n      <div className='moves'> \n        <Moves \n          onClick={this.moveClick} \n          lastMove={this.state.lastMove} \n          colorToMove={this.state.colorToMove} \n          evalClick={this.handleEvalClick}\n          /> \n      </div>\n      </div> \n    );\n  } \n\n  dragOverHandler = (e) => {\n    e.preventDefault(e);\n    requestAnimationFrame(function () {\n      e.target.classList.add('dragover');\n    });\n  }\n  \n  dragLeaveHandler = (e) => {\n    e.preventDefault(); \n    requestAnimationFrame(function () {\n      e.target.classList.remove('dragover');\n    }); \n  }\n\n  handleEvalClick = () => {\n    console.log(this.evalPositionObj(this.state.positions[this.state.currentMove]));\n  }\n\n  // Returns array with position, but availableMoves-array instead of piece-value for respective squares \n  evalPosition(position){\n    let evaluation = Array(position.length);\n    position.forEach((square, i) => {\n      evaluation[i] = this.availableMoves(i, position); \n    });\n    return evaluation;\n  }\n\n\n  // Returns object for each square\n  // .occupiedBy = int, piece \n  // .moves = [squares], available moves \n  // .defends = [squares], controlling these squares \n  // .attackedBy = [squares], attacked by these squares \n  evalPositionObj = (position) => {\n    let evaluation = Array(position.length);\n    position.forEach((square, i) => {\n      evaluation[i] = {}; \n      evaluation[i].occupiedBy = square;\n      let moves = this.getMoves(i, position);\n      if(Array.isArray(moves)){\n        [evaluation[i].moves, evaluation[i].defends] = moves; \n      }\n      if(evaluation[i].defends){\n        evaluation[i].defends.forEach(e => {\n          if(!evaluation[e]) evaluation[e] = {};\n          if(!evaluation[e].attackedBy) evaluation[e].attackedBy = []; \n          evaluation[e].attackedBy.push(i);\n        });\n      }\n    });\n    return evaluation;\n  }\n\n  convertBack(row, column){\n    return rev_conversion[Number(''+row+column)]; \n  }\n\n  // returns array: \n  // [0]->[availableMoves]\n  // [1]->[defends] \n  getMoves(square, position){\n    // console.time('moves');\n    let moves = [];\n    let defends = [];\n    let piece = position[square]; \n    if(piece===0) return 0;\n  \n    let [row, column] = conversion[square];\n    let multiplier = (piece>0) ? 1 : -1; \n    switch(Math.abs(piece)){\n      case 1: { // PAWN-white\n        if(piece===1){\n          if(row===6 && !this.hasPiece(position[square-16])) moves.push(square-16); // 2 forward\n          if(!this.hasPiece(position[square-8])) moves.push(square-8); // 1 forward \n          \n          if(column>=1 && row >=1){ \n            defends.push(this.convertBack(row-1, column-1));\n            if(this.hasOpposingPiece(piece, position[this.convertBack(row-1, column-1)])) moves.push(this.convertBack(row-1, column-1)); // up-left-capture \n          }\n          if(column<=6 && row >=1){\n            defends.push(this.convertBack(row-1, column+1));\n            if(this.hasOpposingPiece(piece, position[this.convertBack(row-1, column+1)])) moves.push(this.convertBack(row-1, column+1)); // up-right-capture \n          }\n        }else{ // PAWN-black \n          if(row===1 && !this.hasPiece(position[square+16])) moves.push(square+16); // 2 forward\n          if(!this.hasPiece(position[square+8])) moves.push(square+8); // 1 forward \n          \n          if(column>=1 && row<=6){\n            defends.push(this.convertBack(row+1, column-1));\n          if(this.hasOpposingPiece(piece, position[this.convertBack(row+1, column-1)])) moves.push(this.convertBack(row+1, column-1)); // down-left-capture \n          }\n          if(column<=6 && row<=6){\n            defends.push(this.convertBack(row+1, column+1));\n            if(this.hasOpposingPiece(piece, position[this.convertBack(row+1, column+1)])) moves.push(this.convertBack(row+1, column+1)); // down-right-capture \n          }\n        }\n        break;\n      }case 2:{ //BISHOPS \n        let r = row; \n        let left = true; let right = true; \n        let lc = column; let rc = column; \n        for(r=r+1;r<=7;r++){ // UNTEN \n          if(!left && !right) break; \n          if(left){\n            lc-=1;\n            if(lc<0) left = false; \n            else{\n              let current_square = this.convertBack(r, lc);\n              let current_piece = position[current_square];\n              if(this.hasPiece(current_piece)){\n                if(this.hasAlliedPiece(piece, current_piece)){ \n                  left = false; \n                  defends.push(current_square);\n                }else{\n                  moves.push(current_square); \n                  left = false; \n                }\n              }else moves.push(current_square);\n            }\n          }if(right){\n            rc+=1;\n            if(rc>7) right = false; \n            else{\n              let current_square = this.convertBack(r, rc);\n              let current_piece = position[current_square];\n              if(this.hasPiece(current_piece)){\n                if(this.hasAlliedPiece(piece, current_piece)){\n                  defends.push(current_square);\n                  right = false; \n                }else{\n                  moves.push(current_square); \n                  right = false; \n                }\n              }else moves.push(current_square);\n            }\n          }\n        }\n        r = row; \n        left = true; right = true; \n        lc = column; rc = column; \n        for(r=r-1;r>=0;r--){ // OBEN \n          if(!left && !right) break; \n          if(left){\n            lc-=1;\n            if(lc<0) left = false; \n            else{\n              let current_square = this.convertBack(r, lc);\n              let current_piece = position[current_square];\n              if(this.hasPiece(current_piece)){\n                if(this.hasAlliedPiece(piece, current_piece)){ \n                  defends.push(current_square);\n                  left = false; \n                }else{\n                  moves.push(current_square); \n                  left = false; \n                }\n              }else moves.push(current_square);\n            }\n          }if(right){\n            rc+=1;\n            if(rc>7) right = false; \n            else{\n              let current_square = this.convertBack(r, rc);\n              let current_piece = position[current_square];\n              if(this.hasPiece(current_piece)){\n                if(this.hasAlliedPiece(piece, current_piece)){ \n                  right = false; \n                  defends.push(current_square);\n                }else{\n                  moves.push(current_square); \n                  right = false; \n                }\n              }else moves.push(current_square);\n            }\n          }\n        }\n        defends = defends.concat(moves);\n        break; \n      }case 3:{ //KNIGHTS \n        let current_square;\n        if(row+1<=7){ // UNTEN\n          current_square = this.convertBack(row+1, column-2); \n          if(column-2>=0){\n            defends.push(current_square);\n            if(!this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square])) moves.push(current_square); \n          }\n          current_square = this.convertBack(row+1, column+2); \n          if(column+2<=7){\n            defends.push(current_square);\n            if(!this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square])) moves.push(current_square); \n          }\n          if(row+2<=7){\n            current_square = this.convertBack(row+2, column-1); \n            if(column-1>=0){\n             defends.push(current_square);\n             if(!this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square])) moves.push(current_square);\n            }\n            current_square = this.convertBack(row+2, column+1); \n            if(column+1<=7){\n              defends.push(current_square);\n              if( !this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square])) moves.push(current_square); \n            }\n          }\n\n        }\n        if(row-1>=0){ // OBEN\n          current_square = this.convertBack(row-1, column-2); \n          if(column-2>=0){\n            defends.push(current_square);\n            if(!this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square])) moves.push(current_square); \n          }\n          current_square = this.convertBack(row-1, column+2); \n          if(column+2<=7){\n            defends.push(current_square);\n            if(!this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square])) moves.push(current_square); \n          }\n          if(row-2>=0){\n            current_square = this.convertBack(row-2, column-1); \n            if(column-1>=0){\n              defends.push(current_square);\n              if(!this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square])) moves.push(current_square);\n            }\n            current_square = this.convertBack(row-2, column+1); \n            if(column+1<=7){\n              defends.push(current_square);\n              if(!this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square])) moves.push(current_square); \n            }\n          }\n\n        }\n        break;\n      }case 4: { //ROOKS \n        for(let r=row-1;r>=0;r--){ //OBEN \n          let current_square = this.convertBack(r, column);\n          let current_piece = position[current_square];\n          if(this.hasPiece(current_piece)){\n            if(this.hasAlliedPiece(current_piece, piece)){ \n              defends.push(current_square);\n              break;\n            }\n            moves.push(current_square);\n            break;\n          }\n          moves.push(current_square);\n        }\n        for(let r=row+1;r<=7;r++){ //UNTEN\n          let current_square = this.convertBack(r, column);\n          let current_piece = position[current_square];\n          if(this.hasPiece(current_piece)){\n            if(this.hasAlliedPiece(current_piece, piece)){\n              defends.push(current_square);\n              break;\n            }\n            moves.push(current_square);\n            break;\n          }\n          moves.push(current_square);\n        }\n        for(let c=column+1;c<=7;c++){ //RECHTS\n          let current_square = this.convertBack(row, c);\n          let current_piece = position[current_square];\n          if(this.hasPiece(current_piece)){\n            if(this.hasAlliedPiece(current_piece, piece)){\n             defends.push(current_square);\n             break;\n            }\n            moves.push(current_square);\n            break;\n          }\n          moves.push(current_square);\n        }\n        for(let c=column-1;c>=0;c--){ //LINKS\n          let current_square = this.convertBack(row, c);\n          let current_piece = position[current_square];\n          if(this.hasPiece(current_piece)){\n            if(this.hasAlliedPiece(current_piece, piece)){\n              defends.push(current_square);\n              break;\n            }\n            moves.push(current_square);\n            break;\n          }\n          moves.push(current_square);\n        }\n        defends = defends.concat(moves);\n        break; \n      }case 5: { //QUEENS \n        let r = row; \n        let left = true; let right = true; \n        let lc = column; let rc = column; \n        for(r=r+1;r<=7;r++){ // UNTEN \n          if(!left && !right) break; \n          if(left){\n            lc-=1;\n            if(lc<0) left = false; \n            else{\n              let current_square = this.convertBack(r, lc);\n              let current_piece = position[current_square];\n              if(this.hasPiece(current_piece)){\n                if(this.hasAlliedPiece(piece, current_piece)){\n                  defends.push(current_square);\n                  left = false; \n                }\n                else{\n                  moves.push(current_square); \n                  left = false; \n                } \n              }else moves.push(current_square);\n            }\n          }if(right){\n            rc+=1;\n            if(rc>7) right = false; \n            else{\n              let current_square = this.convertBack(r, rc);\n              let current_piece = position[current_square];\n              if(this.hasPiece(current_piece)){\n                if(this.hasAlliedPiece(piece, current_piece)){\n                  defends.push(current_square);\n                  right = false; \n                }\n                else{\n                  moves.push(current_square); \n                  right = false; \n                }\n              }else moves.push(current_square);\n            }\n          }\n        }\n        r = row; \n        left = true; right = true; \n        lc = column; rc = column; \n        for(r=r-1;r>=0;r--){ // OBEN \n          if(!left && !right) break; \n          if(left){\n            lc-=1;\n            if(lc<0) left = false; \n            else{\n              let current_square = this.convertBack(r, lc);\n              let current_piece = position[current_square];\n              if(this.hasPiece(current_piece)){\n                if(this.hasAlliedPiece(piece, current_piece)){\n                  defends.push(current_square);\n                  left = false; \n                }\n                else{\n                  moves.push(current_square); \n                  left = false; \n                }\n              }else moves.push(current_square);\n            }\n          }if(right){\n            rc+=1;\n            if(rc>7) right = false; \n            else{\n              let current_square = this.convertBack(r, rc);\n              let current_piece = position[current_square];\n              if(this.hasPiece(current_piece)){\n                if(this.hasAlliedPiece(piece, current_piece)){\n                  defends.push(current_square);\n                  right = false; \n                }\n                else{\n                  moves.push(current_square); \n                  right = false; \n                }\n              }else moves.push(current_square);\n            }\n          }\n        }\n        for(r=row-1;r>=0;r--){ //OBEN \n          let current_square = this.convertBack(r, column);\n          let current_piece = position[current_square];\n          if(this.hasPiece(current_piece)){\n            if(this.hasAlliedPiece(current_piece, piece)){\n              defends.push(current_square);\n              break;\n            }\n            moves.push(current_square);\n            break;\n          }\n          moves.push(current_square);\n        }\n        for(r=row+1;r<=7;r++){ //UNTEN\n          let current_square = this.convertBack(r, column);\n          let current_piece = position[current_square];\n          if(this.hasPiece(current_piece)){\n            if(this.hasAlliedPiece(current_piece, piece)){\n              defends.push(current_square);\n              break;\n            }\n            moves.push(current_square);\n            break;\n          }\n          moves.push(current_square);\n        }\n        for(c=column+1;c<=7;c++){ //RECHTS\n          let current_square = this.convertBack(row, c);\n          let current_piece = position[current_square];\n          if(this.hasPiece(current_piece)){\n            if(this.hasAlliedPiece(current_piece, piece)){\n              defends.push(current_square);\n              break;\n            }\n            moves.push(current_square);\n            break;\n          }\n          moves.push(current_square);\n        }\n        for(c=column-1;c>=0;c--){ //LINKS\n          let current_square = this.convertBack(row, c);\n          let current_piece = position[current_square];\n          if(this.hasPiece(current_piece)){\n            if(this.hasAlliedPiece(current_piece, piece)){\n              defends.push(current_square);\n              break;\n            }\n            moves.push(current_square);\n            break;\n          }\n          moves.push(current_square);\n        }\n        defends = defends.concat(moves);\n        break;\n      }case 6: { //KING\n        let col_r = true;\n        let col_l = true;\n        let cs; let cp; \n        if(row+1<=7){\n          cs = this.convertBack(row+1, column); // 1 unten\n          cp = position[cs]; \n          if(!this.hasPiece(cp)) moves.push(cs);\n          else{\n            if(this.hasOpposingPiece(cp, piece)) moves.push(cs);\n            else defends.push(cs)\n          }\n          if(column+1<=7){\n            cs = this.convertBack(row+1, column+1); //unten rechts \n            cp = position[cs];\n            if(!this.hasPiece(cp)) moves.push(cs);\n            else{\n              if(this.hasOpposingPiece(cp, piece)) moves.push(cs);\n              else defends.push(cs)\n            }\n          }else col_r = false; \n          if(column-1>=0){\n            cs = this.convertBack(row+1, column-1); // unten links\n            cp = position[cs];\n            if(!this.hasPiece(cp)) moves.push(cs);\n            else{\n              if(this.hasOpposingPiece(cp, piece)) moves.push(cs);\n              else defends.push(cs)\n            }\n          }else col_l = false;\n        }if(col_r){\n          if(column+1<=7){\n            cs = this.convertBack(row, column+1);// 1 rechts\n            cp = position[cs]; \n            if(!this.hasPiece(cp)) moves.push(cs);\n            else{\n              if(this.hasOpposingPiece(cp, piece)) moves.push(cs);\n              else defends.push(cs)\n            }\n          }else col_r = false; \n        }if(col_l){\n          if(column-1>=0){\n            cs = this.convertBack(row, column-1); // 1 links\n            cp = position[cs];\n            if(!this.hasPiece(cp)) moves.push(cs);\n            else{\n              if(this.hasOpposingPiece(cp, piece)) moves.push(cs);\n              else defends.push(cs)\n            }\n          }else col_l = false; \n        }if(row-1>=0){\n          cs = this.convertBack(row-1, column); // 1 oben\n          cp = position[cs]; \n          if(!this.hasPiece(cp)) moves.push(cs);\n          else{\n            if(this.hasOpposingPiece(cp, piece)) moves.push(cs);\n            else defends.push(cs)\n          }\n          if(col_r){\n            cs = this.convertBack(row-1, column+1); // oben rechts\n            cp = position[cs]; \n            if(!this.hasPiece(cp)) moves.push(cs);\n            else{\n              if(this.hasOpposingPiece(cp, piece)) moves.push(cs);\n              else defends.push(cs)\n            }\n          }if(col_l){\n            cs = this.convertBack(row-1, column-1); // oben links\n            cp = position[cs]; \n            if(!this.hasPiece(cp)) moves.push(cs);\n            else{\n              if(this.hasOpposingPiece(cp, piece)) moves.push(cs);\n              else defends.push(cs)\n            }\n          }\n        }\n        defends = defends.concat(moves);\n        break;\n      }case 0: return 0;\n      default: return 0;      \n    }\n    return [moves, defends];\n  }\n\n  availableMoves(square, position){\n    // console.time('moves');\n    let moves = [];\n    let piece = position[square]; \n    if(piece===0) return 0;\n  \n    let [row, column] = conversion[square];\n    let multiplier = (piece>0) ? 1 : -1; \n    switch(Math.abs(piece)){\n\n      case 1: { // PAWN-white\n        if(piece===1){\n          if(row===6 && !this.hasPiece(position[square-16])) moves.push(square-16); // 2 forward\n          if(!this.hasPiece(position[square-8])) moves.push(square-8); // 1 forward \n          \n          if(column>=1 && row >=1 && this.hasOpposingPiece(piece, position[this.convertBack(row-1, column-1)])) moves.push(this.convertBack(row-1, column-1)); // up-left-capture \n          if(column<=6 && row >=1 && this.hasOpposingPiece(piece, position[this.convertBack(row-1, column+1)])) moves.push(this.convertBack(row-1, column+1)); // up-right-capture \n        }else{\n          if(row===1 && !this.hasPiece(position[square+16])) moves.push(square+16); // 2 forward\n          if(!this.hasPiece(position[square+8])) moves.push(square+8); // 1 forward \n          \n          if(column>=1 && row<=6 && this.hasOpposingPiece(piece, position[this.convertBack(row+1, column-1)])) moves.push(this.convertBack(row+1, column-1)); // down-left-capture \n          if(column<=6 && row<=6 && this.hasOpposingPiece(piece, position[this.convertBack(row+1, column+1)])) moves.push(this.convertBack(row+1, column+1)); // down-right-capture \n        }\n        break;\n      }case 2:{ //BISHOPS \n        let r = row; \n        let left = true; let right = true; \n        let lc = column; let rc = column; \n        for(r=r+1;r<=7;r++){ // UNTEN \n          if(!left && !right) break; \n          if(left){\n            lc-=1;\n            if(lc<0) left = false; \n            else{\n              let current_square = this.convertBack(r, lc);\n              let current_piece = position[current_square];\n              if(this.hasPiece(current_piece)){\n                if(this.hasAlliedPiece(piece, current_piece)) left = false; \n                else{\n                  moves.push(current_square); \n                  left = false; \n                }\n              }else moves.push(current_square);\n            }\n          }if(right){\n            rc+=1;\n            if(rc>7) right = false; \n            else{\n              let current_square = this.convertBack(r, rc);\n              let current_piece = position[current_square];\n              if(this.hasPiece(current_piece)){\n                if(this.hasAlliedPiece(piece, current_piece)) right = false; \n                else{\n                  moves.push(current_square); \n                  right = false; \n                }\n              }else moves.push(current_square);\n            }\n          }\n        }\n        r = row; \n        left = true; right = true; \n        lc = column; rc = column; \n        for(r=r-1;r>=0;r--){ // OBEN \n          if(!left && !right) break; \n          if(left){\n            lc-=1;\n            if(lc<0) left = false; \n            else{\n              let current_square = this.convertBack(r, lc);\n              let current_piece = position[current_square];\n              if(this.hasPiece(current_piece)){\n                if(this.hasAlliedPiece(piece, current_piece)) left = false; \n                else{\n                  moves.push(current_square); \n                  left = false; \n                }\n              }else moves.push(current_square);\n            }\n          }if(right){\n            rc+=1;\n            if(rc>7) right = false; \n            else{\n              let current_square = this.convertBack(r, rc);\n              let current_piece = position[current_square];\n              if(this.hasPiece(current_piece)){\n                if(this.hasAlliedPiece(piece, current_piece)) right = false; \n                else{\n                  moves.push(current_square); \n                  right = false; \n                }\n              }else moves.push(current_square);\n            }\n          }\n        }\n        break; \n      }case 3:{ //KNIGHTS \n        let current_square;\n        if(row+1<=7){ // UNTEN\n          current_square = this.convertBack(row+1, column-2); \n          if(column-2>=0 && ( !this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square]))) moves.push(current_square); \n          current_square = this.convertBack(row+1, column+2); \n          if(column+2<=7 && ( !this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square]))) moves.push(current_square); \n          if(row+2<=7){\n            current_square = this.convertBack(row+2, column-1); \n            if(column-1>=0 && ( !this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square]))) moves.push(current_square);\n            current_square = this.convertBack(row+2, column+1); \n            if(column+1<=7 && ( !this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square]))) moves.push(current_square); \n          }\n\n        }\n        if(row-1>=0){ // OBEN\n          current_square = this.convertBack(row-1, column-2); \n          if(column-2>=0 && ( !this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square]))) moves.push(current_square); \n          current_square = this.convertBack(row-1, column+2); \n          if(column+2<=7 && ( !this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square]))) moves.push(current_square); \n          if(row-2>=0){\n            current_square = this.convertBack(row-2, column-1); \n            if(column-1>=0 && ( !this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square]))) moves.push(current_square);\n            current_square = this.convertBack(row-2, column+1); \n            if(column+1<=7 && ( !this.hasPiece(position[current_square]) || this.hasOpposingPiece(piece, position[current_square]))) moves.push(current_square); \n          }\n\n        }\n        break;\n      }case 4: { //ROOKS \n        for(let r=row-1;r>=0;r--){ //OBEN \n          let current_square = this.convertBack(r, column);\n          let current_piece = position[current_square];\n          if(this.hasPiece(current_piece)){\n            if(this.hasAlliedPiece(current_piece, piece)) break;\n            moves.push(current_square);\n            break;\n          }\n          moves.push(current_square);\n        }\n        for(let r=row+1;r<=7;r++){ //UNTEN\n          let current_square = this.convertBack(r, column);\n          let current_piece = position[current_square];\n          if(this.hasPiece(current_piece)){\n            if(this.hasAlliedPiece(current_piece, piece)) break;\n            moves.push(current_square);\n            break;\n          }\n          moves.push(current_square);\n        }\n        for(let c=column+1;c<=7;c++){ //RECHTS\n          let current_square = this.convertBack(row, c);\n          let current_piece = position[current_square];\n          if(this.hasPiece(current_piece)){\n            if(this.hasAlliedPiece(current_piece, piece)) break;\n            moves.push(current_square);\n            break;\n          }\n          moves.push(current_square);\n        }\n        for(let c=column-1;c>=0;c--){ //LINKS\n          let current_square = this.convertBack(row, c);\n          let current_piece = position[current_square];\n          if(this.hasPiece(current_piece)){\n            if(this.hasAlliedPiece(current_piece, piece)) break;\n            moves.push(current_square);\n            break;\n          }\n          moves.push(current_square);\n        }\n        break; \n      }case 5: { //QUEENS \n        let r = row; \n        let left = true; let right = true; \n        let lc = column; let rc = column; \n        for(r=r+1;r<=7;r++){ // UNTEN \n          if(!left && !right) break; \n          if(left){\n            lc-=1;\n            if(lc<0) left = false; \n            else{\n              let current_square = this.convertBack(r, lc);\n              let current_piece = position[current_square];\n              if(this.hasPiece(current_piece)){\n                if(this.hasAlliedPiece(piece, current_piece)) left = false; \n                else{\n                  moves.push(current_square); \n                  left = false; \n                } \n              }else moves.push(current_square);\n            }\n          }if(right){\n            rc+=1;\n            if(rc>7) right = false; \n            else{\n              let current_square = this.convertBack(r, rc);\n              let current_piece = position[current_square];\n              if(this.hasPiece(current_piece)){\n                if(this.hasAlliedPiece(piece, current_piece)) right = false; \n                else{\n                  moves.push(current_square); \n                  right = false; \n                }\n              }else moves.push(current_square);\n            }\n          }\n        }\n        r = row; \n        left = true; right = true; \n        lc = column; rc = column; \n        for(r=r-1;r>=0;r--){ // OBEN \n          if(!left && !right) break; \n          if(left){\n            lc-=1;\n            if(lc<0) left = false; \n            else{\n              let current_square = this.convertBack(r, lc);\n              let current_piece = position[current_square];\n              if(this.hasPiece(current_piece)){\n                if(this.hasAlliedPiece(piece, current_piece)) left = false; \n                else{\n                  moves.push(current_square); \n                  left = false; \n                }\n              }else moves.push(current_square);\n            }\n          }if(right){\n            rc+=1;\n            if(rc>7) right = false; \n            else{\n              let current_square = this.convertBack(r, rc);\n              let current_piece = position[current_square];\n              if(this.hasPiece(current_piece)){\n                if(this.hasAlliedPiece(piece, current_piece)) right = false; \n                else{\n                  moves.push(current_square); \n                  right = false; \n                }\n              }else moves.push(current_square);\n            }\n          }\n        }\n        for(r=row-1;r>=0;r--){ //OBEN \n          let current_square = this.convertBack(r, column);\n          let current_piece = position[current_square];\n          if(this.hasPiece(current_piece)){\n            if(this.hasAlliedPiece(current_piece, piece)) break;\n            moves.push(current_square);\n            break;\n          }\n          moves.push(current_square);\n        }\n        for(r=row+1;r<=7;r++){ //UNTEN\n          let current_square = this.convertBack(r, column);\n          let current_piece = position[current_square];\n          if(this.hasPiece(current_piece)){\n            if(this.hasAlliedPiece(current_piece, piece)) break;\n            moves.push(current_square);\n            break;\n          }\n          moves.push(current_square);\n        }\n        for(c=column+1;c<=7;c++){ //RECHTS\n          let current_square = this.convertBack(row, c);\n          let current_piece = position[current_square];\n          if(this.hasPiece(current_piece)){\n            if(this.hasAlliedPiece(current_piece, piece)) break;\n            moves.push(current_square);\n            break;\n          }\n          moves.push(current_square);\n        }\n        for(c=column-1;c>=0;c--){ //LINKS\n          let current_square = this.convertBack(row, c);\n          let current_piece = position[current_square];\n          if(this.hasPiece(current_piece)){\n            if(this.hasAlliedPiece(current_piece, piece)) break;\n            moves.push(current_square);\n            break;\n          }\n          moves.push(current_square);\n        }\n        break;\n      }case 6: { //KING\n        let col_r = true;\n        let col_l = true;\n        let cs; let cp; \n        if(row+1<=7){\n          cs = this.convertBack(row+1, column); // 1 unten\n          cp = position[cs]; \n          if(!this.hasPiece(cp) || this.hasOpposingPiece(cp, piece)) moves.push(cs);\n          if(column+1<=7){\n            cs = this.convertBack(row+1, column+1); //unten rechts \n            cp = position[cs];\n            if(!this.hasPiece(cp) || this.hasOpposingPiece(cp, piece)) moves.push(cs);\n          }else col_r = false; \n          if(column-1>=0){\n            cs = this.convertBack(row+1, column-1); // unten links\n            cp = position[cs];\n            if(!this.hasPiece(cp) || this.hasOpposingPiece(cp, piece)) moves.push(cs);\n          }else col_l = false;\n        }if(col_r){\n          if(column+1<=7){\n            cs = this.convertBack(row, column+1);// 1 rechts\n            cp = position[cs]; \n            if(!this.hasPiece(cp) || this.hasOpposingPiece(cp, piece)) moves.push(cs);\n          }else col_r = false; \n        }if(col_l){\n          if(column-1>=0){\n            cs = this.convertBack(row, column-1); // 1 links\n            cp = position[cs];\n            if(!this.hasPiece(cp) || this.hasOpposingPiece(cp, piece)) moves.push(cs);\n          }else col_l = false; \n        }if(row-1>=0){\n          cs = this.convertBack(row-1, column); // 1 oben\n          cp = position[cs]; \n          if(!this.hasPiece(cp) || this.hasOpposingPiece(cp, piece)) moves.push(cs);\n          if(col_r){\n            cs = this.convertBack(row-1, column+1); // oben rechts\n            cp = position[cs]; \n            if(!this.hasPiece(cp) || this.hasOpposingPiece(cp, piece)) moves.push(cs);\n          }if(col_l){\n            cs = this.convertBack(row-1, column-1); // oben links\n            cp = position[cs]; \n            if(!this.hasPiece(cp) || this.hasOpposingPiece(cp, piece)) moves.push(cs);\n          }\n        }\n        break;\n      }case 0: return 0;\n      default: return 0;\n    } \n    // console.timeEnd('moves');\n    return moves; \n  }\n\n  // @e: dragEvent\n  // @i: square of dragged piece \n  dragStartHandler = (e, i) => {\n    console.log(i);\n    e.dataTransfer.effectAllowed = \"all\"\n    e.dataTransfer.dropEffect = \"move\";\n    e.dataTransfer.setData(\"text/plain\", i);\n    requestAnimationFrame(function () {\n      e.target.classList.add('hide');\n    });\n    let moves = this.state.evalObj[i].moves;\n    moves.forEach(el => {\n      document.getElementById('s'+el).classList.add('moveable');\n    });\n    this.setState({piece_dragging: i});\n  }\n\n  dragEndHandler = (e) =>{\n    e.preventDefault();\n    requestAnimationFrame(function () {\n        e.target.classList.remove('hide');\n      });\n  }\n\n  getColorToMoveByMoveNumber(number){\n    return number%2===0 ? 1 : -1; \n  }\n\n  moveClick = (number) => {\n    console.log('move clicked',number);\n    this.setState(prevState=>({\n      selectedMove: number,\n      evalObj: this.evalPositionObj(prevState.positions[number]),\n      colorToMove: this.getColorToMoveByMoveNumber(number)\n    }));\n  }\n\n  handleClick = (square) => {\n    let clicked = this.state.piece_clicked; \n    if(clicked){\n      let moves = this.state.evalObj[clicked].moves; \n      if(moves.includes(square)){ \n        this.removeClassFromAll('moveable'); \n        this.removeClassFromAll('active');\n        this.setState({piece_clicked: false}, this.newMove(clicked, square));\n      }else{\n        // this.removeClassFromAll('active'); \n        // this.setState({piece_clicked: false })\n      }\n    }\n  }\n\n  handlePieceClick = (square, event) => {\n    let clicked = this.state.piece_clicked;\n\n    if(!clicked){\n      if(this.getColorFromSquare(square)!==this.state.colorToMove) return; \n      let moves = this.state.evalObj[square].moves;\n      event.target.parentElement.classList.add('active');\n      moves.forEach(el => {\n        document.getElementById('s'+el).classList.add('moveable');\n      });\n      this.setState({piece_clicked: square});\n    }else{\n      this.removeClassFromAll('active');\n      this.removeClassFromAll('moveable');\n      if(this.getColorFromSquare(square)===this.state.colorToMove){ // Wenn selbfarbiges, anderes piece gedrückt \n          event.target.parentElement.classList.add('active');\n          let moves = this.state.evalObj[square].moves;\n          moves.forEach(el => {\n            document.getElementById('s'+el).classList.add('moveable');\n          });\n          this.setState({piece_clicked: square});\n      }else{ // Capture \n        let legitmoves = this.state.evalObj[clicked].moves;\n        if(legitmoves.includes(square)){\n          this.setState({piece_clicked: false}, this.newMove(clicked, square));  \n        } \n      }\n    }\n  }\n\n  dropHandler = (e, target) => {\n    e.preventDefault();\n    let origin = e.dataTransfer.getData('text/plain');\n    this.removeClassFromAll('dragover');\n    this.removeClassFromAll('moveable');\n    let moves = this.state.evalObj[origin].moves;\n    if(moves.includes(target)) this.setState({piece_dragging: false}, this.newMove(origin, target));\n    else this.setState({piece_dragging: false});\n  };\n\n  removeClassFromAll(remove){\n    document.querySelectorAll('.'+remove).forEach(el=>el.classList.remove(remove));\n  }\n\n  switchColor(){ return this.state.colorToMove === 1 ? -1 : 1; }\n\n  getColor(piece){ return piece<0 ? -1 : 1; }\n\n  getColorFromSquare(square){ return this.getColor(this.state.positions[this.state.currentMove][square]); }\n\n  hasPiece(piece){ return Math.abs(piece)>0; }\n\n  squareHasPiece(square){ return this.hasPiece(this.state.positions[this.state.currentMove][square]); }\n  \n  squareHasOpposingPiece(square, square2){ return this.getColorFromSquare(square) !== this.getColorFromSquare(square2); }\n\n  hasOpposingPiece(piece1, piece2){ return (this.hasPiece(piece2) && this.getColor(piece1)!==this.getColor(piece2)); }\n  \n  hasAlliedPiece(piece1, piece2){ return (this.hasPiece(piece2) && this.getColor(piece1)===this.getColor(piece2)); }\n\n  newMove(from, to){\n    let positions = JSON.parse(JSON.stringify(this.state.positions));\n    let old_position = Array.from(positions[positions.length-1]);\n    let new_position = Array.from(old_position);\n\n    if(this.getColor(old_position[from])!==this.state.colorToMove) return; \n    if(this.hasPiece(old_position[to])){ \n      if(this.getColor(old_position[from])===this.getColor(old_position[to])) return; \n    }\n    let moved_piece = old_position[from];\n    new_position[to] = new_position[from];\n    new_position[from] = 0;\n    positions.push(new_position);\n\n    this.setState(prevState=>({\n      positions: positions,\n      lastMove: [prevState.currentMove, moved_piece, to],\n      currentMove: prevState.currentMove+1,\n      selectedMove: prevState.currentMove+1,\n      colorToMove: this.switchColor(),\n      evalObj: this.evalPositionObj(new_position)\n    }));\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}