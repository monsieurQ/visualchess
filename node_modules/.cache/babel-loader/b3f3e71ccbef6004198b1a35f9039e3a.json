{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/q/Documents/WebDocuments/ChessReact/chess/src/components/Moves/Moves.js\";\nimport React, { Component } from 'react';\nimport './Moves.css';\nlet typeConversion = ['', 'B', 'N', 'R', 'Q', 'K'];\nlet moveConverter = [\"a8\", \"b8\", \"c8\", \"d8\", \"e8\", \"f8\", \"g8\", \"h8\", \"a7\", \"b7\", \"c7\", \"d7\", \"e7\", \"f7\", \"g7\", \"h7\", \"a6\", \"b6\", \"c6\", \"d6\", \"e6\", \"f6\", \"g6\", \"h6\", \"a5\", \"b5\", \"c5\", \"d5\", \"e5\", \"f5\", \"g5\", \"h5\", \"a4\", \"b4\", \"c4\", \"d4\", \"e4\", \"f4\", \"g4\", \"h4\", \"a3\", \"b3\", \"c3\", \"d3\", \"e3\", \"f3\", \"g3\", \"h3\", \"a2\", \"b2\", \"c2\", \"d2\", \"e2\", \"f2\", \"g2\", \"h2\", \"a1\", \"b1\", \"c1\", \"d1\", \"e1\", \"f1\", \"g1\", \"h1\"]; // TYPES \n// PAWN - 1\n// BISHOP - 2 \n// KNIGHT - 3\n// ROOK - 4 \n// QUEEN - 5 \n// KING - 6\n\nclass Moves extends Component {\n  constructor(props) {\n    super(props);\n    let {\n      lastMove,\n      onClick\n    } = props; // this.newMoveBlack = this.newMoveBlack.bind(this);\n\n    this.state = {\n      moves: [],\n      moveDisplay: 1\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    let {\n      lastMove\n    } = props;\n    if (!lastMove || lastMove === undefined) return null;\n    let moves = state.moves;\n    moves.push(lastMove);\n    return {\n      moves: moves\n    };\n  }\n\n  render() {\n    let moves = this.state.moves;\n    console.log(moves);\n    let classes = ['move_number', 'move_white', 'move_black'];\n    let render = [];\n    let tick = 0;\n    let count = 1;\n    moves.forEach((element, index) => {\n      if (tick === 0) {\n        render.push( /*#__PURE__*/React.createElement('div', {\n          className: classes[tick],\n          key: 'mr' + count\n        }, count));\n        count++;\n      }\n\n      render.push( /*#__PURE__*/React.createElement('div', {\n        className: classes[tick],\n        key: 'm' + index\n      }, moveConverter[element]));\n      tick = tick > 2 ? 0 : tick + 1;\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"moves\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"top_row\",\n        children: \" Moves \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"moves_table\",\n        children: render\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 4\n    }, this);\n  }\n\n  numberOfRows(length) {\n    return Math.ceil(length / 2);\n  }\n\n  newMoveWhite(move_number, type, move, internal_move) {\n    let row_number = /*#__PURE__*/React.createElement('div', {\n      className: 'move_number',\n      key: `move_number${move_number}`\n    }, move_number);\n    let white = /*#__PURE__*/React.createElement('div', {\n      className: 'move_white',\n      key: `move_white${move_number}`,\n      onClick: () => this.props.onClick(1, internal_move)\n    }, typeConversion[type] + this.convertMove(move));\n    return [row_number, white];\n  }\n\n  newMoveBlack(move_number, type, move, internal_move) {\n    return /*#__PURE__*/React.createElement('div', {\n      className: 'move_black',\n      key: `move_black${move_number}`,\n      onClick: () => this.props.onClick(-1, internal_move)\n    }, typeConversion[type] + this.convertMove(move));\n  }\n\n}\n\nexport default Moves;","map":{"version":3,"sources":["/Users/q/Documents/WebDocuments/ChessReact/chess/src/components/Moves/Moves.js"],"names":["React","Component","typeConversion","moveConverter","Moves","constructor","props","lastMove","onClick","state","moves","moveDisplay","getDerivedStateFromProps","undefined","push","render","console","log","classes","tick","count","forEach","element","index","createElement","className","key","numberOfRows","length","Math","ceil","newMoveWhite","move_number","type","move","internal_move","row_number","white","convertMove","newMoveBlack"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAO,aAAP;AAEA,IAAIC,cAAc,GAAG,CAAC,EAAD,EAAI,GAAJ,EAAQ,GAAR,EAAY,GAAZ,EAAgB,GAAhB,EAAoB,GAApB,CAArB;AACA,IAAIC,aAAa,GAAG,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,IAA/B,EAAqC,IAArC,EAA2C,IAA3C,EAAiD,IAAjD,EAAuD,IAAvD,EAA6D,IAA7D,EAAmE,IAAnE,EAAyE,IAAzE,EAA+E,IAA/E,EAAqF,IAArF,EAA2F,IAA3F,EAAiG,IAAjG,EAAuG,IAAvG,EAA6G,IAA7G,EAAmH,IAAnH,EAAyH,IAAzH,EAA+H,IAA/H,EAAqI,IAArI,EAA2I,IAA3I,EAAiJ,IAAjJ,EAAuJ,IAAvJ,EAA6J,IAA7J,EAAmK,IAAnK,EAAyK,IAAzK,EAA+K,IAA/K,EAAqL,IAArL,EAA2L,IAA3L,EAAiM,IAAjM,EAAuM,IAAvM,EAA6M,IAA7M,EAAmN,IAAnN,EAAyN,IAAzN,EAA+N,IAA/N,EAAqO,IAArO,EAA2O,IAA3O,EAAiP,IAAjP,EAAuP,IAAvP,EAA6P,IAA7P,EAAmQ,IAAnQ,EAAyQ,IAAzQ,EAA+Q,IAA/Q,EAAqR,IAArR,EAA2R,IAA3R,EAAiS,IAAjS,EAAuS,IAAvS,EAA6S,IAA7S,EAAmT,IAAnT,EAAyT,IAAzT,EAA+T,IAA/T,EAAqU,IAArU,EAA2U,IAA3U,EAAiV,IAAjV,EAAuV,IAAvV,EAA6V,IAA7V,EAAmW,IAAnW,EAAyW,IAAzW,EAA+W,IAA/W,EAAqX,IAArX,EAA2X,IAA3X,CAApB,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,KAAN,SAAoBH,SAApB,CAA8B;AAE7BI,EAAAA,WAAW,CAACC,KAAD,EAAO;AACjB,UAAMA,KAAN;AACA,QAAI;AAACC,MAAAA,QAAD;AAAWC,MAAAA;AAAX,QAAsBF,KAA1B,CAFiB,CAGjB;;AACA,SAAKG,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE,EADI;AAEXC,MAAAA,WAAW,EAAE;AAFF,KAAb;AAIA;;AAED,SAAOC,wBAAP,CAAgCN,KAAhC,EAAuCG,KAAvC,EAA8C;AAC7C,QAAI;AAACF,MAAAA;AAAD,QAAaD,KAAjB;AACA,QAAG,CAACC,QAAD,IAAWA,QAAQ,KAAGM,SAAzB,EAAoC,OAAO,IAAP;AACpC,QAAIH,KAAK,GAAGD,KAAK,CAACC,KAAlB;AACAA,IAAAA,KAAK,CAACI,IAAN,CAAWP,QAAX;AACA,WAAO;AAACG,MAAAA,KAAK,EAAEA;AAAR,KAAP;AACA;;AAEDK,EAAAA,MAAM,GAAE;AACP,QAAIL,KAAK,GAAG,KAAKD,KAAL,CAAWC,KAAvB;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAYP,KAAZ;AACA,QAAIQ,OAAO,GAAG,CAAC,aAAD,EAAgB,YAAhB,EAA8B,YAA9B,CAAd;AACA,QAAIH,MAAM,GAAG,EAAb;AACA,QAAII,IAAI,GAAG,CAAX;AACA,QAAIC,KAAK,GAAG,CAAZ;AACAV,IAAAA,KAAK,CAACW,OAAN,CAAc,CAACC,OAAD,EAAUC,KAAV,KAAoB;AACjC,UAAGJ,IAAI,KAAG,CAAV,EAAY;AACXJ,QAAAA,MAAM,CAACD,IAAP,eACCd,KAAK,CAACwB,aAAN,CAAoB,KAApB,EAA2B;AAACC,UAAAA,SAAS,EAACP,OAAO,CAACC,IAAD,CAAlB;AAA0BO,UAAAA,GAAG,EAAC,OAAKN;AAAnC,SAA3B,EAAsEA,KAAtE,CADD;AAGAA,QAAAA,KAAK;AACL;;AACDL,MAAAA,MAAM,CAACD,IAAP,eACCd,KAAK,CAACwB,aAAN,CAAoB,KAApB,EAA2B;AAACC,QAAAA,SAAS,EAACP,OAAO,CAACC,IAAD,CAAlB;AAA0BO,QAAAA,GAAG,EAAC,MAAIH;AAAlC,OAA3B,EAAqEpB,aAAa,CAACmB,OAAD,CAAlF,CADD;AAIAH,MAAAA,IAAI,GAAIA,IAAI,GAAC,CAAN,GAAW,CAAX,GAAeA,IAAI,GAAC,CAA3B;AACA,KAZD;AAcA,wBACC;AAAK,MAAA,EAAE,EAAC,OAAR;AAAA,8BACC;AAAK,QAAA,EAAE,EAAC,SAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,eAEC;AAAK,QAAA,EAAE,EAAC,aAAR;AAAA,kBACEJ;AADF;AAAA;AAAA;AAAA;AAAA,cAFD;AAAA;AAAA;AAAA;AAAA;AAAA,YADD;AASA;;AAGDY,EAAAA,YAAY,CAACC,MAAD,EAAQ;AACnB,WAAOC,IAAI,CAACC,IAAL,CAAUF,MAAM,GAAC,CAAjB,CAAP;AACA;;AAEDG,EAAAA,YAAY,CAACC,WAAD,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,aAA1B,EAAwC;AACnD,QAAIC,UAAU,gBAAGpC,KAAK,CAACwB,aAAN,CAAoB,KAApB,EAA2B;AAACC,MAAAA,SAAS,EAAC,aAAX;AAAyBC,MAAAA,GAAG,EAAE,cAAaM,WAAY;AAAvD,KAA3B,EAAsFA,WAAtF,CAAjB;AACA,QAAIK,KAAK,gBAAGrC,KAAK,CAACwB,aAAN,CAAoB,KAApB,EAA2B;AAACC,MAAAA,SAAS,EAAC,YAAX;AAAyBC,MAAAA,GAAG,EAAG,aAAYM,WAAY,EAAvD;AAA0DxB,MAAAA,OAAO,EAAC,MAAI,KAAKF,KAAL,CAAWE,OAAX,CAAmB,CAAnB,EAAsB2B,aAAtB;AAAtE,KAA3B,EAAuIjC,cAAc,CAAC+B,IAAD,CAAd,GAAqB,KAAKK,WAAL,CAAiBJ,IAAjB,CAA5J,CAAZ;AACA,WAAO,CAACE,UAAD,EAAaC,KAAb,CAAP;AACA;;AACDE,EAAAA,YAAY,CAACP,WAAD,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,aAA1B,EAAwC;AACnD,wBAAOnC,KAAK,CAACwB,aAAN,CAAoB,KAApB,EAA2B;AAACC,MAAAA,SAAS,EAAC,YAAX;AAAyBC,MAAAA,GAAG,EAAG,aAAYM,WAAY,EAAvD;AAA0DxB,MAAAA,OAAO,EAAC,MAAI,KAAKF,KAAL,CAAWE,OAAX,CAAmB,CAAC,CAApB,EAAuB2B,aAAvB;AAAtE,KAA3B,EAAwIjC,cAAc,CAAC+B,IAAD,CAAd,GAAqB,KAAKK,WAAL,CAAiBJ,IAAjB,CAA7J,CAAP;AAEA;;AAjE4B;;AAyE9B,eAAe9B,KAAf","sourcesContent":["import React, {Component} from 'react'; \nimport './Moves.css';\n\nlet typeConversion = ['','B','N','R','Q','K'];\nlet moveConverter = [\"a8\", \"b8\", \"c8\", \"d8\", \"e8\", \"f8\", \"g8\", \"h8\", \"a7\", \"b7\", \"c7\", \"d7\", \"e7\", \"f7\", \"g7\", \"h7\", \"a6\", \"b6\", \"c6\", \"d6\", \"e6\", \"f6\", \"g6\", \"h6\", \"a5\", \"b5\", \"c5\", \"d5\", \"e5\", \"f5\", \"g5\", \"h5\", \"a4\", \"b4\", \"c4\", \"d4\", \"e4\", \"f4\", \"g4\", \"h4\", \"a3\", \"b3\", \"c3\", \"d3\", \"e3\", \"f3\", \"g3\", \"h3\", \"a2\", \"b2\", \"c2\", \"d2\", \"e2\", \"f2\", \"g2\", \"h2\", \"a1\", \"b1\", \"c1\", \"d1\", \"e1\", \"f1\", \"g1\", \"h1\"];\n// TYPES \n// PAWN - 1\n// BISHOP - 2 \n// KNIGHT - 3\n// ROOK - 4 \n// QUEEN - 5 \n// KING - 6\nclass Moves extends Component {\n\n\tconstructor(props){\n\t\tsuper(props);\n\t\tlet {lastMove, onClick} = props;  \n\t\t// this.newMoveBlack = this.newMoveBlack.bind(this);\n\t\tthis.state = {\n\t\t\t moves: [],\n\t\t\t moveDisplay: 1\n\t\t}\n\t}\n\n\tstatic getDerivedStateFromProps(props, state) {\n\t\tlet {lastMove} = props; \n\t\tif(!lastMove||lastMove===undefined) return null;\n\t\tlet moves = state.moves; \n\t\tmoves.push(lastMove);\n\t\treturn {moves: moves};\n\t}\t\t\n\n\trender(){\n\t\tlet moves = this.state.moves; \n\t\tconsole.log(moves);\n\t\tlet classes = ['move_number', 'move_white', 'move_black']; \n\t\tlet render = []; \n\t\tlet tick = 0;\n\t\tlet count = 1;\n\t\tmoves.forEach((element, index) => {\t\n\t\t\tif(tick===0){\n\t\t\t\trender.push(\n\t\t\t\t\tReact.createElement('div', {className:classes[tick], key:'mr'+count}, count)\n\t\t\t\t);\n\t\t\t\tcount++;\n\t\t\t}\t\n\t\t\trender.push(\n\t\t\t\tReact.createElement('div', {className:classes[tick], key:'m'+index}, moveConverter[element])\n\t\t\t); \n\t\t\n\t\t\ttick = (tick>2) ? 0 : tick+1; \n\t\t});\n\n\t\treturn (\n\t\t\t<div id=\"moves\"> \n\t\t\t\t<div id=\"top_row\"> Moves </div>\n\t\t\t\t<div id=\"moves_table\"> \n\t\t\t\t\t{render\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n\n\n\tnumberOfRows(length){\n\t\treturn Math.ceil(length/2);\n\t}\n\n\tnewMoveWhite(move_number, type, move, internal_move){\n\t\tlet row_number = React.createElement('div', {className:'move_number',key:`move_number${move_number}`}, move_number);\n\t\tlet white = React.createElement('div', {className:'move_white', key: `move_white${move_number}`, onClick:()=>this.props.onClick(1, internal_move)},typeConversion[type]+this.convertMove(move));\n\t\treturn [row_number, white];\n\t}\n\tnewMoveBlack(move_number, type, move, internal_move){\n\t\treturn React.createElement('div', {className:'move_black', key: `move_black${move_number}`, onClick:()=>this.props.onClick(-1, internal_move)},typeConversion[type]+this.convertMove(move));\n\t\t\n\t}\n\n\n\t\n\n\t\n}\n\nexport default Moves; "]},"metadata":{},"sourceType":"module"}